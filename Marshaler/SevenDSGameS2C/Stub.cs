using Nettention.Proud;

namespace SevenDSGameS2C
{
    public class Stub : RmiStub
    {
        public override bool ProcessReceivedMessage(ReceivedMessage pa, object hostTag)
        {
            HostID remoteHostID = pa.RemoteHostID;
            if (remoteHostID == HostID.HostID_None)
            {
                base.ShowUnknownHostIDWarning(remoteHostID);
            }
            Message readOnlyMessage = pa.ReadOnlyMessage;
            int readOffset = readOnlyMessage.ReadOffset;
            RmiID rmiID = RmiID.RmiID_None;
            if (readOnlyMessage.Read(out rmiID))
            {
                switch (rmiID)
                {
                    case Common.CG_CommonCancel:
                        this.ProcessReceivedMessage_CG_CommonCancel(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.GC_NotifyUserLevelUp:
                        this.ProcessReceivedMessage_GC_NotifyUserLevelUp(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_FrozenAssetCancel:
                        this.ProcessReceivedMessage_CG_FrozenAssetCancel(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestChannelUserInfoOK:
                        this.ProcessReceivedMessage_CG_RequestChannelUserInfoOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestHeartBeatOK:
                        this.ProcessReceivedMessage_CG_RequestHeartBeatOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestChangeNicknameOK:
                        this.ProcessReceivedMessage_CG_RequestChangeNicknameOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestChangeWantToSayOK:
                        this.ProcessReceivedMessage_CG_RequestChangeWantToSayOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestTeamInfoOK:
                        this.ProcessReceivedMessage_CG_RequestTeamInfoOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestTeamSlotChangeOK:
                        this.ProcessReceivedMessage_CG_RequestTeamSlotChangeOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestTeamNameChangeOK:
                        this.ProcessReceivedMessage_CG_RequestTeamNameChangeOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestLobbyInfoOK:
                        this.ProcessReceivedMessage_CG_RequestLobbyInfoOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestBasePointInfoOK:
                        this.ProcessReceivedMessage_CG_RequestBasePointInfoOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestChatStampUpdateBookmarkOK:
                        this.ProcessReceivedMessage_CG_RequestChatStampUpdateBookmarkOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestChatStampUpdateQuickMessageOK:
                        this.ProcessReceivedMessage_CG_RequestChatStampUpdateQuickMessageOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestMainSkinChangeOK:
                        this.ProcessReceivedMessage_CG_RequestMainSkinChangeOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventListOK:
                        this.ProcessReceivedMessage_CG_RequestEventListOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestCheatEnterOK:
                        this.ProcessReceivedMessage_CG_RequestCheatEnterOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestCheatStageClearOK:
                        this.ProcessReceivedMessage_CG_RequestCheatStageClearOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestDllGetItemOK:
                        this.ProcessReceivedMessage_CG_RequestDllGetItemOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestRecommendFriendUSNListOK:
                        this.ProcessReceivedMessage_CG_RequestRecommendFriendUSNListOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestDailyResetOK:
                        this.ProcessReceivedMessage_CG_RequestDailyResetOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_NotifyMaintenance:
                        this.ProcessReceivedMessage_CG_NotifyMaintenance(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestFrozenAssetRedeemOK:
                        this.ProcessReceivedMessage_CG_RequestFrozenAssetRedeemOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestDataTableReloadOK:
                        this.ProcessReceivedMessage_CG_RequestDataTableReloadOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_NotifyEmergencyNotice:
                        this.ProcessReceivedMessage_CG_NotifyEmergencyNotice(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestRecommendHeroGrowthInfoOK:
                        this.ProcessReceivedMessage_CG_RequestRecommendHeroGrowthInfoOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestServerVersionOK:
                        this.ProcessReceivedMessage_CG_RequestServerVersionOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestSkinOneStepEvolutionOK:
                        this.ProcessReceivedMessage_CG_RequestSkinOneStepEvolutionOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestSecurityTokenOK:
                        this.ProcessReceivedMessage_CG_RequestSecurityTokenOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestNetmarbleAuthOK:
                        this.ProcessReceivedMessage_CG_RequestNetmarbleAuthOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestAuthenticateCreateOK:
                        this.ProcessReceivedMessage_CG_RequestAuthenticateCreateOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEditorUserInfoByNickNameOK:
                        this.ProcessReceivedMessage_CG_RequestEditorUserInfoByNickNameOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestLoginOK:
                        this.ProcessReceivedMessage_CG_RequestLoginOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestLoginInstantlyOK:
                        this.ProcessReceivedMessage_CG_RequestLoginInstantlyOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestForceLogoutOK:
                        this.ProcessReceivedMessage_CG_RequestForceLogoutOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RetryRequestOK:
                        this.ProcessReceivedMessage_CG_RetryRequestOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestAccountWithdrawOK:
                        this.ProcessReceivedMessage_CG_RequestAccountWithdrawOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestAccountWithdrawCancelOK:
                        this.ProcessReceivedMessage_CG_RequestAccountWithdrawCancelOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.GC_NotifyCookie:
                        this.ProcessReceivedMessage_GC_NotifyCookie(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestCookieOK:
                        this.ProcessReceivedMessage_CG_RequestCookieOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestVerifySecurityCertValueOK:
                        this.ProcessReceivedMessage_CG_RequestVerifySecurityCertValueOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.GC_NotifySecurity:
                        this.ProcessReceivedMessage_GC_NotifySecurity(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestBillingInitializeOK:
                        this.ProcessReceivedMessage_CG_RequestBillingInitializeOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestBillingVerifyPUOK:
                        this.ProcessReceivedMessage_CG_RequestBillingVerifyPUOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestBillingRemainTROK:
                        this.ProcessReceivedMessage_CG_RequestBillingRemainTROK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestBillingCouponVerifyOK:
                        this.ProcessReceivedMessage_CG_RequestBillingCouponVerifyOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestBillingCrossPromotionOK:
                        this.ProcessReceivedMessage_CG_RequestBillingCrossPromotionOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestBillingPackageShopOK:
                        this.ProcessReceivedMessage_CG_RequestBillingPackageShopOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestAgeInputOK:
                        this.ProcessReceivedMessage_CG_RequestAgeInputOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_Notify_WolverineOK:
                        this.ProcessReceivedMessage_CG_Notify_WolverineOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestSDKInfoChangeOK:
                        this.ProcessReceivedMessage_CG_RequestSDKInfoChangeOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestPCBillingInitializeOK:
                        this.ProcessReceivedMessage_CG_RequestPCBillingInitializeOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestPCBillingRemainItemsOK:
                        this.ProcessReceivedMessage_CG_RequestPCBillingRemainItemsOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestSkinLevelUpBySkinMaterialOK:
                        this.ProcessReceivedMessage_CG_RequestSkinLevelUpBySkinMaterialOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestSkinResearchOK:
                        this.ProcessReceivedMessage_CG_RequestSkinResearchOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestSkinResearchInitOK:
                        this.ProcessReceivedMessage_CG_RequestSkinResearchInitOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestSkinMaterialGrindOK:
                        this.ProcessReceivedMessage_CG_RequestSkinMaterialGrindOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestSkinAwakenOK:
                        this.ProcessReceivedMessage_CG_RequestSkinAwakenOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestSkinHeadStyleChangeOK:
                        this.ProcessReceivedMessage_CG_RequestSkinHeadStyleChangeOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestSkinEvolutionOK:
                        this.ProcessReceivedMessage_CG_RequestSkinEvolutionOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestSkinSkillLevelUpOK:
                        this.ProcessReceivedMessage_CG_RequestSkinSkillLevelUpOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestSkinGiveFellowshipExpOK:
                        this.ProcessReceivedMessage_CG_RequestSkinGiveFellowshipExpOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestSkinFellowshipLevelUpRewardOK:
                        this.ProcessReceivedMessage_CG_RequestSkinFellowshipLevelUpRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestCostumeEquipOK:
                        this.ProcessReceivedMessage_CG_RequestCostumeEquipOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestCostumeUnEquipOK:
                        this.ProcessReceivedMessage_CG_RequestCostumeUnEquipOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestCostumeUnLockOK:
                        this.ProcessReceivedMessage_CG_RequestCostumeUnLockOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestSkinOverEvolutionOK:
                        this.ProcessReceivedMessage_CG_RequestSkinOverEvolutionOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestSkinMaxAwakenRewardOK:
                        this.ProcessReceivedMessage_CG_RequestSkinMaxAwakenRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestCostumeRegisterOK:
                        this.ProcessReceivedMessage_CG_RequestCostumeRegisterOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestSkinLoveRewardOK:
                        this.ProcessReceivedMessage_CG_RequestSkinLoveRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestCostumeAutoRegisterOK:
                        this.ProcessReceivedMessage_CG_RequestCostumeAutoRegisterOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestStoryCostumeOK:
                        this.ProcessReceivedMessage_CG_RequestStoryCostumeOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestCostumeLevelUpOK:
                        this.ProcessReceivedMessage_CG_RequestCostumeLevelUpOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestSkinMaxAwakenOK:
                        this.ProcessReceivedMessage_CG_RequestSkinMaxAwakenOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestBattlePointRegisterOK:
                        this.ProcessReceivedMessage_CG_RequestBattlePointRegisterOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestSkinTranscendOK:
                        this.ProcessReceivedMessage_CG_RequestSkinTranscendOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestSkinTranscendResetOK:
                        this.ProcessReceivedMessage_CG_RequestSkinTranscendResetOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestCostumeCraftOK:
                        this.ProcessReceivedMessage_CG_RequestCostumeCraftOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestLimitedCostumeCheckOK:
                        this.ProcessReceivedMessage_CG_RequestLimitedCostumeCheckOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestGetExclusiveSkillOK:
                        this.ProcessReceivedMessage_CG_RequestGetExclusiveSkillOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestSkinOverEvolutionStraightOK:
                        this.ProcessReceivedMessage_CG_RequestSkinOverEvolutionStraightOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestSkinLegendEvolutionOK:
                        this.ProcessReceivedMessage_CG_RequestSkinLegendEvolutionOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestCostumeCraftUpgradeOK:
                        this.ProcessReceivedMessage_CG_RequestCostumeCraftUpgradeOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestSkinLevelupBonusOK:
                        this.ProcessReceivedMessage_CG_RequestSkinLevelupBonusOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestSkinExceedOK:
                        this.ProcessReceivedMessage_CG_RequestSkinExceedOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestMailListOK:
                        this.ProcessReceivedMessage_CG_RequestMailListOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestMailConfirmOK:
                        this.ProcessReceivedMessage_CG_RequestMailConfirmOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestMailConfirmAllOK:
                        this.ProcessReceivedMessage_CG_RequestMailConfirmAllOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestMailHistoryListOK:
                        this.ProcessReceivedMessage_CG_RequestMailHistoryListOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestMailRecentlyHistoryListOK:
                        this.ProcessReceivedMessage_CG_RequestMailRecentlyHistoryListOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestFriendMailListOK:
                        this.ProcessReceivedMessage_CG_RequestFriendMailListOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestFriendMailConfirmOK:
                        this.ProcessReceivedMessage_CG_RequestFriendMailConfirmOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestFriendMailConfirmAllOK:
                        this.ProcessReceivedMessage_CG_RequestFriendMailConfirmAllOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestNoticeMailRewardOK:
                        this.ProcessReceivedMessage_CG_RequestNoticeMailRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestPackageMailListOK:
                        this.ProcessReceivedMessage_CG_RequestPackageMailListOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestPackageMailGetOK:
                        this.ProcessReceivedMessage_CG_RequestPackageMailGetOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestPackageMailHistoryListOK:
                        this.ProcessReceivedMessage_CG_RequestPackageMailHistoryListOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestLevelUpPackageRewardOK:
                        this.ProcessReceivedMessage_CG_RequestLevelUpPackageRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestLevelUpPackageRewardAllOK:
                        this.ProcessReceivedMessage_CG_RequestLevelUpPackageRewardAllOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestAttendancePackageRewardOK:
                        this.ProcessReceivedMessage_CG_RequestAttendancePackageRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestAttendancePackageRewardAllOK:
                        this.ProcessReceivedMessage_CG_RequestAttendancePackageRewardAllOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestMailADRewardOK:
                        this.ProcessReceivedMessage_CG_RequestMailADRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestMissionProgressOK:
                        this.ProcessReceivedMessage_CG_RequestMissionProgressOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestMissionClearOK:
                        this.ProcessReceivedMessage_CG_RequestMissionClearOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestMissionEventClearOK:
                        this.ProcessReceivedMessage_CG_RequestMissionEventClearOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestMissionGetAchievePointRewardOK:
                        this.ProcessReceivedMessage_CG_RequestMissionGetAchievePointRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestQuestStartOK:
                        this.ProcessReceivedMessage_CG_RequestQuestStartOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestQuestProgressOK:
                        this.ProcessReceivedMessage_CG_RequestQuestProgressOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestQuestClearOK:
                        this.ProcessReceivedMessage_CG_RequestQuestClearOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestQuestRemoveOK:
                        this.ProcessReceivedMessage_CG_RequestQuestRemoveOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestDirectSelectorRewardOK:
                        this.ProcessReceivedMessage_CG_RequestDirectSelectorRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestQuestChapterClearOK:
                        this.ProcessReceivedMessage_CG_RequestQuestChapterClearOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventQuestClearOK:
                        this.ProcessReceivedMessage_CG_RequestEventQuestClearOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestAnotherQuestClearOK:
                        this.ProcessReceivedMessage_CG_RequestAnotherQuestClearOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestNorthQuestClearOK:
                        this.ProcessReceivedMessage_CG_RequestNorthQuestClearOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestQuestGuideListAllClearRewardOK:
                        this.ProcessReceivedMessage_CG_RequestQuestGuideListAllClearRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestQuestGuideListStepStartOK:
                        this.ProcessReceivedMessage_CG_RequestQuestGuideListStepStartOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestQuestGuideListStepClearOK:
                        this.ProcessReceivedMessage_CG_RequestQuestGuideListStepClearOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestDisasterQuestClearOK:
                        this.ProcessReceivedMessage_CG_RequestDisasterQuestClearOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestLobbyVRSearchOK:
                        this.ProcessReceivedMessage_CG_RequestLobbyVRSearchOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestLobbyVRHelbramOK:
                        this.ProcessReceivedMessage_CG_RequestLobbyVRHelbramOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestLobbyNpcSkinOK:
                        this.ProcessReceivedMessage_CG_RequestLobbyNpcSkinOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestLobbyNpcGiftOK:
                        this.ProcessReceivedMessage_CG_RequestLobbyNpcGiftOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestLobbyKingAmberOK:
                        this.ProcessReceivedMessage_CG_RequestLobbyKingAmberOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestLobbyDropInteractiveOpenOK:
                        this.ProcessReceivedMessage_CG_RequestLobbyDropInteractiveOpenOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestLobbyUniqueInteractiveOpenOK:
                        this.ProcessReceivedMessage_CG_RequestLobbyUniqueInteractiveOpenOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestLobbyNpcTalkInfoOK:
                        this.ProcessReceivedMessage_CG_RequestLobbyNpcTalkInfoOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestLobbyNpcTalkChoiceOK:
                        this.ProcessReceivedMessage_CG_RequestLobbyNpcTalkChoiceOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestLobbyBarrelOK:
                        this.ProcessReceivedMessage_CG_RequestLobbyBarrelOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestLobbyBarrelRefillOK:
                        this.ProcessReceivedMessage_CG_RequestLobbyBarrelRefillOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestLobbyCleanTableOK:
                        this.ProcessReceivedMessage_CG_RequestLobbyCleanTableOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestLobbyServeBeerOK:
                        this.ProcessReceivedMessage_CG_RequestLobbyServeBeerOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestLobbyPlayJukeboxOK:
                        this.ProcessReceivedMessage_CG_RequestLobbyPlayJukeboxOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestLobbyElizabethTouchOK:
                        this.ProcessReceivedMessage_CG_RequestLobbyElizabethTouchOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestLobbyHawkAngerOK:
                        this.ProcessReceivedMessage_CG_RequestLobbyHawkAngerOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestAttendanceRewardOK:
                        this.ProcessReceivedMessage_CG_RequestAttendanceRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestAttendanceEventRewardOK:
                        this.ProcessReceivedMessage_CG_RequestAttendanceEventRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestCookingStartOK:
                        this.ProcessReceivedMessage_CG_RequestCookingStartOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestRecipeActiveOK:
                        this.ProcessReceivedMessage_CG_RequestRecipeActiveOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestCookingRecipeOrderInfoOK:
                        this.ProcessReceivedMessage_CG_RequestCookingRecipeOrderInfoOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestCookingRecipeOrderOK:
                        this.ProcessReceivedMessage_CG_RequestCookingRecipeOrderOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestCookingRecipeDisorderOK:
                        this.ProcessReceivedMessage_CG_RequestCookingRecipeDisorderOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestCookingRecipeCollectOK:
                        this.ProcessReceivedMessage_CG_RequestCookingRecipeCollectOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestCookingRecipeCollectOneSlotOK:
                        this.ProcessReceivedMessage_CG_RequestCookingRecipeCollectOneSlotOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestCookingUseCookingBuffOK:
                        this.ProcessReceivedMessage_CG_RequestCookingUseCookingBuffOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestGuestInfoOK:
                        this.ProcessReceivedMessage_CG_RequestGuestInfoOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestGuestChangeOK:
                        this.ProcessReceivedMessage_CG_RequestGuestChangeOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestGuestChangeTargetOK:
                        this.ProcessReceivedMessage_CG_RequestGuestChangeTargetOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestGuestTalkOK:
                        this.ProcessReceivedMessage_CG_RequestGuestTalkOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestGuestGiftOK:
                        this.ProcessReceivedMessage_CG_RequestGuestGiftOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestBirthdayNpcInfoOK:
                        this.ProcessReceivedMessage_CG_RequestBirthdayNpcInfoOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestRestRewardOK:
                        this.ProcessReceivedMessage_CG_RequestRestRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestAttendanceFortuneEventRewardOK:
                        this.ProcessReceivedMessage_CG_RequestAttendanceFortuneEventRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventCookingStartOK:
                        this.ProcessReceivedMessage_CG_RequestEventCookingStartOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventRecipeActiveOK:
                        this.ProcessReceivedMessage_CG_RequestEventRecipeActiveOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestLobbySetVisualTypeOK:
                        this.ProcessReceivedMessage_CG_RequestLobbySetVisualTypeOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestLobbySetAttendanceHeroOK:
                        this.ProcessReceivedMessage_CG_RequestLobbySetAttendanceHeroOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestBasePointGoldDonationOK:
                        this.ProcessReceivedMessage_CG_RequestBasePointGoldDonationOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestBasePointSetTriggerOK:
                        this.ProcessReceivedMessage_CG_RequestBasePointSetTriggerOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestBasePointDropInteractiveOpenOK:
                        this.ProcessReceivedMessage_CG_RequestBasePointDropInteractiveOpenOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestBasePointUniqueInteractiveOpenOK:
                        this.ProcessReceivedMessage_CG_RequestBasePointUniqueInteractiveOpenOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestBasePointDailyRewardOK:
                        this.ProcessReceivedMessage_CG_RequestBasePointDailyRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestBasePointDonationEventRewardOK:
                        this.ProcessReceivedMessage_CG_RequestBasePointDonationEventRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestBasePointDonationInfoOK:
                        this.ProcessReceivedMessage_CG_RequestBasePointDonationInfoOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestBasePointEventGoldDonationOK:
                        this.ProcessReceivedMessage_CG_RequestBasePointEventGoldDonationOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventBasepointInfoOK:
                        this.ProcessReceivedMessage_CG_RequestEventBasepointInfoOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.GC_NotifyDestroyInvite:
                        this.ProcessReceivedMessage_GC_NotifyDestroyInvite(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestDestroySetInviteOptionOK:
                        this.ProcessReceivedMessage_CG_RequestDestroySetInviteOptionOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestDestroyGetUserLoginListOK:
                        this.ProcessReceivedMessage_CG_RequestDestroyGetUserLoginListOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestDestroyGetFriendLoginListOK:
                        this.ProcessReceivedMessage_CG_RequestDestroyGetFriendLoginListOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestDestroyGetGuildLoginListOK:
                        this.ProcessReceivedMessage_CG_RequestDestroyGetGuildLoginListOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestDestroyGetReceivedInvitationListOK:
                        this.ProcessReceivedMessage_CG_RequestDestroyGetReceivedInvitationListOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestDestroyInviteOK:
                        this.ProcessReceivedMessage_CG_RequestDestroyInviteOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestDestroyRemoveInvitationOK:
                        this.ProcessReceivedMessage_CG_RequestDestroyRemoveInvitationOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestDestroyRemoveJoinInfoOK:
                        this.ProcessReceivedMessage_CG_RequestDestroyRemoveJoinInfoOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestDestroyCreateOK:
                        this.ProcessReceivedMessage_CG_RequestDestroyCreateOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestDestroyStartOK:
                        this.ProcessReceivedMessage_CG_RequestDestroyStartOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestDestroyBattleStartOK:
                        this.ProcessReceivedMessage_CG_RequestDestroyBattleStartOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestDestroyJoinOK:
                        this.ProcessReceivedMessage_CG_RequestDestroyJoinOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestDestroyClearOK:
                        this.ProcessReceivedMessage_CG_RequestDestroyClearOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestDestroyReJoinOK:
                        this.ProcessReceivedMessage_CG_RequestDestroyReJoinOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestDestroyRemoveOK:
                        this.ProcessReceivedMessage_CG_RequestDestroyRemoveOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestDestroyBattleEndOK:
                        this.ProcessReceivedMessage_CG_RequestDestroyBattleEndOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestDestroyInviteAIOK:
                        this.ProcessReceivedMessage_CG_RequestDestroyInviteAIOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestDestroyKickOutAIOK:
                        this.ProcessReceivedMessage_CG_RequestDestroyKickOutAIOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventDestroyCreateOK:
                        this.ProcessReceivedMessage_CG_RequestEventDestroyCreateOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventDestroyClearOK:
                        this.ProcessReceivedMessage_CG_RequestEventDestroyClearOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventDestroyStartOK:
                        this.ProcessReceivedMessage_CG_RequestEventDestroyStartOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventDestroyRemoveOK:
                        this.ProcessReceivedMessage_CG_RequestEventDestroyRemoveOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventChallengeDestroyCreateOK:
                        this.ProcessReceivedMessage_CG_RequestEventChallengeDestroyCreateOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventChallengeDestroyStartOK:
                        this.ProcessReceivedMessage_CG_RequestEventChallengeDestroyStartOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventChallengeDestroyClearOK:
                        this.ProcessReceivedMessage_CG_RequestEventChallengeDestroyClearOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventChallengeDestroyPointRefreshOK:
                        this.ProcessReceivedMessage_CG_RequestEventChallengeDestroyPointRefreshOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventChallengeDestroyUserRewardOK:
                        this.ProcessReceivedMessage_CG_RequestEventChallengeDestroyUserRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventChallengeDestroyWorldRewardOK:
                        this.ProcessReceivedMessage_CG_RequestEventChallengeDestroyWorldRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestDisasterDestroyCreateOK:
                        this.ProcessReceivedMessage_CG_RequestDisasterDestroyCreateOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestDisasterDestroyStartOK:
                        this.ProcessReceivedMessage_CG_RequestDisasterDestroyStartOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestDisasterDestroyClearOK:
                        this.ProcessReceivedMessage_CG_RequestDisasterDestroyClearOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventDisasterDestroyCreateOK:
                        this.ProcessReceivedMessage_CG_RequestEventDisasterDestroyCreateOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventDisasterDestroyStartOK:
                        this.ProcessReceivedMessage_CG_RequestEventDisasterDestroyStartOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventDisasterDestroyClearOK:
                        this.ProcessReceivedMessage_CG_RequestEventDisasterDestroyClearOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventDisasterDestroyLeaveOK:
                        this.ProcessReceivedMessage_CG_RequestEventDisasterDestroyLeaveOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestDestroyOtherPlayerTeamInfoOK:
                        this.ProcessReceivedMessage_CG_RequestDestroyOtherPlayerTeamInfoOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestDestroyLiveJoinRegisterOK:
                        this.ProcessReceivedMessage_CG_RequestDestroyLiveJoinRegisterOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestDestroyLiveJoinUnregisterOK:
                        this.ProcessReceivedMessage_CG_RequestDestroyLiveJoinUnregisterOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestDestroyLiveJoinListOK:
                        this.ProcessReceivedMessage_CG_RequestDestroyLiveJoinListOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestDestroyLiveJoinInviteOK:
                        this.ProcessReceivedMessage_CG_RequestDestroyLiveJoinInviteOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestDestroyLiveJoinAbortInvitationOK:
                        this.ProcessReceivedMessage_CG_RequestDestroyLiveJoinAbortInvitationOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestDestroyLiveJoinRejectInvitationOK:
                        this.ProcessReceivedMessage_CG_RequestDestroyLiveJoinRejectInvitationOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.GC_NotifyDestroyLiveJoinInvite:
                        this.ProcessReceivedMessage_GC_NotifyDestroyLiveJoinInvite(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.GC_NotifyDestroyLiveJoinAbortInvitation:
                        this.ProcessReceivedMessage_GC_NotifyDestroyLiveJoinAbortInvitation(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.GC_NotifyDestroyLiveJoinRejectInvitation:
                        this.ProcessReceivedMessage_GC_NotifyDestroyLiveJoinRejectInvitation(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestDestroyRoomInfoOK:
                        this.ProcessReceivedMessage_CG_RequestDestroyRoomInfoOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestFriendListOK:
                        this.ProcessReceivedMessage_CG_RequestFriendListOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestFriendGuildInfoOK:
                        this.ProcessReceivedMessage_CG_RequestFriendGuildInfoOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestFriendApplySendListOK:
                        this.ProcessReceivedMessage_CG_RequestFriendApplySendListOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestFriendApplyReceiveListOK:
                        this.ProcessReceivedMessage_CG_RequestFriendApplyReceiveListOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestFriendApplySendOK:
                        this.ProcessReceivedMessage_CG_RequestFriendApplySendOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestFriendApplyRejectOK:
                        this.ProcessReceivedMessage_CG_RequestFriendApplyRejectOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestFriendApplyReceiveAcceptOK:
                        this.ProcessReceivedMessage_CG_RequestFriendApplyReceiveAcceptOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestFriendApplyReceiveAcceptListOK:
                        this.ProcessReceivedMessage_CG_RequestFriendApplyReceiveAcceptListOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestFriendApplyReceiveRefuseOK:
                        this.ProcessReceivedMessage_CG_RequestFriendApplyReceiveRefuseOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestFriendApplyReceiveRefuseListOK:
                        this.ProcessReceivedMessage_CG_RequestFriendApplyReceiveRefuseListOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestFriendRemoveOK:
                        this.ProcessReceivedMessage_CG_RequestFriendRemoveOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestFriendSearchOK:
                        this.ProcessReceivedMessage_CG_RequestFriendSearchOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestFriendVisitOK:
                        this.ProcessReceivedMessage_CG_RequestFriendVisitOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestFriendPointSendOK:
                        this.ProcessReceivedMessage_CG_RequestFriendPointSendOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestFriendPointSendAllOK:
                        this.ProcessReceivedMessage_CG_RequestFriendPointSendAllOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestFriendLobbyInfoOK:
                        this.ProcessReceivedMessage_CG_RequestFriendLobbyInfoOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestFriendCookingRecipeInfoOK:
                        this.ProcessReceivedMessage_CG_RequestFriendCookingRecipeInfoOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestFriendCookingEatOK:
                        this.ProcessReceivedMessage_CG_RequestFriendCookingEatOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestFriendCookingEatFriendListOK:
                        this.ProcessReceivedMessage_CG_RequestFriendCookingEatFriendListOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestRefreshRecommendFriendListOK:
                        this.ProcessReceivedMessage_CG_RequestRefreshRecommendFriendListOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestAPRechargeByUseItemOK:
                        this.ProcessReceivedMessage_CG_RequestAPRechargeByUseItemOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestFoodBuffAutoUseOnOffOK:
                        this.ProcessReceivedMessage_CG_RequestFoodBuffAutoUseOnOffOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestItemUseRankExpOK:
                        this.ProcessReceivedMessage_CG_RequestItemUseRankExpOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestItemUseBoxOpenOK:
                        this.ProcessReceivedMessage_CG_RequestItemUseBoxOpenOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestItemUseRecipeExpOK:
                        this.ProcessReceivedMessage_CG_RequestItemUseRecipeExpOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestItemUseWeeklyKeyBoxOK:
                        this.ProcessReceivedMessage_CG_RequestItemUseWeeklyKeyBoxOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestItemUseWeaponTicketOK:
                        this.ProcessReceivedMessage_CG_RequestItemUseWeaponTicketOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestItemUseMusicOK:
                        this.ProcessReceivedMessage_CG_RequestItemUseMusicOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestItemUseBuffOK:
                        this.ProcessReceivedMessage_CG_RequestItemUseBuffOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestTutorialAddStepOK:
                        this.ProcessReceivedMessage_CG_RequestTutorialAddStepOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestTutorialSetFlagOK:
                        this.ProcessReceivedMessage_CG_RequestTutorialSetFlagOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestTutorialHeroFlagOK:
                        this.ProcessReceivedMessage_CG_RequestTutorialHeroFlagOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestTutorialGambleShopBuyOK:
                        this.ProcessReceivedMessage_CG_RequestTutorialGambleShopBuyOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestBattleTutorialInfoOK:
                        this.ProcessReceivedMessage_CG_RequestBattleTutorialInfoOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestBattleTutorialSetOK:
                        this.ProcessReceivedMessage_CG_RequestBattleTutorialSetOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestFriendlyMatchCreateOK:
                        this.ProcessReceivedMessage_CG_RequestFriendlyMatchCreateOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestFriendlyMatchFriendListOK:
                        this.ProcessReceivedMessage_CG_RequestFriendlyMatchFriendListOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestFriendlyMatchInviteOK:
                        this.ProcessReceivedMessage_CG_RequestFriendlyMatchInviteOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestFriendlyMatchReceivedInviteListOK:
                        this.ProcessReceivedMessage_CG_RequestFriendlyMatchReceivedInviteListOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestFriendlyMatchInviteAcceptOK:
                        this.ProcessReceivedMessage_CG_RequestFriendlyMatchInviteAcceptOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestFriendlyMatchInviteRejectOK:
                        this.ProcessReceivedMessage_CG_RequestFriendlyMatchInviteRejectOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestFriendlyMatchStartOK:
                        this.ProcessReceivedMessage_CG_RequestFriendlyMatchStartOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestFriendlyMatchBattleStartOK:
                        this.ProcessReceivedMessage_CG_RequestFriendlyMatchBattleStartOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestFriendlyMatchClearOK:
                        this.ProcessReceivedMessage_CG_RequestFriendlyMatchClearOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestFriendlyMatchExitOK:
                        this.ProcessReceivedMessage_CG_RequestFriendlyMatchExitOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.GC_NotifyFriendlyMatchInvite:
                        this.ProcessReceivedMessage_GC_NotifyFriendlyMatchInvite(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestFriendlyMatchSetInviteOptionOK:
                        this.ProcessReceivedMessage_CG_RequestFriendlyMatchSetInviteOptionOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventMissionGetAchievePointRewardOK:
                        this.ProcessReceivedMessage_CG_RequestEventMissionGetAchievePointRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventMissionCompleteRewardOK:
                        this.ProcessReceivedMessage_CG_RequestEventMissionCompleteRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventMissionInfoOK:
                        this.ProcessReceivedMessage_CG_RequestEventMissionInfoOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestLobbyFurnitureRegistOK:
                        this.ProcessReceivedMessage_CG_RequestLobbyFurnitureRegistOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestUserMusicEditOK:
                        this.ProcessReceivedMessage_CG_RequestUserMusicEditOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventSeasonPassInfoOK:
                        this.ProcessReceivedMessage_CG_RequestEventSeasonPassInfoOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventSeasonPassRankUpRewardOK:
                        this.ProcessReceivedMessage_CG_RequestEventSeasonPassRankUpRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventSeasonPassRankUpRewardAllOK:
                        this.ProcessReceivedMessage_CG_RequestEventSeasonPassRankUpRewardAllOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventSeasonPassRankBuyOK:
                        this.ProcessReceivedMessage_CG_RequestEventSeasonPassRankBuyOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventExchangeOK:
                        this.ProcessReceivedMessage_CG_RequestEventExchangeOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventPlayCountRewardOK:
                        this.ProcessReceivedMessage_CG_RequestEventPlayCountRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestWestSideServerInfo_RandomOK:
                        this.ProcessReceivedMessage_CG_RequestWestSideServerInfo_RandomOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestWestSideServerInfo_FixedOK:
                        this.ProcessReceivedMessage_CG_RequestWestSideServerInfo_FixedOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestWestSideServerInfo_RecommandOK:
                        this.ProcessReceivedMessage_CG_RequestWestSideServerInfo_RecommandOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestWestSide_PlayerInfoOK:
                        this.ProcessReceivedMessage_CG_RequestWestSide_PlayerInfoOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestWestSide_PlayerteamInfoOK:
                        this.ProcessReceivedMessage_CG_RequestWestSide_PlayerteamInfoOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestWestSide_PlayerGuildInfoOK:
                        this.ProcessReceivedMessage_CG_RequestWestSide_PlayerGuildInfoOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestWorldChattingChannelOK:
                        this.ProcessReceivedMessage_CG_RequestWorldChattingChannelOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestWestSideServerInfo_RandomNotify:
                        this.ProcessReceivedMessage_CG_RequestWestSideServerInfo_RandomNotify(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestWestSideServerInfo_FixedNotify:
                        this.ProcessReceivedMessage_CG_RequestWestSideServerInfo_FixedNotify(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventExchangeInfoOK:
                        this.ProcessReceivedMessage_CG_RequestEventExchangeInfoOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventExchangeBoxGachaInfoOK:
                        this.ProcessReceivedMessage_CG_RequestEventExchangeBoxGachaInfoOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventExchangeBoxGachaPickupOK:
                        this.ProcessReceivedMessage_CG_RequestEventExchangeBoxGachaPickupOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventExchangeBoxGachaResetOK:
                        this.ProcessReceivedMessage_CG_RequestEventExchangeBoxGachaResetOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventPaybackRewardOK:
                        this.ProcessReceivedMessage_CG_RequestEventPaybackRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventSnsShareProgressOK:
                        this.ProcessReceivedMessage_CG_RequestEventSnsShareProgressOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventSnsShareRewardOK:
                        this.ProcessReceivedMessage_CG_RequestEventSnsShareRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestGagueEventInfoOK:
                        this.ProcessReceivedMessage_CG_RequestGagueEventInfoOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestGagueEventChargeOK:
                        this.ProcessReceivedMessage_CG_RequestGagueEventChargeOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestGagueEventRewardOK:
                        this.ProcessReceivedMessage_CG_RequestGagueEventRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestGagueEventResetOK:
                        this.ProcessReceivedMessage_CG_RequestGagueEventResetOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventLadderRewardOK:
                        this.ProcessReceivedMessage_CG_RequestEventLadderRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventLobbyGiftRewardOK:
                        this.ProcessReceivedMessage_CG_RequestEventLobbyGiftRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventTimeMissionInfoOK:
                        this.ProcessReceivedMessage_CG_RequestEventTimeMissionInfoOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventTimeMissionStartOK:
                        this.ProcessReceivedMessage_CG_RequestEventTimeMissionStartOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventLobbyDecorationRewardOK:
                        this.ProcessReceivedMessage_CG_RequestEventLobbyDecorationRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventPvpWinCountRewardOK:
                        this.ProcessReceivedMessage_CG_RequestEventPvpWinCountRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventChapterClearRewardOK:
                        this.ProcessReceivedMessage_CG_RequestEventChapterClearRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestRegistPlayTitleOK:
                        this.ProcessReceivedMessage_CG_RequestRegistPlayTitleOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestPlayTitleMissionRewardOK:
                        this.ProcessReceivedMessage_CG_RequestPlayTitleMissionRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestPlayTitleInfoOK:
                        this.ProcessReceivedMessage_CG_RequestPlayTitleInfoOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventBingoInfoOK:
                        this.ProcessReceivedMessage_CG_RequestEventBingoInfoOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventBingoRandomNumberOK:
                        this.ProcessReceivedMessage_CG_RequestEventBingoRandomNumberOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventBingoExchangeNumberOK:
                        this.ProcessReceivedMessage_CG_RequestEventBingoExchangeNumberOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventBingoResetOK:
                        this.ProcessReceivedMessage_CG_RequestEventBingoResetOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestSubdueCreateOK:
                        this.ProcessReceivedMessage_CG_RequestSubdueCreateOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestSubdueJoinOK:
                        this.ProcessReceivedMessage_CG_RequestSubdueJoinOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestSubdueOwnerGameStartOK:
                        this.ProcessReceivedMessage_CG_RequestSubdueOwnerGameStartOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestSubdueLoadingCompleteOK:
                        this.ProcessReceivedMessage_CG_RequestSubdueLoadingCompleteOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestSubdueOnlineFriendListOK:
                        this.ProcessReceivedMessage_CG_RequestSubdueOnlineFriendListOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestSubdueOnlineGuildMemberListOK:
                        this.ProcessReceivedMessage_CG_RequestSubdueOnlineGuildMemberListOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestSubdueOnlineUserRankRangeListOK:
                        this.ProcessReceivedMessage_CG_RequestSubdueOnlineUserRankRangeListOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestSubdueInvitationReceiveListOK:
                        this.ProcessReceivedMessage_CG_RequestSubdueInvitationReceiveListOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestSubdueRemoveInvitationOK:
                        this.ProcessReceivedMessage_CG_RequestSubdueRemoveInvitationOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestSubdueInviteOK:
                        this.ProcessReceivedMessage_CG_RequestSubdueInviteOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestSubdueRewardOK:
                        this.ProcessReceivedMessage_CG_RequestSubdueRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_NotifySubdueInviteOK:
                        this.ProcessReceivedMessage_CG_NotifySubdueInviteOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestPatrolMissionInfoOK:
                        this.ProcessReceivedMessage_CG_RequestPatrolMissionInfoOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestPatrolMissionStartOK:
                        this.ProcessReceivedMessage_CG_RequestPatrolMissionStartOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestPatrolMissionCancelOK:
                        this.ProcessReceivedMessage_CG_RequestPatrolMissionCancelOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestPatrolMissionRewardOK:
                        this.ProcessReceivedMessage_CG_RequestPatrolMissionRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestPatrolMissionTimeRewardOK:
                        this.ProcessReceivedMessage_CG_RequestPatrolMissionTimeRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventExchangeCardInfoOK:
                        this.ProcessReceivedMessage_CG_RequestEventExchangeCardInfoOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventExchangeCardSetupOK:
                        this.ProcessReceivedMessage_CG_RequestEventExchangeCardSetupOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventExchangeCardChoiceManualOK:
                        this.ProcessReceivedMessage_CG_RequestEventExchangeCardChoiceManualOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventExchangeCardChoiceAutoOK:
                        this.ProcessReceivedMessage_CG_RequestEventExchangeCardChoiceAutoOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventExchangeCardResetOK:
                        this.ProcessReceivedMessage_CG_RequestEventExchangeCardResetOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventCraftExchangeOK:
                        this.ProcessReceivedMessage_CG_RequestEventCraftExchangeOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventProvisionProvideOK:
                        this.ProcessReceivedMessage_CG_RequestEventProvisionProvideOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventProvisionGetFinalRewardOK:
                        this.ProcessReceivedMessage_CG_RequestEventProvisionGetFinalRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventExchangeKingAmberOK:
                        this.ProcessReceivedMessage_CG_RequestEventExchangeKingAmberOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventTreasureHuntInfoOK:
                        this.ProcessReceivedMessage_CG_RequestEventTreasureHuntInfoOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventTreasureHuntStartOK:
                        this.ProcessReceivedMessage_CG_RequestEventTreasureHuntStartOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventTreasureHuntMoveDiceOK:
                        this.ProcessReceivedMessage_CG_RequestEventTreasureHuntMoveDiceOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventTreasureHuntMoveChoosePointOK:
                        this.ProcessReceivedMessage_CG_RequestEventTreasureHuntMoveChoosePointOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventTreasureHuntChooseRewardOK:
                        this.ProcessReceivedMessage_CG_RequestEventTreasureHuntChooseRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventTreasureHuntCompleteOK:
                        this.ProcessReceivedMessage_CG_RequestEventTreasureHuntCompleteOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventTreasureHuntCompleteRewardOK:
                        this.ProcessReceivedMessage_CG_RequestEventTreasureHuntCompleteRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventTreasureHuntMissionOK:
                        this.ProcessReceivedMessage_CG_RequestEventTreasureHuntMissionOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestNMFunTalkKitLoginOK:
                        this.ProcessReceivedMessage_CG_RequestNMFunTalkKitLoginOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestNMFunTalkKitCreateRoomOK:
                        this.ProcessReceivedMessage_CG_RequestNMFunTalkKitCreateRoomOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestNMFunTalkKitPasswordOK:
                        this.ProcessReceivedMessage_CG_RequestNMFunTalkKitPasswordOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.GC_NotifyNMFunTalkKitGuildRoomJoin:
                        this.ProcessReceivedMessage_GC_NotifyNMFunTalkKitGuildRoomJoin(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.GC_NotifyNMFunTalkKitGuildRoomLeave:
                        this.ProcessReceivedMessage_GC_NotifyNMFunTalkKitGuildRoomLeave(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.GC_NotifyChatInfo:
                        this.ProcessReceivedMessage_GC_NotifyChatInfo(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventGamblePaybackRewardOK:
                        this.ProcessReceivedMessage_CG_RequestEventGamblePaybackRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventRandomBoxInfoOK:
                        this.ProcessReceivedMessage_CG_RequestEventRandomBoxInfoOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventRandomBoxCreateOK:
                        this.ProcessReceivedMessage_CG_RequestEventRandomBoxCreateOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventRandomBoxRewardOK:
                        this.ProcessReceivedMessage_CG_RequestEventRandomBoxRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestSeasonpassShopInfoOK:
                        this.ProcessReceivedMessage_CG_RequestSeasonpassShopInfoOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestSeasonpassShopBuyOK:
                        this.ProcessReceivedMessage_CG_RequestSeasonpassShopBuyOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_Request_EventPredict_User_InfoOK:
                        this.ProcessReceivedMessage_CG_Request_EventPredict_User_InfoOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_Request_EventPredict_StartOK:
                        this.ProcessReceivedMessage_CG_Request_EventPredict_StartOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_Request_EventPredict_Special_RewardOK:
                        this.ProcessReceivedMessage_CG_Request_EventPredict_Special_RewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_Request_EventAuto_OnOK:
                        this.ProcessReceivedMessage_CG_Request_EventAuto_OnOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_Request_EventAuto_ResultOK:
                        this.ProcessReceivedMessage_CG_Request_EventAuto_ResultOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_Request_EventAuto_Battle_EndOK:
                        this.ProcessReceivedMessage_CG_Request_EventAuto_Battle_EndOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_Request_EventAuto_HawkUpgradeOK:
                        this.ProcessReceivedMessage_CG_Request_EventAuto_HawkUpgradeOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_Request_EventAuto_RewardOK:
                        this.ProcessReceivedMessage_CG_Request_EventAuto_RewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_Request_EventAuto_Box_Slot_UpgradeOK:
                        this.ProcessReceivedMessage_CG_Request_EventAuto_Box_Slot_UpgradeOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_Request_EventAuto_SpecialRewardOK:
                        this.ProcessReceivedMessage_CG_Request_EventAuto_SpecialRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestArtifactCardPackOpenOK:
                        this.ProcessReceivedMessage_CG_RequestArtifactCardPackOpenOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestArtifactUnionUpgradeOK:
                        this.ProcessReceivedMessage_CG_RequestArtifactUnionUpgradeOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestArtifactTeamChangeOK:
                        this.ProcessReceivedMessage_CG_RequestArtifactTeamChangeOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestArtifactDescentBossTeamChangeOK:
                        this.ProcessReceivedMessage_CG_RequestArtifactDescentBossTeamChangeOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestArtifactTeamInfoAllOK:
                        this.ProcessReceivedMessage_CG_RequestArtifactTeamInfoAllOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventArtifactWishSaveOK:
                        this.ProcessReceivedMessage_CG_RequestEventArtifactWishSaveOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventArtifactWishCardPackOpenOK:
                        this.ProcessReceivedMessage_CG_RequestEventArtifactWishCardPackOpenOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestArtifactDemonLordTeamChangeOK:
                        this.ProcessReceivedMessage_CG_RequestArtifactDemonLordTeamChangeOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestNorthGrimBookRewardOK:
                        this.ProcessReceivedMessage_CG_RequestNorthGrimBookRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventCheerGroupOK:
                        this.ProcessReceivedMessage_CG_RequestEventCheerGroupOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventCheerGaugeRewardOK:
                        this.ProcessReceivedMessage_CG_RequestEventCheerGaugeRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventCheerFinishRewardOK:
                        this.ProcessReceivedMessage_CG_RequestEventCheerFinishRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventDiceInfoOK:
                        this.ProcessReceivedMessage_CG_RequestEventDiceInfoOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventDiceRollOK:
                        this.ProcessReceivedMessage_CG_RequestEventDiceRollOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventDiceRollEventHandleOK:
                        this.ProcessReceivedMessage_CG_RequestEventDiceRollEventHandleOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventDiceRaceRewardOK:
                        this.ProcessReceivedMessage_CG_RequestEventDiceRaceRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestConstellationStoneOpenOK:
                        this.ProcessReceivedMessage_CG_RequestConstellationStoneOpenOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestConstellationStoneOptionValueChangeOK:
                        this.ProcessReceivedMessage_CG_RequestConstellationStoneOptionValueChangeOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestConstellationStoneOptionValueChangeApplyOK:
                        this.ProcessReceivedMessage_CG_RequestConstellationStoneOptionValueChangeApplyOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestMaterialFusionOK:
                        this.ProcessReceivedMessage_CG_RequestMaterialFusionOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventSkinOneStepEvolutionOK:
                        this.ProcessReceivedMessage_CG_RequestEventSkinOneStepEvolutionOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventPuzzleInfoOK:
                        this.ProcessReceivedMessage_CG_RequestEventPuzzleInfoOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventPuzzleInfoStartOK:
                        this.ProcessReceivedMessage_CG_RequestEventPuzzleInfoStartOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventPuzzleInfoEndOK:
                        this.ProcessReceivedMessage_CG_RequestEventPuzzleInfoEndOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventPuzzleInfoBlockRewardOK:
                        this.ProcessReceivedMessage_CG_RequestEventPuzzleInfoBlockRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventPuzzleInfoTotalRewardOK:
                        this.ProcessReceivedMessage_CG_RequestEventPuzzleInfoTotalRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestRandomLuckybagInfoOK:
                        this.ProcessReceivedMessage_CG_RequestRandomLuckybagInfoOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestRandomLuckybagOpenOK:
                        this.ProcessReceivedMessage_CG_RequestRandomLuckybagOpenOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestRandomLuckybagLastRewardOK:
                        this.ProcessReceivedMessage_CG_RequestRandomLuckybagLastRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventStepupMissionStartOK:
                        this.ProcessReceivedMessage_CG_RequestEventStepupMissionStartOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventStepupMissionGroupClearOK:
                        this.ProcessReceivedMessage_CG_RequestEventStepupMissionGroupClearOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestFriendlyMatchObserveCreateOK:
                        this.ProcessReceivedMessage_CG_RequestFriendlyMatchObserveCreateOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestFriendlyMatchObserveFriendListOK:
                        this.ProcessReceivedMessage_CG_RequestFriendlyMatchObserveFriendListOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestFriendlyMatchObserveInviteOK:
                        this.ProcessReceivedMessage_CG_RequestFriendlyMatchObserveInviteOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestFriendlyMatchObserveReceivedInviteListOK:
                        this.ProcessReceivedMessage_CG_RequestFriendlyMatchObserveReceivedInviteListOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestFriendlyMatchObserveInviteAcceptOK:
                        this.ProcessReceivedMessage_CG_RequestFriendlyMatchObserveInviteAcceptOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestFriendlyMatchObserveInviteRejectOK:
                        this.ProcessReceivedMessage_CG_RequestFriendlyMatchObserveInviteRejectOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestFriendlyMatchObserveStartOK:
                        this.ProcessReceivedMessage_CG_RequestFriendlyMatchObserveStartOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestFriendlyMatchObserveBattleStartOK:
                        this.ProcessReceivedMessage_CG_RequestFriendlyMatchObserveBattleStartOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestFriendlyMatchObserveClearOK:
                        this.ProcessReceivedMessage_CG_RequestFriendlyMatchObserveClearOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestFriendlyMatchObserveExitOK:
                        this.ProcessReceivedMessage_CG_RequestFriendlyMatchObserveExitOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.GC_NotifyFriendlyMatchObserveInvite:
                        this.ProcessReceivedMessage_GC_NotifyFriendlyMatchObserveInvite(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestFriendlyMatchObserveSetInviteOptionOK:
                        this.ProcessReceivedMessage_CG_RequestFriendlyMatchObserveSetInviteOptionOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventGambleWishSaveOK:
                        this.ProcessReceivedMessage_CG_RequestEventGambleWishSaveOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventMazeInfoOK:
                        this.ProcessReceivedMessage_CG_RequestEventMazeInfoOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventMazeStartOK:
                        this.ProcessReceivedMessage_CG_RequestEventMazeStartOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventMazeSelectStartHeroesOK:
                        this.ProcessReceivedMessage_CG_RequestEventMazeSelectStartHeroesOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventMazeInitializeOK:
                        this.ProcessReceivedMessage_CG_RequestEventMazeInitializeOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventMazeMoveOK:
                        this.ProcessReceivedMessage_CG_RequestEventMazeMoveOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventMazePassiveSelectOK:
                        this.ProcessReceivedMessage_CG_RequestEventMazePassiveSelectOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventMazeSeasonRewardOK:
                        this.ProcessReceivedMessage_CG_RequestEventMazeSeasonRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventMazeChangeSlotOK:
                        this.ProcessReceivedMessage_CG_RequestEventMazeChangeSlotOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventMazeRefreshSelectableHeroesOK:
                        this.ProcessReceivedMessage_CG_RequestEventMazeRefreshSelectableHeroesOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventMazeShopBuyOK:
                        this.ProcessReceivedMessage_CG_RequestEventMazeShopBuyOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventMazeShopBuffBuyOK:
                        this.ProcessReceivedMessage_CG_RequestEventMazeShopBuffBuyOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventMoleGameInfoOK:
                        this.ProcessReceivedMessage_CG_RequestEventMoleGameInfoOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventMoleGameStartOK:
                        this.ProcessReceivedMessage_CG_RequestEventMoleGameStartOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventMoleGameEndOK:
                        this.ProcessReceivedMessage_CG_RequestEventMoleGameEndOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventMoleGameRecordRewardOK:
                        this.ProcessReceivedMessage_CG_RequestEventMoleGameRecordRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventMoleGameTotalRewardOK:
                        this.ProcessReceivedMessage_CG_RequestEventMoleGameTotalRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventMoleGameRankInfoOK:
                        this.ProcessReceivedMessage_CG_RequestEventMoleGameRankInfoOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventLobbyBuffInfoOK:
                        this.ProcessReceivedMessage_CG_RequestEventLobbyBuffInfoOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventLobbyBuffBuyOK:
                        this.ProcessReceivedMessage_CG_RequestEventLobbyBuffBuyOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.GC_NotifyEventLobbyBuffInfo:
                        this.ProcessReceivedMessage_GC_NotifyEventLobbyBuffInfo(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventBoxWishInfoOK:
                        this.ProcessReceivedMessage_CG_RequestEventBoxWishInfoOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventBoxWishSetOK:
                        this.ProcessReceivedMessage_CG_RequestEventBoxWishSetOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventBoxWishPickUpOK:
                        this.ProcessReceivedMessage_CG_RequestEventBoxWishPickUpOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventBoxWishResetOK:
                        this.ProcessReceivedMessage_CG_RequestEventBoxWishResetOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestConstellationStoneLockOK:
                        this.ProcessReceivedMessage_CG_RequestConstellationStoneLockOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventConquestInfoOK:
                        this.ProcessReceivedMessage_CG_RequestEventConquestInfoOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventConquestProductionDepotCompleteRewardOK:
                        this.ProcessReceivedMessage_CG_RequestEventConquestProductionDepotCompleteRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventConquestProductionDepotUpgradeOK:
                        this.ProcessReceivedMessage_CG_RequestEventConquestProductionDepotUpgradeOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventConquestProductionDepotUpgradeRewardOK:
                        this.ProcessReceivedMessage_CG_RequestEventConquestProductionDepotUpgradeRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventConquestAreaAttackOK:
                        this.ProcessReceivedMessage_CG_RequestEventConquestAreaAttackOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventConquestAreaFeverAttackOK:
                        this.ProcessReceivedMessage_CG_RequestEventConquestAreaFeverAttackOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventConquestAreaAttackRewardOK:
                        this.ProcessReceivedMessage_CG_RequestEventConquestAreaAttackRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventConquestMakeFeverItemOK:
                        this.ProcessReceivedMessage_CG_RequestEventConquestMakeFeverItemOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventConquestUpdateSceneIndexOK:
                        this.ProcessReceivedMessage_CG_RequestEventConquestUpdateSceneIndexOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventConquestUpdateUnitPosOK:
                        this.ProcessReceivedMessage_CG_RequestEventConquestUpdateUnitPosOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventRoadInfoOK:
                        this.ProcessReceivedMessage_CG_RequestEventRoadInfoOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventRoadWalkOK:
                        this.ProcessReceivedMessage_CG_RequestEventRoadWalkOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventRoadRewardOK:
                        this.ProcessReceivedMessage_CG_RequestEventRoadRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventRoadSelectOK:
                        this.ProcessReceivedMessage_CG_RequestEventRoadSelectOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventGambleBoxInfoOK:
                        this.ProcessReceivedMessage_CG_RequestEventGambleBoxInfoOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventGambleBoxPickupOK:
                        this.ProcessReceivedMessage_CG_RequestEventGambleBoxPickupOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventGambleBoxResetOK:
                        this.ProcessReceivedMessage_CG_RequestEventGambleBoxResetOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventLuckyBoxInfoOK:
                        this.ProcessReceivedMessage_CG_RequestEventLuckyBoxInfoOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventLuckyBoxRewardOK:
                        this.ProcessReceivedMessage_CG_RequestEventLuckyBoxRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventMazeRefreshSelectablePassivesOK:
                        this.ProcessReceivedMessage_CG_RequestEventMazeRefreshSelectablePassivesOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventMazeSaveTeamOK:
                        this.ProcessReceivedMessage_CG_RequestEventMazeSaveTeamOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventMazeSelectClearBonusOK:
                        this.ProcessReceivedMessage_CG_RequestEventMazeSelectClearBonusOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventMazeStartSavedTeamOK:
                        this.ProcessReceivedMessage_CG_RequestEventMazeStartSavedTeamOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestGuildOrderMissioInfoOK:
                        this.ProcessReceivedMessage_CG_RequestGuildOrderMissioInfoOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestGuildOrderMissionClearOK:
                        this.ProcessReceivedMessage_CG_RequestGuildOrderMissionClearOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestGuildOrderMissionMileageBonusRewardOK:
                        this.ProcessReceivedMessage_CG_RequestGuildOrderMissionMileageBonusRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventConfirmGameInfoOK:
                        this.ProcessReceivedMessage_CG_RequestEventConfirmGameInfoOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventConfirmGameStartOK:
                        this.ProcessReceivedMessage_CG_RequestEventConfirmGameStartOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventConfirmGameEndOK:
                        this.ProcessReceivedMessage_CG_RequestEventConfirmGameEndOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventConfirmGameRecordRewardOK:
                        this.ProcessReceivedMessage_CG_RequestEventConfirmGameRecordRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventConfirmGameTotalRewardOK:
                        this.ProcessReceivedMessage_CG_RequestEventConfirmGameTotalRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestHeroLeagueInfoOK:
                        this.ProcessReceivedMessage_CG_RequestHeroLeagueInfoOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestHeroLeagueSelectLeagueOK:
                        this.ProcessReceivedMessage_CG_RequestHeroLeagueSelectLeagueOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestHeroLeagueInitializeOK:
                        this.ProcessReceivedMessage_CG_RequestHeroLeagueInitializeOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestHeroLeagueInitUserGroupOK:
                        this.ProcessReceivedMessage_CG_RequestHeroLeagueInitUserGroupOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestHeroLeagueGagueRewardOK:
                        this.ProcessReceivedMessage_CG_RequestHeroLeagueGagueRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestHeroLeagueAttackTeamChangeOK:
                        this.ProcessReceivedMessage_CG_RequestHeroLeagueAttackTeamChangeOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestHeroLeagueStageStartOK:
                        this.ProcessReceivedMessage_CG_RequestHeroLeagueStageStartOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestHeroLeagueStageClearOK:
                        this.ProcessReceivedMessage_CG_RequestHeroLeagueStageClearOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestHeroLeagueStageRejoinOK:
                        this.ProcessReceivedMessage_CG_RequestHeroLeagueStageRejoinOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestHeroLeagueStageRejoinCancelOK:
                        this.ProcessReceivedMessage_CG_RequestHeroLeagueStageRejoinCancelOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestHeroLeagueScoreRewardOK:
                        this.ProcessReceivedMessage_CG_RequestHeroLeagueScoreRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventBalloonDartInfoOK:
                        this.ProcessReceivedMessage_CG_RequestEventBalloonDartInfoOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventBalloonDartThrowOK:
                        this.ProcessReceivedMessage_CG_RequestEventBalloonDartThrowOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventBalloonDartChanceOK:
                        this.ProcessReceivedMessage_CG_RequestEventBalloonDartChanceOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventBalloonDartStepUpOK:
                        this.ProcessReceivedMessage_CG_RequestEventBalloonDartStepUpOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventBalloonDartStepRewardOK:
                        this.ProcessReceivedMessage_CG_RequestEventBalloonDartStepRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestEventBalloonDartTotalRewardOK:
                        this.ProcessReceivedMessage_CG_RequestEventBalloonDartTotalRewardOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestChatOK:
                        this.ProcessReceivedMessage_CG_RequestChatOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.CG_RequestChatChannelEnterOK:
                        this.ProcessReceivedMessage_CG_RequestChatChannelEnterOK(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.GC_NotifyChat:
                        this.ProcessReceivedMessage_GC_NotifyChat(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.GC_NotifyChatLog:
                        this.ProcessReceivedMessage_GC_NotifyChatLog(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    case Common.GC_NotifyChatChannelEnter:
                        this.ProcessReceivedMessage_GC_NotifyChatChannelEnter(readOnlyMessage, pa, hostTag, remoteHostID);
                        break;
                    default:
                        goto end;
                }
                return true;
            }
        end:
            readOnlyMessage.ReadOffset = readOffset;
            return false;
        }

        private void ProcessReceivedMessage_CG_CommonCancel(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            RmiID packetID;
            CommonPacket.Marshaler.Read(__msg, out packetID);
            string packetName;
            CommonPacket.Marshaler.Read(__msg, out packetName);
            PacketError error;
            CommonPacket.Marshaler.Read(__msg, out error);
            InvalidRequestType invalidRequesttype;
            CommonPacket.Marshaler.Read(__msg, out invalidRequesttype);
            bool isSimpleMessageBox;
            CommonPacket.Marshaler.Read(__msg, out isSimpleMessageBox);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_CommonCancel);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_CommonCancel,
                    rmiName = RmiName_CG_CommonCancel,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_CommonCancel(remote, rmiContext, packetID, packetName, error, invalidRequesttype, isSimpleMessageBox))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_CommonCancel);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_CommonCancel,
                    rmiName = RmiName_CG_CommonCancel,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_GC_NotifyUserLevelUp(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserLevelUpResult levelUpResult;
            CommonPacket.Marshaler.Read(__msg, out levelUpResult);
            List<UserPackageMissionInfo> userPackageMissionInfoList;
            CommonPacket.Marshaler.Read(__msg, out userPackageMissionInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_GC_NotifyUserLevelUp);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.GC_NotifyUserLevelUp,
                    rmiName = RmiName_GC_NotifyUserLevelUp,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.GC_NotifyUserLevelUp(remote, rmiContext, levelUpResult, userPackageMissionInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_GC_NotifyUserLevelUp);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.GC_NotifyUserLevelUp,
                    rmiName = RmiName_GC_NotifyUserLevelUp,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_FrozenAssetCancel(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            RmiID packetID;
            CommonPacket.Marshaler.Read(__msg, out packetID);
            string packetName;
            CommonPacket.Marshaler.Read(__msg, out packetName);
            int frozenSEQ;
            CommonPacket.Marshaler.Read(__msg, out frozenSEQ);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_FrozenAssetCancel);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_FrozenAssetCancel,
                    rmiName = RmiName_CG_FrozenAssetCancel,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_FrozenAssetCancel(remote, rmiContext, packetID, packetName, frozenSEQ))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_FrozenAssetCancel);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_FrozenAssetCancel,
                    rmiName = RmiName_CG_FrozenAssetCancel,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestChannelUserInfoOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            ChannelUserInfo channelUserInfo;
            CommonPacket.Marshaler.Read(__msg, out channelUserInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestChannelUserInfoOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestChannelUserInfoOK,
                    rmiName = RmiName_CG_RequestChannelUserInfoOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestChannelUserInfoOK(remote, rmiContext, channelUserInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestChannelUserInfoOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestChannelUserInfoOK,
                    rmiName = RmiName_CG_RequestChannelUserInfoOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestHeartBeatOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<APInfo> apInfoList;
            CommonPacket.Marshaler.Read(__msg, out apInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestHeartBeatOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestHeartBeatOK,
                    rmiName = RmiName_CG_RequestHeartBeatOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestHeartBeatOK(remote, rmiContext, apInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestHeartBeatOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestHeartBeatOK,
                    rmiName = RmiName_CG_RequestHeartBeatOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestChangeNicknameOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            string nickname;
            CommonPacket.Marshaler.Read(__msg, out nickname);
            int nicknameChangeCount;
            CommonPacket.Marshaler.Read(__msg, out nicknameChangeCount);
            int changeAvailableDateRemainSec;
            CommonPacket.Marshaler.Read(__msg, out changeAvailableDateRemainSec);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestChangeNicknameOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestChangeNicknameOK,
                    rmiName = RmiName_CG_RequestChangeNicknameOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestChangeNicknameOK(remote, rmiContext, nickname, nicknameChangeCount, changeAvailableDateRemainSec))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestChangeNicknameOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestChangeNicknameOK,
                    rmiName = RmiName_CG_RequestChangeNicknameOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestChangeWantToSayOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            string wantToSay;
            CommonPacket.Marshaler.Read(__msg, out wantToSay);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestChangeWantToSayOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestChangeWantToSayOK,
                    rmiName = RmiName_CG_RequestChangeWantToSayOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestChangeWantToSayOK(remote, rmiContext, wantToSay, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestChangeWantToSayOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestChangeWantToSayOK,
                    rmiName = RmiName_CG_RequestChangeWantToSayOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestTeamInfoOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserTeam userTeam;
            CommonPacket.Marshaler.Read(__msg, out userTeam);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestTeamInfoOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestTeamInfoOK,
                    rmiName = RmiName_CG_RequestTeamInfoOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestTeamInfoOK(remote, rmiContext, userTeam))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestTeamInfoOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestTeamInfoOK,
                    rmiName = RmiName_CG_RequestTeamInfoOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestTeamSlotChangeOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestTeamSlotChangeOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestTeamSlotChangeOK,
                    rmiName = RmiName_CG_RequestTeamSlotChangeOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestTeamSlotChangeOK(remote, rmiContext))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestTeamSlotChangeOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestTeamSlotChangeOK,
                    rmiName = RmiName_CG_RequestTeamSlotChangeOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestTeamNameChangeOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestTeamNameChangeOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestTeamNameChangeOK,
                    rmiName = RmiName_CG_RequestTeamNameChangeOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestTeamNameChangeOK(remote, rmiContext))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestTeamNameChangeOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestTeamNameChangeOK,
                    rmiName = RmiName_CG_RequestTeamNameChangeOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestLobbyInfoOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            LobbyInfo lobbyInfo;
            CommonPacket.Marshaler.Read(__msg, out lobbyInfo);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            List<ItemResultInfo> remoteItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out remoteItemResultInfoList);
            PatrolInfo patrolInfo;
            CommonPacket.Marshaler.Read(__msg, out patrolInfo);
            LoginServiceInfo loginServiceInfo;
            CommonPacket.Marshaler.Read(__msg, out loginServiceInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyInfoOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestLobbyInfoOK,
                    rmiName = RmiName_CG_RequestLobbyInfoOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestLobbyInfoOK(remote, rmiContext, lobbyInfo, missionResult, remoteItemResultInfoList, patrolInfo, loginServiceInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyInfoOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestLobbyInfoOK,
                    rmiName = RmiName_CG_RequestLobbyInfoOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestBasePointInfoOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            BasePointInfo basePointInfo;
            CommonPacket.Marshaler.Read(__msg, out basePointInfo);
            BasePointRefreshInfo basePointRefreshInfo;
            CommonPacket.Marshaler.Read(__msg, out basePointRefreshInfo);
            List<QuestProgressInfo> questProgressInfoList;
            CommonPacket.Marshaler.Read(__msg, out questProgressInfoList);
            List<ArenaRealTimePvpLastRankerStatueInfo> lastRankerStatueInfoList;
            CommonPacket.Marshaler.Read(__msg, out lastRankerStatueInfoList);
            PvpSeasonHistoryInfo pvpSeasonStatueInfo;
            CommonPacket.Marshaler.Read(__msg, out pvpSeasonStatueInfo);
            int lowerLeagueTableID;
            CommonPacket.Marshaler.Read(__msg, out lowerLeagueTableID);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestBasePointInfoOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestBasePointInfoOK,
                    rmiName = RmiName_CG_RequestBasePointInfoOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestBasePointInfoOK(remote, rmiContext, basePointInfo, basePointRefreshInfo, questProgressInfoList, lastRankerStatueInfoList, pvpSeasonStatueInfo, lowerLeagueTableID))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBasePointInfoOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestBasePointInfoOK,
                    rmiName = RmiName_CG_RequestBasePointInfoOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestChatStampUpdateBookmarkOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestChatStampUpdateBookmarkOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestChatStampUpdateBookmarkOK,
                    rmiName = RmiName_CG_RequestChatStampUpdateBookmarkOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestChatStampUpdateBookmarkOK(remote, rmiContext))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestChatStampUpdateBookmarkOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestChatStampUpdateBookmarkOK,
                    rmiName = RmiName_CG_RequestChatStampUpdateBookmarkOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestChatStampUpdateQuickMessageOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestChatStampUpdateQuickMessageOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestChatStampUpdateQuickMessageOK,
                    rmiName = RmiName_CG_RequestChatStampUpdateQuickMessageOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestChatStampUpdateQuickMessageOK(remote, rmiContext))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestChatStampUpdateQuickMessageOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestChatStampUpdateQuickMessageOK,
                    rmiName = RmiName_CG_RequestChatStampUpdateQuickMessageOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestMainSkinChangeOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int targetSkinID;
            CommonPacket.Marshaler.Read(__msg, out targetSkinID);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestMainSkinChangeOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestMainSkinChangeOK,
                    rmiName = RmiName_CG_RequestMainSkinChangeOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestMainSkinChangeOK(remote, rmiContext, targetSkinID))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestMainSkinChangeOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestMainSkinChangeOK,
                    rmiName = RmiName_CG_RequestMainSkinChangeOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventListOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            EventPacketInfo eventPacketInfo;
            CommonPacket.Marshaler.Read(__msg, out eventPacketInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventListOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventListOK,
                    rmiName = RmiName_CG_RequestEventListOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventListOK(remote, rmiContext, eventPacketInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventListOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventListOK,
                    rmiName = RmiName_CG_RequestEventListOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestCheatEnterOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            CheatResult result;
            CommonPacket.Marshaler.Read(__msg, out result);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestCheatEnterOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestCheatEnterOK,
                    rmiName = RmiName_CG_RequestCheatEnterOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestCheatEnterOK(remote, rmiContext, result))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCheatEnterOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestCheatEnterOK,
                    rmiName = RmiName_CG_RequestCheatEnterOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestCheatStageClearOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            StageClearResultInfo stageClearResultInfo;
            CommonPacket.Marshaler.Read(__msg, out stageClearResultInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestCheatStageClearOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestCheatStageClearOK,
                    rmiName = RmiName_CG_RequestCheatStageClearOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestCheatStageClearOK(remote, rmiContext, stageClearResultInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCheatStageClearOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestCheatStageClearOK,
                    rmiName = RmiName_CG_RequestCheatStageClearOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestDllGetItemOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<ItemResultInfo> itemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out itemResultInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestDllGetItemOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestDllGetItemOK,
                    rmiName = RmiName_CG_RequestDllGetItemOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestDllGetItemOK(remote, rmiContext, itemResultInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDllGetItemOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestDllGetItemOK,
                    rmiName = RmiName_CG_RequestDllGetItemOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestRecommendFriendUSNListOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<long> recommendFriendUSNList;
            CommonPacket.Marshaler.Read(__msg, out recommendFriendUSNList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestRecommendFriendUSNListOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestRecommendFriendUSNListOK,
                    rmiName = RmiName_CG_RequestRecommendFriendUSNListOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestRecommendFriendUSNListOK(remote, rmiContext, recommendFriendUSNList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestRecommendFriendUSNListOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestRecommendFriendUSNListOK,
                    rmiName = RmiName_CG_RequestRecommendFriendUSNListOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestDailyResetOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserDailyReset dailyReset;
            CommonPacket.Marshaler.Read(__msg, out dailyReset);
            int remainDailyResetTimeSEC;
            CommonPacket.Marshaler.Read(__msg, out remainDailyResetTimeSEC);
            List<UserPackageMissionInfo> userPackageMissionInfoList;
            CommonPacket.Marshaler.Read(__msg, out userPackageMissionInfoList);
            GambleTimeSwitchLobbyInfo gambleTimeSwitchLobbyInfo;
            CommonPacket.Marshaler.Read(__msg, out gambleTimeSwitchLobbyInfo);
            bool isGuildBossInitialized;
            CommonPacket.Marshaler.Read(__msg, out isGuildBossInitialized);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestDailyResetOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestDailyResetOK,
                    rmiName = RmiName_CG_RequestDailyResetOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestDailyResetOK(remote, rmiContext, dailyReset, remainDailyResetTimeSEC, userPackageMissionInfoList, gambleTimeSwitchLobbyInfo, isGuildBossInitialized))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDailyResetOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestDailyResetOK,
                    rmiName = RmiName_CG_RequestDailyResetOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_NotifyMaintenance(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            MaintenanceInfo maintenanceInfo;
            CommonPacket.Marshaler.Read(__msg, out maintenanceInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_NotifyMaintenance);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_NotifyMaintenance,
                    rmiName = RmiName_CG_NotifyMaintenance,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_NotifyMaintenance(remote, rmiContext, maintenanceInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_NotifyMaintenance);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_NotifyMaintenance,
                    rmiName = RmiName_CG_NotifyMaintenance,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestFrozenAssetRedeemOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int frozenSEQ;
            CommonPacket.Marshaler.Read(__msg, out frozenSEQ);
            List<ItemResultInfo> useItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfoList);
            PaybackEventResultInfo paybackEventresultInfo;
            CommonPacket.Marshaler.Read(__msg, out paybackEventresultInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestFrozenAssetRedeemOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestFrozenAssetRedeemOK,
                    rmiName = RmiName_CG_RequestFrozenAssetRedeemOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestFrozenAssetRedeemOK(remote, rmiContext, frozenSEQ, useItemResultInfoList, paybackEventresultInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFrozenAssetRedeemOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestFrozenAssetRedeemOK,
                    rmiName = RmiName_CG_RequestFrozenAssetRedeemOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestDataTableReloadOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            string result;
            CommonPacket.Marshaler.Read(__msg, out result);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestDataTableReloadOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestDataTableReloadOK,
                    rmiName = RmiName_CG_RequestDataTableReloadOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestDataTableReloadOK(remote, rmiContext, result))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDataTableReloadOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestDataTableReloadOK,
                    rmiName = RmiName_CG_RequestDataTableReloadOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_NotifyEmergencyNotice(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            EmergencyNoticeInfo emergencyNoticeInfo;
            CommonPacket.Marshaler.Read(__msg, out emergencyNoticeInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_NotifyEmergencyNotice);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_NotifyEmergencyNotice,
                    rmiName = RmiName_CG_NotifyEmergencyNotice,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_NotifyEmergencyNotice(remote, rmiContext, emergencyNoticeInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_NotifyEmergencyNotice);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_NotifyEmergencyNotice,
                    rmiName = RmiName_CG_NotifyEmergencyNotice,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestRecommendHeroGrowthInfoOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int heroId;
            CommonPacket.Marshaler.Read(__msg, out heroId);
            RecommendHeroGrowthInfo recommendHeroGrowthInfo;
            CommonPacket.Marshaler.Read(__msg, out recommendHeroGrowthInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestRecommendHeroGrowthInfoOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestRecommendHeroGrowthInfoOK,
                    rmiName = RmiName_CG_RequestRecommendHeroGrowthInfoOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestRecommendHeroGrowthInfoOK(remote, rmiContext, heroId, recommendHeroGrowthInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestRecommendHeroGrowthInfoOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestRecommendHeroGrowthInfoOK,
                    rmiName = RmiName_CG_RequestRecommendHeroGrowthInfoOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestServerVersionOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            string serverVersionInfo;
            CommonPacket.Marshaler.Read(__msg, out serverVersionInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestServerVersionOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestServerVersionOK,
                    rmiName = RmiName_CG_RequestServerVersionOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestServerVersionOK(remote, rmiContext, serverVersionInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestServerVersionOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestServerVersionOK,
                    rmiName = RmiName_CG_RequestServerVersionOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestSkinOneStepEvolutionOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            SkinOneStepEvolutionResult skinOneStepEvolutionResult;
            CommonPacket.Marshaler.Read(__msg, out skinOneStepEvolutionResult);
            ItemResultInfo useItemResultInfo;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestSkinOneStepEvolutionOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestSkinOneStepEvolutionOK,
                    rmiName = RmiName_CG_RequestSkinOneStepEvolutionOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestSkinOneStepEvolutionOK(remote, rmiContext, skinOneStepEvolutionResult, useItemResultInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSkinOneStepEvolutionOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestSkinOneStepEvolutionOK,
                    rmiName = RmiName_CG_RequestSkinOneStepEvolutionOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestSecurityTokenOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            string securityToken;
            CommonPacket.Marshaler.Read(__msg, out securityToken);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestSecurityTokenOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestSecurityTokenOK,
                    rmiName = RmiName_CG_RequestSecurityTokenOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestSecurityTokenOK(remote, rmiContext, securityToken))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSecurityTokenOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestSecurityTokenOK,
                    rmiName = RmiName_CG_RequestSecurityTokenOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestNetmarbleAuthOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            NetmarbleAccountInfo accountInfo;
            CommonPacket.Marshaler.Read(__msg, out accountInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestNetmarbleAuthOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestNetmarbleAuthOK,
                    rmiName = RmiName_CG_RequestNetmarbleAuthOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestNetmarbleAuthOK(remote, rmiContext, accountInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestNetmarbleAuthOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestNetmarbleAuthOK,
                    rmiName = RmiName_CG_RequestNetmarbleAuthOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestAuthenticateCreateOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            NetmarbleAccountInfo accountInfo;
            CommonPacket.Marshaler.Read(__msg, out accountInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestAuthenticateCreateOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestAuthenticateCreateOK,
                    rmiName = RmiName_CG_RequestAuthenticateCreateOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestAuthenticateCreateOK(remote, rmiContext, accountInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestAuthenticateCreateOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestAuthenticateCreateOK,
                    rmiName = RmiName_CG_RequestAuthenticateCreateOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEditorUserInfoByNickNameOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            NetmarbleAccountInfo accountInfo;
            CommonPacket.Marshaler.Read(__msg, out accountInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEditorUserInfoByNickNameOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEditorUserInfoByNickNameOK,
                    rmiName = RmiName_CG_RequestEditorUserInfoByNickNameOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEditorUserInfoByNickNameOK(remote, rmiContext, accountInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEditorUserInfoByNickNameOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEditorUserInfoByNickNameOK,
                    rmiName = RmiName_CG_RequestEditorUserInfoByNickNameOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestLoginOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            LoginUserResultInfo userInfo;
            CommonPacket.Marshaler.Read(__msg, out userInfo);
            LoginServiceInfo loginServiceInfo;
            CommonPacket.Marshaler.Read(__msg, out loginServiceInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestLoginOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestLoginOK,
                    rmiName = RmiName_CG_RequestLoginOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestLoginOK(remote, rmiContext, userInfo, loginServiceInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLoginOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestLoginOK,
                    rmiName = RmiName_CG_RequestLoginOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestLoginInstantlyOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserDailyReset sendDailyReset;
            CommonPacket.Marshaler.Read(__msg, out sendDailyReset);
            int sessionKey;
            CommonPacket.Marshaler.Read(__msg, out sessionKey);
            LoginServiceInfo loginServiceInfo;
            CommonPacket.Marshaler.Read(__msg, out loginServiceInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestLoginInstantlyOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestLoginInstantlyOK,
                    rmiName = RmiName_CG_RequestLoginInstantlyOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestLoginInstantlyOK(remote, rmiContext, sendDailyReset, sessionKey, loginServiceInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLoginInstantlyOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestLoginInstantlyOK,
                    rmiName = RmiName_CG_RequestLoginInstantlyOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestForceLogoutOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            PacketError error;
            CommonPacket.Marshaler.Read(__msg, out error);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestForceLogoutOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestForceLogoutOK,
                    rmiName = RmiName_CG_RequestForceLogoutOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestForceLogoutOK(remote, rmiContext, error))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestForceLogoutOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestForceLogoutOK,
                    rmiName = RmiName_CG_RequestForceLogoutOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RetryRequestOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RetryRequestOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RetryRequestOK,
                    rmiName = RmiName_CG_RetryRequestOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RetryRequestOK(remote, rmiContext))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RetryRequestOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RetryRequestOK,
                    rmiName = RmiName_CG_RetryRequestOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestAccountWithdrawOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestAccountWithdrawOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestAccountWithdrawOK,
                    rmiName = RmiName_CG_RequestAccountWithdrawOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestAccountWithdrawOK(remote, rmiContext))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestAccountWithdrawOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestAccountWithdrawOK,
                    rmiName = RmiName_CG_RequestAccountWithdrawOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestAccountWithdrawCancelOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestAccountWithdrawCancelOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestAccountWithdrawCancelOK,
                    rmiName = RmiName_CG_RequestAccountWithdrawCancelOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestAccountWithdrawCancelOK(remote, rmiContext))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestAccountWithdrawCancelOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestAccountWithdrawCancelOK,
                    rmiName = RmiName_CG_RequestAccountWithdrawCancelOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_GC_NotifyCookie(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            ByteArrayInfo cookie;
            CommonPacket.Marshaler.Read(__msg, out cookie);
            base.core.PostCheckReadMessage(__msg, RmiName_GC_NotifyCookie);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.GC_NotifyCookie,
                    rmiName = RmiName_GC_NotifyCookie,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.GC_NotifyCookie(remote, rmiContext, cookie))
                base.core.ShowNotImplementedRmiWarning(RmiName_GC_NotifyCookie);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.GC_NotifyCookie,
                    rmiName = RmiName_GC_NotifyCookie,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestCookieOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestCookieOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestCookieOK,
                    rmiName = RmiName_CG_RequestCookieOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestCookieOK(remote, rmiContext))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCookieOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestCookieOK,
                    rmiName = RmiName_CG_RequestCookieOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestVerifySecurityCertValueOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestVerifySecurityCertValueOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestVerifySecurityCertValueOK,
                    rmiName = RmiName_CG_RequestVerifySecurityCertValueOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestVerifySecurityCertValueOK(remote, rmiContext))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestVerifySecurityCertValueOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestVerifySecurityCertValueOK,
                    rmiName = RmiName_CG_RequestVerifySecurityCertValueOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_GC_NotifySecurity(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            string securityToken;
            CommonPacket.Marshaler.Read(__msg, out securityToken);
            base.core.PostCheckReadMessage(__msg, RmiName_GC_NotifySecurity);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.GC_NotifySecurity,
                    rmiName = RmiName_GC_NotifySecurity,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.GC_NotifySecurity(remote, rmiContext, securityToken))
                base.core.ShowNotImplementedRmiWarning(RmiName_GC_NotifySecurity);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.GC_NotifySecurity,
                    rmiName = RmiName_GC_NotifySecurity,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestBillingInitializeOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            BillingInitializeResultInfo initResultInfo;
            CommonPacket.Marshaler.Read(__msg, out initResultInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestBillingInitializeOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestBillingInitializeOK,
                    rmiName = RmiName_CG_RequestBillingInitializeOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestBillingInitializeOK(remote, rmiContext, initResultInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBillingInitializeOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestBillingInitializeOK,
                    rmiName = RmiName_CG_RequestBillingInitializeOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestBillingVerifyPUOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            BillingVerifyResultInfo verifyResultInfo;
            CommonPacket.Marshaler.Read(__msg, out verifyResultInfo);
            bool isDBError;
            CommonPacket.Marshaler.Read(__msg, out isDBError);
            List<UserPackageInfo> userPackageInfoList;
            CommonPacket.Marshaler.Read(__msg, out userPackageInfoList);
            List<ItemResultInfo> getItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfoList);
            int shopMoneyID;
            CommonPacket.Marshaler.Read(__msg, out shopMoneyID);
            bool isFirstBilling;
            CommonPacket.Marshaler.Read(__msg, out isFirstBilling);
            bool isFirstVIP;
            CommonPacket.Marshaler.Read(__msg, out isFirstVIP);
            List<UserDiaBuyEventInfo> userDiaBuyEventInfoList;
            CommonPacket.Marshaler.Read(__msg, out userDiaBuyEventInfoList);
            List<ClientSeasonPassRankRewardInfo> seasonPassClientSendList;
            CommonPacket.Marshaler.Read(__msg, out seasonPassClientSendList);
            PacketError errorMsg;
            CommonPacket.Marshaler.Read(__msg, out errorMsg);
            List<UserPackageMissionInfo> userPackageMissionInfoList;
            CommonPacket.Marshaler.Read(__msg, out userPackageMissionInfoList);
            int firstDiaBuyItemID;
            CommonPacket.Marshaler.Read(__msg, out firstDiaBuyItemID);
            UserBuffInfo userBuffInfo;
            CommonPacket.Marshaler.Read(__msg, out userBuffInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestBillingVerifyPUOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestBillingVerifyPUOK,
                    rmiName = RmiName_CG_RequestBillingVerifyPUOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestBillingVerifyPUOK(remote, rmiContext, verifyResultInfo, isDBError, userPackageInfoList, getItemResultInfoList, shopMoneyID, isFirstBilling, isFirstVIP, userDiaBuyEventInfoList, seasonPassClientSendList, errorMsg, userPackageMissionInfoList, firstDiaBuyItemID, userBuffInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBillingVerifyPUOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestBillingVerifyPUOK,
                    rmiName = RmiName_CG_RequestBillingVerifyPUOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestBillingRemainTROK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            BillingRemainTRResultInfo remainTRResultInfo;
            CommonPacket.Marshaler.Read(__msg, out remainTRResultInfo);
            List<UserPackageInfo> userPackageInfoList;
            CommonPacket.Marshaler.Read(__msg, out userPackageInfoList);
            List<ItemResultInfo> getItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfoList);
            List<int> shopMoneyIDList;
            CommonPacket.Marshaler.Read(__msg, out shopMoneyIDList);
            bool isFirstBilling;
            CommonPacket.Marshaler.Read(__msg, out isFirstBilling);
            bool isFirstVIP;
            CommonPacket.Marshaler.Read(__msg, out isFirstVIP);
            List<UserDiaBuyEventInfo> userDiaBuyEventInfoList;
            CommonPacket.Marshaler.Read(__msg, out userDiaBuyEventInfoList);
            List<UserPackageMissionInfo> userPackageMissionInfoList;
            CommonPacket.Marshaler.Read(__msg, out userPackageMissionInfoList);
            int firstDiaBuyItemID;
            CommonPacket.Marshaler.Read(__msg, out firstDiaBuyItemID);
            UserBuffInfo userBuffInfo;
            CommonPacket.Marshaler.Read(__msg, out userBuffInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestBillingRemainTROK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestBillingRemainTROK,
                    rmiName = RmiName_CG_RequestBillingRemainTROK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestBillingRemainTROK(remote, rmiContext, remainTRResultInfo, userPackageInfoList, getItemResultInfoList, shopMoneyIDList, isFirstBilling, isFirstVIP, userDiaBuyEventInfoList, userPackageMissionInfoList, firstDiaBuyItemID, userBuffInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBillingRemainTROK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestBillingRemainTROK,
                    rmiName = RmiName_CG_RequestBillingRemainTROK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestBillingCouponVerifyOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            BillingVerifyResultInfo verifyResultInfo;
            CommonPacket.Marshaler.Read(__msg, out verifyResultInfo);
            string netmarble_reward_id;
            CommonPacket.Marshaler.Read(__msg, out netmarble_reward_id);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestBillingCouponVerifyOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestBillingCouponVerifyOK,
                    rmiName = RmiName_CG_RequestBillingCouponVerifyOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestBillingCouponVerifyOK(remote, rmiContext, verifyResultInfo, netmarble_reward_id))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBillingCouponVerifyOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestBillingCouponVerifyOK,
                    rmiName = RmiName_CG_RequestBillingCouponVerifyOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestBillingCrossPromotionOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            BillingVerifyResultInfo verifyResultInfo;
            CommonPacket.Marshaler.Read(__msg, out verifyResultInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestBillingCrossPromotionOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestBillingCrossPromotionOK,
                    rmiName = RmiName_CG_RequestBillingCrossPromotionOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestBillingCrossPromotionOK(remote, rmiContext, verifyResultInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBillingCrossPromotionOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestBillingCrossPromotionOK,
                    rmiName = RmiName_CG_RequestBillingCrossPromotionOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestBillingPackageShopOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestBillingPackageShopOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestBillingPackageShopOK,
                    rmiName = RmiName_CG_RequestBillingPackageShopOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestBillingPackageShopOK(remote, rmiContext))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBillingPackageShopOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestBillingPackageShopOK,
                    rmiName = RmiName_CG_RequestBillingPackageShopOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestAgeInputOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            byte ageLevel;
            CommonPacket.Marshaler.Read(__msg, out ageLevel);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestAgeInputOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestAgeInputOK,
                    rmiName = RmiName_CG_RequestAgeInputOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestAgeInputOK(remote, rmiContext, ageLevel))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestAgeInputOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestAgeInputOK,
                    rmiName = RmiName_CG_RequestAgeInputOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_Notify_WolverineOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            PacketError dbError;
            CommonPacket.Marshaler.Read(__msg, out dbError);
            bool rePayFlag;
            CommonPacket.Marshaler.Read(__msg, out rePayFlag);
            ItemResultInfo buyDiaItemResultInfo;
            CommonPacket.Marshaler.Read(__msg, out buyDiaItemResultInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_Notify_WolverineOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_Notify_WolverineOK,
                    rmiName = RmiName_CG_Notify_WolverineOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_Notify_WolverineOK(remote, rmiContext, dbError, rePayFlag, buyDiaItemResultInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_Notify_WolverineOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_Notify_WolverineOK,
                    rmiName = RmiName_CG_Notify_WolverineOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestSDKInfoChangeOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestSDKInfoChangeOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestSDKInfoChangeOK,
                    rmiName = RmiName_CG_RequestSDKInfoChangeOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestSDKInfoChangeOK(remote, rmiContext))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSDKInfoChangeOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestSDKInfoChangeOK,
                    rmiName = RmiName_CG_RequestSDKInfoChangeOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestPCBillingInitializeOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            BillingInitializeResultInfo initResultInfo;
            CommonPacket.Marshaler.Read(__msg, out initResultInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestPCBillingInitializeOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestPCBillingInitializeOK,
                    rmiName = RmiName_CG_RequestPCBillingInitializeOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestPCBillingInitializeOK(remote, rmiContext, initResultInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestPCBillingInitializeOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestPCBillingInitializeOK,
                    rmiName = RmiName_CG_RequestPCBillingInitializeOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestPCBillingRemainItemsOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<UserPackageInfo> userPackageInfoList;
            CommonPacket.Marshaler.Read(__msg, out userPackageInfoList);
            List<ItemResultInfo> getItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfoList);
            int shopMoneyID;
            CommonPacket.Marshaler.Read(__msg, out shopMoneyID);
            bool isFirstBilling;
            CommonPacket.Marshaler.Read(__msg, out isFirstBilling);
            bool isFirstVIP;
            CommonPacket.Marshaler.Read(__msg, out isFirstVIP);
            List<UserDiaBuyEventInfo> userDiaBuyEventInfoList;
            CommonPacket.Marshaler.Read(__msg, out userDiaBuyEventInfoList);
            List<ClientSeasonPassRankRewardInfo> seasonPassClientSendList;
            CommonPacket.Marshaler.Read(__msg, out seasonPassClientSendList);
            PacketError errorMsg;
            CommonPacket.Marshaler.Read(__msg, out errorMsg);
            List<UserPackageMissionInfo> userPackageMissionInfoList;
            CommonPacket.Marshaler.Read(__msg, out userPackageMissionInfoList);
            int firstDiaBuyItemID;
            CommonPacket.Marshaler.Read(__msg, out firstDiaBuyItemID);
            UserBuffInfo userBuffInfo;
            CommonPacket.Marshaler.Read(__msg, out userBuffInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestPCBillingRemainItemsOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestPCBillingRemainItemsOK,
                    rmiName = RmiName_CG_RequestPCBillingRemainItemsOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestPCBillingRemainItemsOK(remote, rmiContext, userPackageInfoList, getItemResultInfoList, shopMoneyID, isFirstBilling, isFirstVIP, userDiaBuyEventInfoList, seasonPassClientSendList, errorMsg, userPackageMissionInfoList, firstDiaBuyItemID, userBuffInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestPCBillingRemainItemsOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestPCBillingRemainItemsOK,
                    rmiName = RmiName_CG_RequestPCBillingRemainItemsOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestSkinLevelUpBySkinMaterialOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserSkin targetSkin;
            CommonPacket.Marshaler.Read(__msg, out targetSkin);
            List<NeedItemInfo> skinMaterialIDList;
            CommonPacket.Marshaler.Read(__msg, out skinMaterialIDList);
            List<ItemResultInfo> itemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out itemResultInfoList);
            List<SuccessInfo> successInfoList;
            CommonPacket.Marshaler.Read(__msg, out successInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            List<QuestProgressInfo> questProgressInfoList;
            CommonPacket.Marshaler.Read(__msg, out questProgressInfoList);
            PaybackEventResultInfo paybackEventresultInfo;
            CommonPacket.Marshaler.Read(__msg, out paybackEventresultInfo);
            List<UserPackageMissionInfo> userPackageMissionInfoList;
            CommonPacket.Marshaler.Read(__msg, out userPackageMissionInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestSkinLevelUpBySkinMaterialOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestSkinLevelUpBySkinMaterialOK,
                    rmiName = RmiName_CG_RequestSkinLevelUpBySkinMaterialOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestSkinLevelUpBySkinMaterialOK(remote, rmiContext, targetSkin, skinMaterialIDList, itemResultInfoList, successInfoList, missionResult, questProgressInfoList, paybackEventresultInfo, userPackageMissionInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSkinLevelUpBySkinMaterialOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestSkinLevelUpBySkinMaterialOK,
                    rmiName = RmiName_CG_RequestSkinLevelUpBySkinMaterialOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestSkinResearchOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserSkin targetSkin;
            CommonPacket.Marshaler.Read(__msg, out targetSkin);
            int researchID;
            CommonPacket.Marshaler.Read(__msg, out researchID);
            List<ItemResultInfo> itemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out itemResultInfoList);
            PaybackEventResultInfo paybackEventresultInfo;
            CommonPacket.Marshaler.Read(__msg, out paybackEventresultInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestSkinResearchOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestSkinResearchOK,
                    rmiName = RmiName_CG_RequestSkinResearchOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestSkinResearchOK(remote, rmiContext, targetSkin, researchID, itemResultInfoList, paybackEventresultInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSkinResearchOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestSkinResearchOK,
                    rmiName = RmiName_CG_RequestSkinResearchOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestSkinResearchInitOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserSkin targetSkin;
            CommonPacket.Marshaler.Read(__msg, out targetSkin);
            List<ItemResultInfo> useItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfoList);
            PaybackEventResultInfo paybackEventresultInfo;
            CommonPacket.Marshaler.Read(__msg, out paybackEventresultInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestSkinResearchInitOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestSkinResearchInitOK,
                    rmiName = RmiName_CG_RequestSkinResearchInitOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestSkinResearchInitOK(remote, rmiContext, targetSkin, useItemResultInfoList, paybackEventresultInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSkinResearchInitOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestSkinResearchInitOK,
                    rmiName = RmiName_CG_RequestSkinResearchInitOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestSkinMaterialGrindOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<ItemResultInfo> itemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out itemResultInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestSkinMaterialGrindOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestSkinMaterialGrindOK,
                    rmiName = RmiName_CG_RequestSkinMaterialGrindOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestSkinMaterialGrindOK(remote, rmiContext, itemResultInfoList, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSkinMaterialGrindOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestSkinMaterialGrindOK,
                    rmiName = RmiName_CG_RequestSkinMaterialGrindOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestSkinAwakenOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserSkin targetSkin;
            CommonPacket.Marshaler.Read(__msg, out targetSkin);
            List<ItemResultInfo> itemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out itemResultInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            List<QuestProgressInfo> questProgressInfoList;
            CommonPacket.Marshaler.Read(__msg, out questProgressInfoList);
            PaybackEventResultInfo paybackEventresultInfo;
            CommonPacket.Marshaler.Read(__msg, out paybackEventresultInfo);
            List<UserPackageMissionInfo> userPackageMissionInfoList;
            CommonPacket.Marshaler.Read(__msg, out userPackageMissionInfoList);
            int growthPoint;
            CommonPacket.Marshaler.Read(__msg, out growthPoint);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestSkinAwakenOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestSkinAwakenOK,
                    rmiName = RmiName_CG_RequestSkinAwakenOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestSkinAwakenOK(remote, rmiContext, targetSkin, itemResultInfoList, missionResult, questProgressInfoList, paybackEventresultInfo, userPackageMissionInfoList, growthPoint))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSkinAwakenOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestSkinAwakenOK,
                    rmiName = RmiName_CG_RequestSkinAwakenOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestSkinHeadStyleChangeOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserSkin targetSkin;
            CommonPacket.Marshaler.Read(__msg, out targetSkin);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestSkinHeadStyleChangeOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestSkinHeadStyleChangeOK,
                    rmiName = RmiName_CG_RequestSkinHeadStyleChangeOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestSkinHeadStyleChangeOK(remote, rmiContext, targetSkin))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSkinHeadStyleChangeOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestSkinHeadStyleChangeOK,
                    rmiName = RmiName_CG_RequestSkinHeadStyleChangeOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestSkinEvolutionOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            SkinEvolutionResult evolutionResult;
            CommonPacket.Marshaler.Read(__msg, out evolutionResult);
            bool isFirstEvolution;
            CommonPacket.Marshaler.Read(__msg, out isFirstEvolution);
            bool isFirstURGet;
            CommonPacket.Marshaler.Read(__msg, out isFirstURGet);
            PaybackEventResultInfo paybackEventresultInfo;
            CommonPacket.Marshaler.Read(__msg, out paybackEventresultInfo);
            List<UserPackageMissionInfo> userPackageMissionInfoList;
            CommonPacket.Marshaler.Read(__msg, out userPackageMissionInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestSkinEvolutionOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestSkinEvolutionOK,
                    rmiName = RmiName_CG_RequestSkinEvolutionOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestSkinEvolutionOK(remote, rmiContext, evolutionResult, isFirstEvolution, isFirstURGet, paybackEventresultInfo, userPackageMissionInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSkinEvolutionOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestSkinEvolutionOK,
                    rmiName = RmiName_CG_RequestSkinEvolutionOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestSkinSkillLevelUpOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            SkinSkillLevelUpResult skillLevelUpResult;
            CommonPacket.Marshaler.Read(__msg, out skillLevelUpResult);
            PaybackEventResultInfo paybackEventresultInfo;
            CommonPacket.Marshaler.Read(__msg, out paybackEventresultInfo);
            int growthPoint;
            CommonPacket.Marshaler.Read(__msg, out growthPoint);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestSkinSkillLevelUpOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestSkinSkillLevelUpOK,
                    rmiName = RmiName_CG_RequestSkinSkillLevelUpOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestSkinSkillLevelUpOK(remote, rmiContext, skillLevelUpResult, paybackEventresultInfo, growthPoint))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSkinSkillLevelUpOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestSkinSkillLevelUpOK,
                    rmiName = RmiName_CG_RequestSkinSkillLevelUpOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestSkinGiveFellowshipExpOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            SkinGiveFellowResult fellowResult;
            CommonPacket.Marshaler.Read(__msg, out fellowResult);
            UserADViewInfo updateUserADViewInfo;
            CommonPacket.Marshaler.Read(__msg, out updateUserADViewInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestSkinGiveFellowshipExpOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestSkinGiveFellowshipExpOK,
                    rmiName = RmiName_CG_RequestSkinGiveFellowshipExpOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestSkinGiveFellowshipExpOK(remote, rmiContext, fellowResult, updateUserADViewInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSkinGiveFellowshipExpOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestSkinGiveFellowshipExpOK,
                    rmiName = RmiName_CG_RequestSkinGiveFellowshipExpOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestSkinFellowshipLevelUpRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            byte lastRewardIndex;
            CommonPacket.Marshaler.Read(__msg, out lastRewardIndex);
            ItemResultInfo getItemResultInfo;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfo);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestSkinFellowshipLevelUpRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestSkinFellowshipLevelUpRewardOK,
                    rmiName = RmiName_CG_RequestSkinFellowshipLevelUpRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestSkinFellowshipLevelUpRewardOK(remote, rmiContext, lastRewardIndex, getItemResultInfo, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSkinFellowshipLevelUpRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestSkinFellowshipLevelUpRewardOK,
                    rmiName = RmiName_CG_RequestSkinFellowshipLevelUpRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestCostumeEquipOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserSkin userSkin;
            CommonPacket.Marshaler.Read(__msg, out userSkin);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestCostumeEquipOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestCostumeEquipOK,
                    rmiName = RmiName_CG_RequestCostumeEquipOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestCostumeEquipOK(remote, rmiContext, userSkin))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCostumeEquipOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestCostumeEquipOK,
                    rmiName = RmiName_CG_RequestCostumeEquipOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestCostumeUnEquipOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserSkin userSkin;
            CommonPacket.Marshaler.Read(__msg, out userSkin);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestCostumeUnEquipOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestCostumeUnEquipOK,
                    rmiName = RmiName_CG_RequestCostumeUnEquipOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestCostumeUnEquipOK(remote, rmiContext, userSkin))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCostumeUnEquipOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestCostumeUnEquipOK,
                    rmiName = RmiName_CG_RequestCostumeUnEquipOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestCostumeUnLockOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<ItemResultInfo> itemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out itemResultInfoList);
            List<UserSkin> updateSkinList;
            CommonPacket.Marshaler.Read(__msg, out updateSkinList);
            List<UserSkin> equipSkinList;
            CommonPacket.Marshaler.Read(__msg, out equipSkinList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestCostumeUnLockOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestCostumeUnLockOK,
                    rmiName = RmiName_CG_RequestCostumeUnLockOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestCostumeUnLockOK(remote, rmiContext, itemResultInfoList, updateSkinList, equipSkinList, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCostumeUnLockOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestCostumeUnLockOK,
                    rmiName = RmiName_CG_RequestCostumeUnLockOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestSkinOverEvolutionOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            SkinEvolutionBreakResult evolutionBreakResult;
            CommonPacket.Marshaler.Read(__msg, out evolutionBreakResult);
            PaybackEventResultInfo paybackEventresultInfo;
            CommonPacket.Marshaler.Read(__msg, out paybackEventresultInfo);
            int growthPoint;
            CommonPacket.Marshaler.Read(__msg, out growthPoint);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestSkinOverEvolutionOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestSkinOverEvolutionOK,
                    rmiName = RmiName_CG_RequestSkinOverEvolutionOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestSkinOverEvolutionOK(remote, rmiContext, evolutionBreakResult, paybackEventresultInfo, growthPoint))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSkinOverEvolutionOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestSkinOverEvolutionOK,
                    rmiName = RmiName_CG_RequestSkinOverEvolutionOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestSkinMaxAwakenRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserSkin userSkin;
            CommonPacket.Marshaler.Read(__msg, out userSkin);
            List<ItemResultInfo> itemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out itemResultInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestSkinMaxAwakenRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestSkinMaxAwakenRewardOK,
                    rmiName = RmiName_CG_RequestSkinMaxAwakenRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestSkinMaxAwakenRewardOK(remote, rmiContext, userSkin, itemResultInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSkinMaxAwakenRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestSkinMaxAwakenRewardOK,
                    rmiName = RmiName_CG_RequestSkinMaxAwakenRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestCostumeRegisterOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserSkin userSkin;
            CommonPacket.Marshaler.Read(__msg, out userSkin);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestCostumeRegisterOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestCostumeRegisterOK,
                    rmiName = RmiName_CG_RequestCostumeRegisterOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestCostumeRegisterOK(remote, rmiContext, userSkin))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCostumeRegisterOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestCostumeRegisterOK,
                    rmiName = RmiName_CG_RequestCostumeRegisterOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestSkinLoveRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            ItemResultInfo rewardItemInfo;
            CommonPacket.Marshaler.Read(__msg, out rewardItemInfo);
            byte rewardSeq;
            CommonPacket.Marshaler.Read(__msg, out rewardSeq);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestSkinLoveRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestSkinLoveRewardOK,
                    rmiName = RmiName_CG_RequestSkinLoveRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestSkinLoveRewardOK(remote, rmiContext, rewardItemInfo, rewardSeq, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSkinLoveRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestSkinLoveRewardOK,
                    rmiName = RmiName_CG_RequestSkinLoveRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestCostumeAutoRegisterOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<UserSkin> userSkinList;
            CommonPacket.Marshaler.Read(__msg, out userSkinList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestCostumeAutoRegisterOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestCostumeAutoRegisterOK,
                    rmiName = RmiName_CG_RequestCostumeAutoRegisterOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestCostumeAutoRegisterOK(remote, rmiContext, userSkinList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCostumeAutoRegisterOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestCostumeAutoRegisterOK,
                    rmiName = RmiName_CG_RequestCostumeAutoRegisterOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestStoryCostumeOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<ItemResultInfo> getItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfoList);
            List<UserCommonItem> userStoryCostumeItemList;
            CommonPacket.Marshaler.Read(__msg, out userStoryCostumeItemList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestStoryCostumeOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestStoryCostumeOK,
                    rmiName = RmiName_CG_RequestStoryCostumeOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestStoryCostumeOK(remote, rmiContext, getItemResultInfoList, userStoryCostumeItemList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestStoryCostumeOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestStoryCostumeOK,
                    rmiName = RmiName_CG_RequestStoryCostumeOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestCostumeLevelUpOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            CostumeResultInfo costumeResultInfo;
            CommonPacket.Marshaler.Read(__msg, out costumeResultInfo);
            List<ItemResultInfo> useItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            List<QuestProgressInfo> questProgressInfoList;
            CommonPacket.Marshaler.Read(__msg, out questProgressInfoList);
            PaybackEventResultInfo paybackEventresultInfo;
            CommonPacket.Marshaler.Read(__msg, out paybackEventresultInfo);
            List<UserPlayCountEventInfo> userPlayCountEventInfoList;
            CommonPacket.Marshaler.Read(__msg, out userPlayCountEventInfoList);
            List<UserPackageMissionInfo> userPackageMissionInfoList;
            CommonPacket.Marshaler.Read(__msg, out userPackageMissionInfoList);
            int afterGrowthPoint;
            CommonPacket.Marshaler.Read(__msg, out afterGrowthPoint);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestCostumeLevelUpOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestCostumeLevelUpOK,
                    rmiName = RmiName_CG_RequestCostumeLevelUpOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestCostumeLevelUpOK(remote, rmiContext, costumeResultInfo, useItemResultInfoList, missionResult, questProgressInfoList, paybackEventresultInfo, userPlayCountEventInfoList, userPackageMissionInfoList, afterGrowthPoint))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCostumeLevelUpOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestCostumeLevelUpOK,
                    rmiName = RmiName_CG_RequestCostumeLevelUpOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestSkinMaxAwakenOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserSkin targetSkin;
            CommonPacket.Marshaler.Read(__msg, out targetSkin);
            List<ItemResultInfo> itemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out itemResultInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            List<QuestProgressInfo> questProgressInfoList;
            CommonPacket.Marshaler.Read(__msg, out questProgressInfoList);
            List<UserPackageMissionInfo> userPackageMissionInfoList;
            CommonPacket.Marshaler.Read(__msg, out userPackageMissionInfoList);
            int growthPoint;
            CommonPacket.Marshaler.Read(__msg, out growthPoint);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestSkinMaxAwakenOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestSkinMaxAwakenOK,
                    rmiName = RmiName_CG_RequestSkinMaxAwakenOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestSkinMaxAwakenOK(remote, rmiContext, targetSkin, itemResultInfoList, missionResult, questProgressInfoList, userPackageMissionInfoList, growthPoint))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSkinMaxAwakenOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestSkinMaxAwakenOK,
                    rmiName = RmiName_CG_RequestSkinMaxAwakenOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestBattlePointRegisterOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int battlePoint;
            CommonPacket.Marshaler.Read(__msg, out battlePoint);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            List<UserPackageMissionInfo> userPackageMissionInfoList;
            CommonPacket.Marshaler.Read(__msg, out userPackageMissionInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestBattlePointRegisterOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestBattlePointRegisterOK,
                    rmiName = RmiName_CG_RequestBattlePointRegisterOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestBattlePointRegisterOK(remote, rmiContext, battlePoint, missionResult, userPackageMissionInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBattlePointRegisterOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestBattlePointRegisterOK,
                    rmiName = RmiName_CG_RequestBattlePointRegisterOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestSkinTranscendOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserSkin targetSkin;
            CommonPacket.Marshaler.Read(__msg, out targetSkin);
            List<ItemResultInfo> itemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out itemResultInfoList);
            PaybackEventResultInfo paybackEventresultInfo;
            CommonPacket.Marshaler.Read(__msg, out paybackEventresultInfo);
            int growthPoint;
            CommonPacket.Marshaler.Read(__msg, out growthPoint);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            List<QuestProgressInfo> questProgressInfoList;
            CommonPacket.Marshaler.Read(__msg, out questProgressInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestSkinTranscendOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestSkinTranscendOK,
                    rmiName = RmiName_CG_RequestSkinTranscendOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestSkinTranscendOK(remote, rmiContext, targetSkin, itemResultInfoList, paybackEventresultInfo, growthPoint, missionResult, questProgressInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSkinTranscendOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestSkinTranscendOK,
                    rmiName = RmiName_CG_RequestSkinTranscendOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestSkinTranscendResetOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserSkin targetSkin;
            CommonPacket.Marshaler.Read(__msg, out targetSkin);
            List<ItemResultInfo> itemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out itemResultInfoList);
            PaybackEventResultInfo paybackEventresultInfo;
            CommonPacket.Marshaler.Read(__msg, out paybackEventresultInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestSkinTranscendResetOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestSkinTranscendResetOK,
                    rmiName = RmiName_CG_RequestSkinTranscendResetOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestSkinTranscendResetOK(remote, rmiContext, targetSkin, itemResultInfoList, paybackEventresultInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSkinTranscendResetOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestSkinTranscendResetOK,
                    rmiName = RmiName_CG_RequestSkinTranscendResetOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestCostumeCraftOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<ItemResultInfo> useItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfoList);
            ItemResultInfo getImteResultInfo;
            CommonPacket.Marshaler.Read(__msg, out getImteResultInfo);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            PaybackEventResultInfo paybackEventresultInfo;
            CommonPacket.Marshaler.Read(__msg, out paybackEventresultInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestCostumeCraftOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestCostumeCraftOK,
                    rmiName = RmiName_CG_RequestCostumeCraftOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestCostumeCraftOK(remote, rmiContext, useItemResultInfoList, getImteResultInfo, missionResult, paybackEventresultInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCostumeCraftOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestCostumeCraftOK,
                    rmiName = RmiName_CG_RequestCostumeCraftOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestLimitedCostumeCheckOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            LimitedCostumeInfo removeLimitedCostumeInfo;
            CommonPacket.Marshaler.Read(__msg, out removeLimitedCostumeInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestLimitedCostumeCheckOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestLimitedCostumeCheckOK,
                    rmiName = RmiName_CG_RequestLimitedCostumeCheckOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestLimitedCostumeCheckOK(remote, rmiContext, removeLimitedCostumeInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLimitedCostumeCheckOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestLimitedCostumeCheckOK,
                    rmiName = RmiName_CG_RequestLimitedCostumeCheckOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestGetExclusiveSkillOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserSkin userSkin;
            CommonPacket.Marshaler.Read(__msg, out userSkin);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestGetExclusiveSkillOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestGetExclusiveSkillOK,
                    rmiName = RmiName_CG_RequestGetExclusiveSkillOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestGetExclusiveSkillOK(remote, rmiContext, userSkin))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGetExclusiveSkillOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestGetExclusiveSkillOK,
                    rmiName = RmiName_CG_RequestGetExclusiveSkillOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestSkinOverEvolutionStraightOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            SkinEvolutionBreakResult evolutionBreakResult;
            CommonPacket.Marshaler.Read(__msg, out evolutionBreakResult);
            PaybackEventResultInfo paybackEventresultInfo;
            CommonPacket.Marshaler.Read(__msg, out paybackEventresultInfo);
            int growthPoint;
            CommonPacket.Marshaler.Read(__msg, out growthPoint);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestSkinOverEvolutionStraightOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestSkinOverEvolutionStraightOK,
                    rmiName = RmiName_CG_RequestSkinOverEvolutionStraightOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestSkinOverEvolutionStraightOK(remote, rmiContext, evolutionBreakResult, paybackEventresultInfo, growthPoint))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSkinOverEvolutionStraightOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestSkinOverEvolutionStraightOK,
                    rmiName = RmiName_CG_RequestSkinOverEvolutionStraightOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestSkinLegendEvolutionOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            SkinEvolutionResult evolutionResult;
            CommonPacket.Marshaler.Read(__msg, out evolutionResult);
            PaybackEventResultInfo paybackEventresultInfo;
            CommonPacket.Marshaler.Read(__msg, out paybackEventresultInfo);
            int growthPoint;
            CommonPacket.Marshaler.Read(__msg, out growthPoint);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestSkinLegendEvolutionOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestSkinLegendEvolutionOK,
                    rmiName = RmiName_CG_RequestSkinLegendEvolutionOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestSkinLegendEvolutionOK(remote, rmiContext, evolutionResult, paybackEventresultInfo, growthPoint))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSkinLegendEvolutionOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestSkinLegendEvolutionOK,
                    rmiName = RmiName_CG_RequestSkinLegendEvolutionOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestCostumeCraftUpgradeOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserCostumeCraftUpgradeInfo userCostumeCraftUpgradeInfo;
            CommonPacket.Marshaler.Read(__msg, out userCostumeCraftUpgradeInfo);
            List<ItemResultInfo> useItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfoList);
            PaybackEventResultInfo paybackEventresultInfo;
            CommonPacket.Marshaler.Read(__msg, out paybackEventresultInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestCostumeCraftUpgradeOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestCostumeCraftUpgradeOK,
                    rmiName = RmiName_CG_RequestCostumeCraftUpgradeOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestCostumeCraftUpgradeOK(remote, rmiContext, userCostumeCraftUpgradeInfo, useItemResultInfoList, paybackEventresultInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCostumeCraftUpgradeOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestCostumeCraftUpgradeOK,
                    rmiName = RmiName_CG_RequestCostumeCraftUpgradeOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestSkinLevelupBonusOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserSkin targetSkin;
            CommonPacket.Marshaler.Read(__msg, out targetSkin);
            ItemResultInfo rewardItemResultInfo;
            CommonPacket.Marshaler.Read(__msg, out rewardItemResultInfo);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestSkinLevelupBonusOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestSkinLevelupBonusOK,
                    rmiName = RmiName_CG_RequestSkinLevelupBonusOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestSkinLevelupBonusOK(remote, rmiContext, targetSkin, rewardItemResultInfo, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSkinLevelupBonusOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestSkinLevelupBonusOK,
                    rmiName = RmiName_CG_RequestSkinLevelupBonusOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestSkinExceedOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserSkin targetSkin;
            CommonPacket.Marshaler.Read(__msg, out targetSkin);
            List<ItemResultInfo> useItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfoList);
            int growthPoint;
            CommonPacket.Marshaler.Read(__msg, out growthPoint);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestSkinExceedOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestSkinExceedOK,
                    rmiName = RmiName_CG_RequestSkinExceedOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestSkinExceedOK(remote, rmiContext, targetSkin, useItemResultInfoList, growthPoint, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSkinExceedOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestSkinExceedOK,
                    rmiName = RmiName_CG_RequestSkinExceedOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestMailListOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<MailInfo> mailList;
            CommonPacket.Marshaler.Read(__msg, out mailList);
            List<NoticeMailInfo> noticeMailInfoList;
            CommonPacket.Marshaler.Read(__msg, out noticeMailInfoList);
            List<NoticeMailInfo> refoundMailInfoList;
            CommonPacket.Marshaler.Read(__msg, out refoundMailInfoList);
            List<NoticeMailInfo> systemMailInfoList;
            CommonPacket.Marshaler.Read(__msg, out systemMailInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestMailListOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestMailListOK,
                    rmiName = RmiName_CG_RequestMailListOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestMailListOK(remote, rmiContext, mailList, noticeMailInfoList, refoundMailInfoList, systemMailInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestMailListOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestMailListOK,
                    rmiName = RmiName_CG_RequestMailListOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestMailConfirmOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int mailSN;
            CommonPacket.Marshaler.Read(__msg, out mailSN);
            MailHistoryInfo mailHistoryInfo;
            CommonPacket.Marshaler.Read(__msg, out mailHistoryInfo);
            ItemResultInfo itemResultInfo;
            CommonPacket.Marshaler.Read(__msg, out itemResultInfo);
            ApRewardInfo apRewardInfo;
            CommonPacket.Marshaler.Read(__msg, out apRewardInfo);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestMailConfirmOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestMailConfirmOK,
                    rmiName = RmiName_CG_RequestMailConfirmOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestMailConfirmOK(remote, rmiContext, mailSN, mailHistoryInfo, itemResultInfo, apRewardInfo, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestMailConfirmOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestMailConfirmOK,
                    rmiName = RmiName_CG_RequestMailConfirmOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestMailConfirmAllOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<int> mailSNList;
            CommonPacket.Marshaler.Read(__msg, out mailSNList);
            List<ItemResultInfo> itemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out itemResultInfoList);
            List<ApRewardInfo> apRewardInfoList;
            CommonPacket.Marshaler.Read(__msg, out apRewardInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestMailConfirmAllOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestMailConfirmAllOK,
                    rmiName = RmiName_CG_RequestMailConfirmAllOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestMailConfirmAllOK(remote, rmiContext, mailSNList, itemResultInfoList, apRewardInfoList, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestMailConfirmAllOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestMailConfirmAllOK,
                    rmiName = RmiName_CG_RequestMailConfirmAllOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestMailHistoryListOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<MailHistoryInfo> mailHistoryList;
            CommonPacket.Marshaler.Read(__msg, out mailHistoryList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestMailHistoryListOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestMailHistoryListOK,
                    rmiName = RmiName_CG_RequestMailHistoryListOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestMailHistoryListOK(remote, rmiContext, mailHistoryList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestMailHistoryListOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestMailHistoryListOK,
                    rmiName = RmiName_CG_RequestMailHistoryListOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestMailRecentlyHistoryListOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<MailHistoryInfo> mailHistoryList;
            CommonPacket.Marshaler.Read(__msg, out mailHistoryList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestMailRecentlyHistoryListOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestMailRecentlyHistoryListOK,
                    rmiName = RmiName_CG_RequestMailRecentlyHistoryListOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestMailRecentlyHistoryListOK(remote, rmiContext, mailHistoryList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestMailRecentlyHistoryListOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestMailRecentlyHistoryListOK,
                    rmiName = RmiName_CG_RequestMailRecentlyHistoryListOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestFriendMailListOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<MailInfo> mailList;
            CommonPacket.Marshaler.Read(__msg, out mailList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendMailListOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendMailListOK,
                    rmiName = RmiName_CG_RequestFriendMailListOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestFriendMailListOK(remote, rmiContext, mailList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendMailListOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendMailListOK,
                    rmiName = RmiName_CG_RequestFriendMailListOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestFriendMailConfirmOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int mailSN;
            CommonPacket.Marshaler.Read(__msg, out mailSN);
            ItemResultInfo itemResultInfo;
            CommonPacket.Marshaler.Read(__msg, out itemResultInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendMailConfirmOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendMailConfirmOK,
                    rmiName = RmiName_CG_RequestFriendMailConfirmOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestFriendMailConfirmOK(remote, rmiContext, mailSN, itemResultInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendMailConfirmOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendMailConfirmOK,
                    rmiName = RmiName_CG_RequestFriendMailConfirmOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestFriendMailConfirmAllOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<int> confirmMailSNList;
            CommonPacket.Marshaler.Read(__msg, out confirmMailSNList);
            ItemResultInfo itemResultInfo;
            CommonPacket.Marshaler.Read(__msg, out itemResultInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendMailConfirmAllOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendMailConfirmAllOK,
                    rmiName = RmiName_CG_RequestFriendMailConfirmAllOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestFriendMailConfirmAllOK(remote, rmiContext, confirmMailSNList, itemResultInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendMailConfirmAllOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendMailConfirmAllOK,
                    rmiName = RmiName_CG_RequestFriendMailConfirmAllOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestNoticeMailRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int noticeMailSEQ;
            CommonPacket.Marshaler.Read(__msg, out noticeMailSEQ);
            List<ItemResultInfo> getItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfoList);
            List<ApRewardInfo> apRewardInfoList;
            CommonPacket.Marshaler.Read(__msg, out apRewardInfoList);
            NoticeMailType noticeMailType;
            CommonPacket.Marshaler.Read(__msg, out noticeMailType);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestNoticeMailRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestNoticeMailRewardOK,
                    rmiName = RmiName_CG_RequestNoticeMailRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestNoticeMailRewardOK(remote, rmiContext, noticeMailSEQ, getItemResultInfoList, apRewardInfoList, noticeMailType))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestNoticeMailRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestNoticeMailRewardOK,
                    rmiName = RmiName_CG_RequestNoticeMailRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestPackageMailListOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<PackageMailInfo> packageMailInfoList;
            CommonPacket.Marshaler.Read(__msg, out packageMailInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestPackageMailListOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestPackageMailListOK,
                    rmiName = RmiName_CG_RequestPackageMailListOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestPackageMailListOK(remote, rmiContext, packageMailInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestPackageMailListOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestPackageMailListOK,
                    rmiName = RmiName_CG_RequestPackageMailListOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestPackageMailGetOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int mailSerial;
            CommonPacket.Marshaler.Read(__msg, out mailSerial);
            int packageID;
            CommonPacket.Marshaler.Read(__msg, out packageID);
            List<ItemResultInfo> getItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfoList);
            List<ApRewardInfo> apRewardInfoList;
            CommonPacket.Marshaler.Read(__msg, out apRewardInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            List<UpgradeUserSkin> upgradeSkinResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out upgradeSkinResultInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestPackageMailGetOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestPackageMailGetOK,
                    rmiName = RmiName_CG_RequestPackageMailGetOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestPackageMailGetOK(remote, rmiContext, mailSerial, packageID, getItemResultInfoList, apRewardInfoList, missionResult, upgradeSkinResultInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestPackageMailGetOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestPackageMailGetOK,
                    rmiName = RmiName_CG_RequestPackageMailGetOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestPackageMailHistoryListOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<PackageMailHistoryInfo> packageMailHistoryInfoList;
            CommonPacket.Marshaler.Read(__msg, out packageMailHistoryInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestPackageMailHistoryListOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestPackageMailHistoryListOK,
                    rmiName = RmiName_CG_RequestPackageMailHistoryListOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestPackageMailHistoryListOK(remote, rmiContext, packageMailHistoryInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestPackageMailHistoryListOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestPackageMailHistoryListOK,
                    rmiName = RmiName_CG_RequestPackageMailHistoryListOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestLevelUpPackageRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserPackageInfo packageInfo;
            CommonPacket.Marshaler.Read(__msg, out packageInfo);
            List<ItemResultInfo> getItemInfoList;
            CommonPacket.Marshaler.Read(__msg, out getItemInfoList);
            List<ApRewardInfo> apRewardInfoList;
            CommonPacket.Marshaler.Read(__msg, out apRewardInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestLevelUpPackageRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestLevelUpPackageRewardOK,
                    rmiName = RmiName_CG_RequestLevelUpPackageRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestLevelUpPackageRewardOK(remote, rmiContext, packageInfo, getItemInfoList, apRewardInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLevelUpPackageRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestLevelUpPackageRewardOK,
                    rmiName = RmiName_CG_RequestLevelUpPackageRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestLevelUpPackageRewardAllOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserPackageInfo packageInfo;
            CommonPacket.Marshaler.Read(__msg, out packageInfo);
            List<ItemResultInfo> getItemInfoList;
            CommonPacket.Marshaler.Read(__msg, out getItemInfoList);
            List<ApRewardInfo> apRewardInfoList;
            CommonPacket.Marshaler.Read(__msg, out apRewardInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestLevelUpPackageRewardAllOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestLevelUpPackageRewardAllOK,
                    rmiName = RmiName_CG_RequestLevelUpPackageRewardAllOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestLevelUpPackageRewardAllOK(remote, rmiContext, packageInfo, getItemInfoList, apRewardInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLevelUpPackageRewardAllOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestLevelUpPackageRewardAllOK,
                    rmiName = RmiName_CG_RequestLevelUpPackageRewardAllOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestAttendancePackageRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserPackageInfo packageInfo;
            CommonPacket.Marshaler.Read(__msg, out packageInfo);
            List<ItemResultInfo> getItemInfoList;
            CommonPacket.Marshaler.Read(__msg, out getItemInfoList);
            List<ApRewardInfo> apRewardInfoList;
            CommonPacket.Marshaler.Read(__msg, out apRewardInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestAttendancePackageRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestAttendancePackageRewardOK,
                    rmiName = RmiName_CG_RequestAttendancePackageRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestAttendancePackageRewardOK(remote, rmiContext, packageInfo, getItemInfoList, apRewardInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestAttendancePackageRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestAttendancePackageRewardOK,
                    rmiName = RmiName_CG_RequestAttendancePackageRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestAttendancePackageRewardAllOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserPackageInfo packageInfo;
            CommonPacket.Marshaler.Read(__msg, out packageInfo);
            List<ItemResultInfo> getItemInfoList;
            CommonPacket.Marshaler.Read(__msg, out getItemInfoList);
            List<ApRewardInfo> apRewardInfoList;
            CommonPacket.Marshaler.Read(__msg, out apRewardInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestAttendancePackageRewardAllOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestAttendancePackageRewardAllOK,
                    rmiName = RmiName_CG_RequestAttendancePackageRewardAllOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestAttendancePackageRewardAllOK(remote, rmiContext, packageInfo, getItemInfoList, apRewardInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestAttendancePackageRewardAllOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestAttendancePackageRewardAllOK,
                    rmiName = RmiName_CG_RequestAttendancePackageRewardAllOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestMailADRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<ItemResultInfo> getItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            UserADViewInfo updateUserADViewInfo;
            CommonPacket.Marshaler.Read(__msg, out updateUserADViewInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestMailADRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestMailADRewardOK,
                    rmiName = RmiName_CG_RequestMailADRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestMailADRewardOK(remote, rmiContext, getItemResultInfoList, missionResult, updateUserADViewInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestMailADRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestMailADRewardOK,
                    rmiName = RmiName_CG_RequestMailADRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestMissionProgressOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestMissionProgressOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestMissionProgressOK,
                    rmiName = RmiName_CG_RequestMissionProgressOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestMissionProgressOK(remote, rmiContext, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestMissionProgressOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestMissionProgressOK,
                    rmiName = RmiName_CG_RequestMissionProgressOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestMissionClearOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            MissionClearResultInfo missionClearResultInfo;
            CommonPacket.Marshaler.Read(__msg, out missionClearResultInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestMissionClearOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestMissionClearOK,
                    rmiName = RmiName_CG_RequestMissionClearOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestMissionClearOK(remote, rmiContext, missionClearResultInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestMissionClearOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestMissionClearOK,
                    rmiName = RmiName_CG_RequestMissionClearOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestMissionEventClearOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            MissionClearResultInfo missionClearResultInfo;
            CommonPacket.Marshaler.Read(__msg, out missionClearResultInfo);
            List<EventMissionClearRequestInfo> missionClearList;
            CommonPacket.Marshaler.Read(__msg, out missionClearList);
            List<UpgradeUserSkin> upgradeSkinResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out upgradeSkinResultInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestMissionEventClearOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestMissionEventClearOK,
                    rmiName = RmiName_CG_RequestMissionEventClearOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestMissionEventClearOK(remote, rmiContext, missionClearResultInfo, missionClearList, upgradeSkinResultInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestMissionEventClearOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestMissionEventClearOK,
                    rmiName = RmiName_CG_RequestMissionEventClearOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestMissionGetAchievePointRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            short rewardOrder;
            CommonPacket.Marshaler.Read(__msg, out rewardOrder);
            ItemResultInfo achievePointItemInfo;
            CommonPacket.Marshaler.Read(__msg, out achievePointItemInfo);
            ItemResultInfo rewardItemInfo;
            CommonPacket.Marshaler.Read(__msg, out rewardItemInfo);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestMissionGetAchievePointRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestMissionGetAchievePointRewardOK,
                    rmiName = RmiName_CG_RequestMissionGetAchievePointRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestMissionGetAchievePointRewardOK(remote, rmiContext, rewardOrder, achievePointItemInfo, rewardItemInfo, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestMissionGetAchievePointRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestMissionGetAchievePointRewardOK,
                    rmiName = RmiName_CG_RequestMissionGetAchievePointRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestQuestStartOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            QuestProgressInfo startedQuestProgressInfo;
            CommonPacket.Marshaler.Read(__msg, out startedQuestProgressInfo);
            ItemResultInfo questItemInfo;
            CommonPacket.Marshaler.Read(__msg, out questItemInfo);
            List<QuestProgressInfo> questProgressInfoList;
            CommonPacket.Marshaler.Read(__msg, out questProgressInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestQuestStartOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestQuestStartOK,
                    rmiName = RmiName_CG_RequestQuestStartOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestQuestStartOK(remote, rmiContext, startedQuestProgressInfo, questItemInfo, questProgressInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestQuestStartOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestQuestStartOK,
                    rmiName = RmiName_CG_RequestQuestStartOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestQuestProgressOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            QuestProgressInfo progressInfo;
            CommonPacket.Marshaler.Read(__msg, out progressInfo);
            List<ItemResultInfo> getItemInfoList;
            CommonPacket.Marshaler.Read(__msg, out getItemInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestQuestProgressOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestQuestProgressOK,
                    rmiName = RmiName_CG_RequestQuestProgressOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestQuestProgressOK(remote, rmiContext, progressInfo, getItemInfoList, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestQuestProgressOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestQuestProgressOK,
                    rmiName = RmiName_CG_RequestQuestProgressOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestQuestClearOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            QuestClearResultInfo clearResultInfo;
            CommonPacket.Marshaler.Read(__msg, out clearResultInfo);
            List<UserPackageMissionInfo> userPackageMissionInfoList;
            CommonPacket.Marshaler.Read(__msg, out userPackageMissionInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestQuestClearOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestQuestClearOK,
                    rmiName = RmiName_CG_RequestQuestClearOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestQuestClearOK(remote, rmiContext, clearResultInfo, userPackageMissionInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestQuestClearOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestQuestClearOK,
                    rmiName = RmiName_CG_RequestQuestClearOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestQuestRemoveOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int removedQuestID;
            CommonPacket.Marshaler.Read(__msg, out removedQuestID);
            ItemResultInfo removeItemResultInfo;
            CommonPacket.Marshaler.Read(__msg, out removeItemResultInfo);
            BasePointInfo basepointInfo;
            CommonPacket.Marshaler.Read(__msg, out basepointInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestQuestRemoveOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestQuestRemoveOK,
                    rmiName = RmiName_CG_RequestQuestRemoveOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestQuestRemoveOK(remote, rmiContext, removedQuestID, removeItemResultInfo, basepointInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestQuestRemoveOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestQuestRemoveOK,
                    rmiName = RmiName_CG_RequestQuestRemoveOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestDirectSelectorRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int id;
            CommonPacket.Marshaler.Read(__msg, out id);
            int heroID;
            CommonPacket.Marshaler.Read(__msg, out heroID);
            int getFellowshipExp;
            CommonPacket.Marshaler.Read(__msg, out getFellowshipExp);
            int totalFellowshipExp;
            CommonPacket.Marshaler.Read(__msg, out totalFellowshipExp);
            ItemResultInfo resultItemInfo;
            CommonPacket.Marshaler.Read(__msg, out resultItemInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestDirectSelectorRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestDirectSelectorRewardOK,
                    rmiName = RmiName_CG_RequestDirectSelectorRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestDirectSelectorRewardOK(remote, rmiContext, id, heroID, getFellowshipExp, totalFellowshipExp, resultItemInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDirectSelectorRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestDirectSelectorRewardOK,
                    rmiName = RmiName_CG_RequestDirectSelectorRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestQuestChapterClearOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            QuestChapterClearInfo resultChapterClearInfo;
            CommonPacket.Marshaler.Read(__msg, out resultChapterClearInfo);
            List<ItemResultInfo> rewardItemInfoList;
            CommonPacket.Marshaler.Read(__msg, out rewardItemInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestQuestChapterClearOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestQuestChapterClearOK,
                    rmiName = RmiName_CG_RequestQuestChapterClearOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestQuestChapterClearOK(remote, rmiContext, resultChapterClearInfo, rewardItemInfoList, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestQuestChapterClearOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestQuestChapterClearOK,
                    rmiName = RmiName_CG_RequestQuestChapterClearOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventQuestClearOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            EventQuestClearResultInfo clearResultInfo;
            CommonPacket.Marshaler.Read(__msg, out clearResultInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventQuestClearOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventQuestClearOK,
                    rmiName = RmiName_CG_RequestEventQuestClearOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventQuestClearOK(remote, rmiContext, clearResultInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventQuestClearOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventQuestClearOK,
                    rmiName = RmiName_CG_RequestEventQuestClearOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestAnotherQuestClearOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            AnotherQuestClearResultInfo clearResultInfo;
            CommonPacket.Marshaler.Read(__msg, out clearResultInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestAnotherQuestClearOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestAnotherQuestClearOK,
                    rmiName = RmiName_CG_RequestAnotherQuestClearOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestAnotherQuestClearOK(remote, rmiContext, clearResultInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestAnotherQuestClearOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestAnotherQuestClearOK,
                    rmiName = RmiName_CG_RequestAnotherQuestClearOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestNorthQuestClearOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            NorthQuestClearResultInfo clearResultInfo;
            CommonPacket.Marshaler.Read(__msg, out clearResultInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestNorthQuestClearOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestNorthQuestClearOK,
                    rmiName = RmiName_CG_RequestNorthQuestClearOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestNorthQuestClearOK(remote, rmiContext, clearResultInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestNorthQuestClearOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestNorthQuestClearOK,
                    rmiName = RmiName_CG_RequestNorthQuestClearOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestQuestGuideListAllClearRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            ItemResultInfo rewardItemInfo;
            CommonPacket.Marshaler.Read(__msg, out rewardItemInfo);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestQuestGuideListAllClearRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestQuestGuideListAllClearRewardOK,
                    rmiName = RmiName_CG_RequestQuestGuideListAllClearRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestQuestGuideListAllClearRewardOK(remote, rmiContext, rewardItemInfo, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestQuestGuideListAllClearRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestQuestGuideListAllClearRewardOK,
                    rmiName = RmiName_CG_RequestQuestGuideListAllClearRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestQuestGuideListStepStartOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            bool isGuideListRewarded;
            CommonPacket.Marshaler.Read(__msg, out isGuideListRewarded);
            short guideListStep;
            CommonPacket.Marshaler.Read(__msg, out guideListStep);
            List<QuestProgressInfo> questProgressInfoList;
            CommonPacket.Marshaler.Read(__msg, out questProgressInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestQuestGuideListStepStartOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestQuestGuideListStepStartOK,
                    rmiName = RmiName_CG_RequestQuestGuideListStepStartOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestQuestGuideListStepStartOK(remote, rmiContext, isGuideListRewarded, guideListStep, questProgressInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestQuestGuideListStepStartOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestQuestGuideListStepStartOK,
                    rmiName = RmiName_CG_RequestQuestGuideListStepStartOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestQuestGuideListStepClearOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            bool isGuideListRewarded;
            CommonPacket.Marshaler.Read(__msg, out isGuideListRewarded);
            List<ItemResultInfo> rewardItemInfoList;
            CommonPacket.Marshaler.Read(__msg, out rewardItemInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            List<UpgradeUserSkin> upgradeSkinResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out upgradeSkinResultInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestQuestGuideListStepClearOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestQuestGuideListStepClearOK,
                    rmiName = RmiName_CG_RequestQuestGuideListStepClearOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestQuestGuideListStepClearOK(remote, rmiContext, isGuideListRewarded, rewardItemInfoList, missionResult, upgradeSkinResultInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestQuestGuideListStepClearOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestQuestGuideListStepClearOK,
                    rmiName = RmiName_CG_RequestQuestGuideListStepClearOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestDisasterQuestClearOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            DisasterQuestClearResultInfo clearResultInfo;
            CommonPacket.Marshaler.Read(__msg, out clearResultInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestDisasterQuestClearOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestDisasterQuestClearOK,
                    rmiName = RmiName_CG_RequestDisasterQuestClearOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestDisasterQuestClearOK(remote, rmiContext, clearResultInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDisasterQuestClearOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestDisasterQuestClearOK,
                    rmiName = RmiName_CG_RequestDisasterQuestClearOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestLobbyVRSearchOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int interactiveVRID;
            CommonPacket.Marshaler.Read(__msg, out interactiveVRID);
            ItemResultInfo itemResultinfoList;
            CommonPacket.Marshaler.Read(__msg, out itemResultinfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyVRSearchOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestLobbyVRSearchOK,
                    rmiName = RmiName_CG_RequestLobbyVRSearchOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestLobbyVRSearchOK(remote, rmiContext, interactiveVRID, itemResultinfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyVRSearchOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestLobbyVRSearchOK,
                    rmiName = RmiName_CG_RequestLobbyVRSearchOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestLobbyVRHelbramOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            ApRewardInfo apUpdateInfo;
            CommonPacket.Marshaler.Read(__msg, out apUpdateInfo);
            byte lobbyHelbramDailyCount;
            CommonPacket.Marshaler.Read(__msg, out lobbyHelbramDailyCount);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyVRHelbramOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestLobbyVRHelbramOK,
                    rmiName = RmiName_CG_RequestLobbyVRHelbramOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestLobbyVRHelbramOK(remote, rmiContext, apUpdateInfo, lobbyHelbramDailyCount))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyVRHelbramOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestLobbyVRHelbramOK,
                    rmiName = RmiName_CG_RequestLobbyVRHelbramOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestLobbyNpcSkinOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserNpc userNpcInfo;
            CommonPacket.Marshaler.Read(__msg, out userNpcInfo);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyNpcSkinOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestLobbyNpcSkinOK,
                    rmiName = RmiName_CG_RequestLobbyNpcSkinOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestLobbyNpcSkinOK(remote, rmiContext, userNpcInfo, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyNpcSkinOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestLobbyNpcSkinOK,
                    rmiName = RmiName_CG_RequestLobbyNpcSkinOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestLobbyNpcGiftOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            NpcGiftResult giftResult;
            CommonPacket.Marshaler.Read(__msg, out giftResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyNpcGiftOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestLobbyNpcGiftOK,
                    rmiName = RmiName_CG_RequestLobbyNpcGiftOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestLobbyNpcGiftOK(remote, rmiContext, giftResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyNpcGiftOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestLobbyNpcGiftOK,
                    rmiName = RmiName_CG_RequestLobbyNpcGiftOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestLobbyKingAmberOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            ItemResultInfo useItemResultInfo;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfo);
            ItemResultInfo itemResultInfo;
            CommonPacket.Marshaler.Read(__msg, out itemResultInfo);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            List<QuestProgressInfo> questProgressInfoList;
            CommonPacket.Marshaler.Read(__msg, out questProgressInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyKingAmberOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestLobbyKingAmberOK,
                    rmiName = RmiName_CG_RequestLobbyKingAmberOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestLobbyKingAmberOK(remote, rmiContext, useItemResultInfo, itemResultInfo, missionResult, questProgressInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyKingAmberOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestLobbyKingAmberOK,
                    rmiName = RmiName_CG_RequestLobbyKingAmberOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestLobbyDropInteractiveOpenOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int npcID;
            CommonPacket.Marshaler.Read(__msg, out npcID);
            List<ItemResultInfo> getItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyDropInteractiveOpenOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestLobbyDropInteractiveOpenOK,
                    rmiName = RmiName_CG_RequestLobbyDropInteractiveOpenOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestLobbyDropInteractiveOpenOK(remote, rmiContext, npcID, getItemResultInfoList, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyDropInteractiveOpenOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestLobbyDropInteractiveOpenOK,
                    rmiName = RmiName_CG_RequestLobbyDropInteractiveOpenOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestLobbyUniqueInteractiveOpenOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int npcID;
            CommonPacket.Marshaler.Read(__msg, out npcID);
            ItemResultInfo getItemResultInfo;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfo);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyUniqueInteractiveOpenOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestLobbyUniqueInteractiveOpenOK,
                    rmiName = RmiName_CG_RequestLobbyUniqueInteractiveOpenOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestLobbyUniqueInteractiveOpenOK(remote, rmiContext, npcID, getItemResultInfo, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyUniqueInteractiveOpenOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestLobbyUniqueInteractiveOpenOK,
                    rmiName = RmiName_CG_RequestLobbyUniqueInteractiveOpenOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestLobbyNpcTalkInfoOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int guestID;
            CommonPacket.Marshaler.Read(__msg, out guestID);
            int interactiveQuestionID;
            CommonPacket.Marshaler.Read(__msg, out interactiveQuestionID);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyNpcTalkInfoOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestLobbyNpcTalkInfoOK,
                    rmiName = RmiName_CG_RequestLobbyNpcTalkInfoOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestLobbyNpcTalkInfoOK(remote, rmiContext, guestID, interactiveQuestionID, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyNpcTalkInfoOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestLobbyNpcTalkInfoOK,
                    rmiName = RmiName_CG_RequestLobbyNpcTalkInfoOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestLobbyNpcTalkChoiceOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            NpcTalkResult talkResult;
            CommonPacket.Marshaler.Read(__msg, out talkResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyNpcTalkChoiceOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestLobbyNpcTalkChoiceOK,
                    rmiName = RmiName_CG_RequestLobbyNpcTalkChoiceOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestLobbyNpcTalkChoiceOK(remote, rmiContext, talkResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyNpcTalkChoiceOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestLobbyNpcTalkChoiceOK,
                    rmiName = RmiName_CG_RequestLobbyNpcTalkChoiceOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestLobbyBarrelOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            byte barrelCount;
            CommonPacket.Marshaler.Read(__msg, out barrelCount);
            byte barrelFellowCount;
            CommonPacket.Marshaler.Read(__msg, out barrelFellowCount);
            List<ItemResultInfo> getItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfoList);
            UserNpcResult npcResult;
            CommonPacket.Marshaler.Read(__msg, out npcResult);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyBarrelOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestLobbyBarrelOK,
                    rmiName = RmiName_CG_RequestLobbyBarrelOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestLobbyBarrelOK(remote, rmiContext, barrelCount, barrelFellowCount, getItemResultInfoList, npcResult, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyBarrelOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestLobbyBarrelOK,
                    rmiName = RmiName_CG_RequestLobbyBarrelOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestLobbyBarrelRefillOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            byte barrelCount;
            CommonPacket.Marshaler.Read(__msg, out barrelCount);
            ItemResultInfo useItemResultInfo;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyBarrelRefillOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestLobbyBarrelRefillOK,
                    rmiName = RmiName_CG_RequestLobbyBarrelRefillOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestLobbyBarrelRefillOK(remote, rmiContext, barrelCount, useItemResultInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyBarrelRefillOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestLobbyBarrelRefillOK,
                    rmiName = RmiName_CG_RequestLobbyBarrelRefillOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestLobbyCleanTableOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            byte dailyCleanCount;
            CommonPacket.Marshaler.Read(__msg, out dailyCleanCount);
            ItemResultInfo getItemInfo;
            CommonPacket.Marshaler.Read(__msg, out getItemInfo);
            UserNpcResult npcResult;
            CommonPacket.Marshaler.Read(__msg, out npcResult);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyCleanTableOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestLobbyCleanTableOK,
                    rmiName = RmiName_CG_RequestLobbyCleanTableOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestLobbyCleanTableOK(remote, rmiContext, dailyCleanCount, getItemInfo, npcResult, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyCleanTableOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestLobbyCleanTableOK,
                    rmiName = RmiName_CG_RequestLobbyCleanTableOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestLobbyServeBeerOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            byte dailyServeCount;
            CommonPacket.Marshaler.Read(__msg, out dailyServeCount);
            ItemResultInfo getItemInfo;
            CommonPacket.Marshaler.Read(__msg, out getItemInfo);
            UserNpcResult npcResult;
            CommonPacket.Marshaler.Read(__msg, out npcResult);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyServeBeerOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestLobbyServeBeerOK,
                    rmiName = RmiName_CG_RequestLobbyServeBeerOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestLobbyServeBeerOK(remote, rmiContext, dailyServeCount, getItemInfo, npcResult, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyServeBeerOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestLobbyServeBeerOK,
                    rmiName = RmiName_CG_RequestLobbyServeBeerOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestLobbyPlayJukeboxOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            byte dailyPlayCount;
            CommonPacket.Marshaler.Read(__msg, out dailyPlayCount);
            ItemResultInfo getItemInfo;
            CommonPacket.Marshaler.Read(__msg, out getItemInfo);
            UserNpcResult npcResult;
            CommonPacket.Marshaler.Read(__msg, out npcResult);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            int playMusicID;
            CommonPacket.Marshaler.Read(__msg, out playMusicID);
            byte musicInstrument;
            CommonPacket.Marshaler.Read(__msg, out musicInstrument);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyPlayJukeboxOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestLobbyPlayJukeboxOK,
                    rmiName = RmiName_CG_RequestLobbyPlayJukeboxOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestLobbyPlayJukeboxOK(remote, rmiContext, dailyPlayCount, getItemInfo, npcResult, missionResult, playMusicID, musicInstrument))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyPlayJukeboxOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestLobbyPlayJukeboxOK,
                    rmiName = RmiName_CG_RequestLobbyPlayJukeboxOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestLobbyElizabethTouchOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            byte dailyTouchCount;
            CommonPacket.Marshaler.Read(__msg, out dailyTouchCount);
            ItemResultInfo getItemInfo;
            CommonPacket.Marshaler.Read(__msg, out getItemInfo);
            UserNpcResult npcResult;
            CommonPacket.Marshaler.Read(__msg, out npcResult);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyElizabethTouchOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestLobbyElizabethTouchOK,
                    rmiName = RmiName_CG_RequestLobbyElizabethTouchOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestLobbyElizabethTouchOK(remote, rmiContext, dailyTouchCount, getItemInfo, npcResult, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyElizabethTouchOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestLobbyElizabethTouchOK,
                    rmiName = RmiName_CG_RequestLobbyElizabethTouchOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestLobbyHawkAngerOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            byte dailyAngerCount;
            CommonPacket.Marshaler.Read(__msg, out dailyAngerCount);
            UserNpcResult npcResult;
            CommonPacket.Marshaler.Read(__msg, out npcResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyHawkAngerOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestLobbyHawkAngerOK,
                    rmiName = RmiName_CG_RequestLobbyHawkAngerOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestLobbyHawkAngerOK(remote, rmiContext, dailyAngerCount, npcResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyHawkAngerOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestLobbyHawkAngerOK,
                    rmiName = RmiName_CG_RequestLobbyHawkAngerOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestAttendanceRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            AttendanceResult attendanceResult;
            CommonPacket.Marshaler.Read(__msg, out attendanceResult);
            List<UserPackageMissionInfo> userPackageMissionInfoList;
            CommonPacket.Marshaler.Read(__msg, out userPackageMissionInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestAttendanceRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestAttendanceRewardOK,
                    rmiName = RmiName_CG_RequestAttendanceRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestAttendanceRewardOK(remote, rmiContext, attendanceResult, userPackageMissionInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestAttendanceRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestAttendanceRewardOK,
                    rmiName = RmiName_CG_RequestAttendanceRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestAttendanceEventRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            EventAttendanceResult eventAttendanceResult;
            CommonPacket.Marshaler.Read(__msg, out eventAttendanceResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestAttendanceEventRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestAttendanceEventRewardOK,
                    rmiName = RmiName_CG_RequestAttendanceEventRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestAttendanceEventRewardOK(remote, rmiContext, eventAttendanceResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestAttendanceEventRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestAttendanceEventRewardOK,
                    rmiName = RmiName_CG_RequestAttendanceEventRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestCookingStartOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            CookingResult cookingResult;
            CommonPacket.Marshaler.Read(__msg, out cookingResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestCookingStartOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestCookingStartOK,
                    rmiName = RmiName_CG_RequestCookingStartOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestCookingStartOK(remote, rmiContext, cookingResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCookingStartOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestCookingStartOK,
                    rmiName = RmiName_CG_RequestCookingStartOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestRecipeActiveOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserRecipeInfo userRecipeInfo;
            CommonPacket.Marshaler.Read(__msg, out userRecipeInfo);
            ItemResultInfo useItemResultInfo;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfo);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            List<QuestProgressInfo> questProgressInfoList;
            CommonPacket.Marshaler.Read(__msg, out questProgressInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestRecipeActiveOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestRecipeActiveOK,
                    rmiName = RmiName_CG_RequestRecipeActiveOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestRecipeActiveOK(remote, rmiContext, userRecipeInfo, useItemResultInfo, missionResult, questProgressInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestRecipeActiveOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestRecipeActiveOK,
                    rmiName = RmiName_CG_RequestRecipeActiveOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestCookingRecipeOrderInfoOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<RecipeOrderInfo> recipeOrderInfoList;
            CommonPacket.Marshaler.Read(__msg, out recipeOrderInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestCookingRecipeOrderInfoOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestCookingRecipeOrderInfoOK,
                    rmiName = RmiName_CG_RequestCookingRecipeOrderInfoOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestCookingRecipeOrderInfoOK(remote, rmiContext, recipeOrderInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCookingRecipeOrderInfoOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestCookingRecipeOrderInfoOK,
                    rmiName = RmiName_CG_RequestCookingRecipeOrderInfoOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestCookingRecipeOrderOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            RecipeOrderInfo recipeOrderInfo;
            CommonPacket.Marshaler.Read(__msg, out recipeOrderInfo);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            List<QuestProgressInfo> questProgressInfoList;
            CommonPacket.Marshaler.Read(__msg, out questProgressInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestCookingRecipeOrderOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestCookingRecipeOrderOK,
                    rmiName = RmiName_CG_RequestCookingRecipeOrderOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestCookingRecipeOrderOK(remote, rmiContext, recipeOrderInfo, missionResult, questProgressInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCookingRecipeOrderOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestCookingRecipeOrderOK,
                    rmiName = RmiName_CG_RequestCookingRecipeOrderOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestCookingRecipeDisorderOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            byte SlotIndex;
            CommonPacket.Marshaler.Read(__msg, out SlotIndex);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestCookingRecipeDisorderOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestCookingRecipeDisorderOK,
                    rmiName = RmiName_CG_RequestCookingRecipeDisorderOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestCookingRecipeDisorderOK(remote, rmiContext, SlotIndex))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCookingRecipeDisorderOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestCookingRecipeDisorderOK,
                    rmiName = RmiName_CG_RequestCookingRecipeDisorderOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestCookingRecipeCollectOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            LobbyCollectResult collectResult;
            CommonPacket.Marshaler.Read(__msg, out collectResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestCookingRecipeCollectOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestCookingRecipeCollectOK,
                    rmiName = RmiName_CG_RequestCookingRecipeCollectOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestCookingRecipeCollectOK(remote, rmiContext, collectResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCookingRecipeCollectOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestCookingRecipeCollectOK,
                    rmiName = RmiName_CG_RequestCookingRecipeCollectOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestCookingRecipeCollectOneSlotOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            RecipeOrderInfo recipeOrderInfo;
            CommonPacket.Marshaler.Read(__msg, out recipeOrderInfo);
            LobbyCollectResult collectResult;
            CommonPacket.Marshaler.Read(__msg, out collectResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestCookingRecipeCollectOneSlotOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestCookingRecipeCollectOneSlotOK,
                    rmiName = RmiName_CG_RequestCookingRecipeCollectOneSlotOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestCookingRecipeCollectOneSlotOK(remote, rmiContext, recipeOrderInfo, collectResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCookingRecipeCollectOneSlotOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestCookingRecipeCollectOneSlotOK,
                    rmiName = RmiName_CG_RequestCookingRecipeCollectOneSlotOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestCookingUseCookingBuffOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            FoodBuffInfo foodBuffInfo;
            CommonPacket.Marshaler.Read(__msg, out foodBuffInfo);
            ItemResultInfo itemResultInfo;
            CommonPacket.Marshaler.Read(__msg, out itemResultInfo);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            List<QuestProgressInfo> questProgressInfoList;
            CommonPacket.Marshaler.Read(__msg, out questProgressInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestCookingUseCookingBuffOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestCookingUseCookingBuffOK,
                    rmiName = RmiName_CG_RequestCookingUseCookingBuffOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestCookingUseCookingBuffOK(remote, rmiContext, foodBuffInfo, itemResultInfo, missionResult, questProgressInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCookingUseCookingBuffOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestCookingUseCookingBuffOK,
                    rmiName = RmiName_CG_RequestCookingUseCookingBuffOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestGuestInfoOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            LobbyGuestInfo lobbyGuestInfo;
            CommonPacket.Marshaler.Read(__msg, out lobbyGuestInfo);
            UserNpc currentNpcInfo;
            CommonPacket.Marshaler.Read(__msg, out currentNpcInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuestInfoOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestGuestInfoOK,
                    rmiName = RmiName_CG_RequestGuestInfoOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestGuestInfoOK(remote, rmiContext, lobbyGuestInfo, currentNpcInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuestInfoOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestGuestInfoOK,
                    rmiName = RmiName_CG_RequestGuestInfoOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestGuestChangeOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int guestSlotIndex;
            CommonPacket.Marshaler.Read(__msg, out guestSlotIndex);
            List<int> guestHeroList;
            CommonPacket.Marshaler.Read(__msg, out guestHeroList);
            List<ItemResultInfo> useItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfoList);
            PaybackEventResultInfo paybackEventResultInfo;
            CommonPacket.Marshaler.Read(__msg, out paybackEventResultInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuestChangeOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestGuestChangeOK,
                    rmiName = RmiName_CG_RequestGuestChangeOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestGuestChangeOK(remote, rmiContext, guestSlotIndex, guestHeroList, useItemResultInfoList, paybackEventResultInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuestChangeOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestGuestChangeOK,
                    rmiName = RmiName_CG_RequestGuestChangeOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestGuestChangeTargetOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int guestSlotIndex;
            CommonPacket.Marshaler.Read(__msg, out guestSlotIndex);
            int GuestID;
            CommonPacket.Marshaler.Read(__msg, out GuestID);
            byte inviteSpecialGuestCount;
            CommonPacket.Marshaler.Read(__msg, out inviteSpecialGuestCount);
            List<ItemResultInfo> useItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfoList);
            PaybackEventResultInfo paybackEventResultInfo;
            CommonPacket.Marshaler.Read(__msg, out paybackEventResultInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuestChangeTargetOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestGuestChangeTargetOK,
                    rmiName = RmiName_CG_RequestGuestChangeTargetOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestGuestChangeTargetOK(remote, rmiContext, guestSlotIndex, GuestID, inviteSpecialGuestCount, useItemResultInfoList, paybackEventResultInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuestChangeTargetOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestGuestChangeTargetOK,
                    rmiName = RmiName_CG_RequestGuestChangeTargetOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestGuestTalkOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            NpcTalkResult talkResult;
            CommonPacket.Marshaler.Read(__msg, out talkResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuestTalkOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestGuestTalkOK,
                    rmiName = RmiName_CG_RequestGuestTalkOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestGuestTalkOK(remote, rmiContext, talkResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuestTalkOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestGuestTalkOK,
                    rmiName = RmiName_CG_RequestGuestTalkOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestGuestGiftOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            NpcGiftResult giftResult;
            CommonPacket.Marshaler.Read(__msg, out giftResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuestGiftOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestGuestGiftOK,
                    rmiName = RmiName_CG_RequestGuestGiftOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestGuestGiftOK(remote, rmiContext, giftResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuestGiftOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestGuestGiftOK,
                    rmiName = RmiName_CG_RequestGuestGiftOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestBirthdayNpcInfoOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserNpc userNpcInfo;
            CommonPacket.Marshaler.Read(__msg, out userNpcInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestBirthdayNpcInfoOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestBirthdayNpcInfoOK,
                    rmiName = RmiName_CG_RequestBirthdayNpcInfoOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestBirthdayNpcInfoOK(remote, rmiContext, userNpcInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBirthdayNpcInfoOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestBirthdayNpcInfoOK,
                    rmiName = RmiName_CG_RequestBirthdayNpcInfoOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestRestRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            ItemResultInfo useItemResultInfo;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestRestRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestRestRewardOK,
                    rmiName = RmiName_CG_RequestRestRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestRestRewardOK(remote, rmiContext, useItemResultInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestRestRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestRestRewardOK,
                    rmiName = RmiName_CG_RequestRestRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestAttendanceFortuneEventRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            short rewardIndex;
            CommonPacket.Marshaler.Read(__msg, out rewardIndex);
            EventAttendanceResult eventAttendanceResult;
            CommonPacket.Marshaler.Read(__msg, out eventAttendanceResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestAttendanceFortuneEventRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestAttendanceFortuneEventRewardOK,
                    rmiName = RmiName_CG_RequestAttendanceFortuneEventRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestAttendanceFortuneEventRewardOK(remote, rmiContext, rewardIndex, eventAttendanceResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestAttendanceFortuneEventRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestAttendanceFortuneEventRewardOK,
                    rmiName = RmiName_CG_RequestAttendanceFortuneEventRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventCookingStartOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            EventCookingResult cookingResult;
            CommonPacket.Marshaler.Read(__msg, out cookingResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventCookingStartOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventCookingStartOK,
                    rmiName = RmiName_CG_RequestEventCookingStartOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventCookingStartOK(remote, rmiContext, cookingResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventCookingStartOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventCookingStartOK,
                    rmiName = RmiName_CG_RequestEventCookingStartOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventRecipeActiveOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserEventRecipeInfo eventRecipeInfo;
            CommonPacket.Marshaler.Read(__msg, out eventRecipeInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventRecipeActiveOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventRecipeActiveOK,
                    rmiName = RmiName_CG_RequestEventRecipeActiveOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventRecipeActiveOK(remote, rmiContext, eventRecipeInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventRecipeActiveOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventRecipeActiveOK,
                    rmiName = RmiName_CG_RequestEventRecipeActiveOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestLobbySetVisualTypeOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            LobbyVisualType lobbyVisualType;
            CommonPacket.Marshaler.Read(__msg, out lobbyVisualType);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbySetVisualTypeOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestLobbySetVisualTypeOK,
                    rmiName = RmiName_CG_RequestLobbySetVisualTypeOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestLobbySetVisualTypeOK(remote, rmiContext, lobbyVisualType))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbySetVisualTypeOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestLobbySetVisualTypeOK,
                    rmiName = RmiName_CG_RequestLobbySetVisualTypeOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestLobbySetAttendanceHeroOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int attendanceHeroID;
            CommonPacket.Marshaler.Read(__msg, out attendanceHeroID);
            int activeAttendanceHeroID;
            CommonPacket.Marshaler.Read(__msg, out activeAttendanceHeroID);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbySetAttendanceHeroOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestLobbySetAttendanceHeroOK,
                    rmiName = RmiName_CG_RequestLobbySetAttendanceHeroOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestLobbySetAttendanceHeroOK(remote, rmiContext, attendanceHeroID, activeAttendanceHeroID))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbySetAttendanceHeroOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestLobbySetAttendanceHeroOK,
                    rmiName = RmiName_CG_RequestLobbySetAttendanceHeroOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestBasePointGoldDonationOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            BasePointInfo basePointInfo;
            CommonPacket.Marshaler.Read(__msg, out basePointInfo);
            ItemResultInfo goldResultInfo;
            CommonPacket.Marshaler.Read(__msg, out goldResultInfo);
            List<ItemResultInfo> rewardResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out rewardResultInfoList);
            UserBuffInfo userBuffInfo;
            CommonPacket.Marshaler.Read(__msg, out userBuffInfo);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            List<QuestProgressInfo> questProgressInfoList;
            CommonPacket.Marshaler.Read(__msg, out questProgressInfoList);
            PaybackEventResultInfo paybackEventresultInfo;
            CommonPacket.Marshaler.Read(__msg, out paybackEventresultInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestBasePointGoldDonationOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestBasePointGoldDonationOK,
                    rmiName = RmiName_CG_RequestBasePointGoldDonationOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestBasePointGoldDonationOK(remote, rmiContext, basePointInfo, goldResultInfo, rewardResultInfoList, userBuffInfo, missionResult, questProgressInfoList, paybackEventresultInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBasePointGoldDonationOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestBasePointGoldDonationOK,
                    rmiName = RmiName_CG_RequestBasePointGoldDonationOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestBasePointSetTriggerOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int triggerID;
            CommonPacket.Marshaler.Read(__msg, out triggerID);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestBasePointSetTriggerOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestBasePointSetTriggerOK,
                    rmiName = RmiName_CG_RequestBasePointSetTriggerOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestBasePointSetTriggerOK(remote, rmiContext, triggerID, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBasePointSetTriggerOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestBasePointSetTriggerOK,
                    rmiName = RmiName_CG_RequestBasePointSetTriggerOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestBasePointDropInteractiveOpenOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int npcID;
            CommonPacket.Marshaler.Read(__msg, out npcID);
            List<ItemResultInfo> getItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestBasePointDropInteractiveOpenOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestBasePointDropInteractiveOpenOK,
                    rmiName = RmiName_CG_RequestBasePointDropInteractiveOpenOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestBasePointDropInteractiveOpenOK(remote, rmiContext, npcID, getItemResultInfoList, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBasePointDropInteractiveOpenOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestBasePointDropInteractiveOpenOK,
                    rmiName = RmiName_CG_RequestBasePointDropInteractiveOpenOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestBasePointUniqueInteractiveOpenOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int npcID;
            CommonPacket.Marshaler.Read(__msg, out npcID);
            ItemResultInfo getItemResultInfo;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfo);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestBasePointUniqueInteractiveOpenOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestBasePointUniqueInteractiveOpenOK,
                    rmiName = RmiName_CG_RequestBasePointUniqueInteractiveOpenOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestBasePointUniqueInteractiveOpenOK(remote, rmiContext, npcID, getItemResultInfo, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBasePointUniqueInteractiveOpenOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestBasePointUniqueInteractiveOpenOK,
                    rmiName = RmiName_CG_RequestBasePointUniqueInteractiveOpenOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestBasePointDailyRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int basepointAreaIndex;
            CommonPacket.Marshaler.Read(__msg, out basepointAreaIndex);
            int basepointDailyRewardValue;
            CommonPacket.Marshaler.Read(__msg, out basepointDailyRewardValue);
            List<ItemResultInfo> getItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestBasePointDailyRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestBasePointDailyRewardOK,
                    rmiName = RmiName_CG_RequestBasePointDailyRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestBasePointDailyRewardOK(remote, rmiContext, basepointAreaIndex, basepointDailyRewardValue, getItemResultInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBasePointDailyRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestBasePointDailyRewardOK,
                    rmiName = RmiName_CG_RequestBasePointDailyRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestBasePointDonationEventRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<ItemResultInfo> rewardItemInfoList;
            CommonPacket.Marshaler.Read(__msg, out rewardItemInfoList);
            UserDonationEventInfo donationEventInfo;
            CommonPacket.Marshaler.Read(__msg, out donationEventInfo);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestBasePointDonationEventRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestBasePointDonationEventRewardOK,
                    rmiName = RmiName_CG_RequestBasePointDonationEventRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestBasePointDonationEventRewardOK(remote, rmiContext, rewardItemInfoList, donationEventInfo, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBasePointDonationEventRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestBasePointDonationEventRewardOK,
                    rmiName = RmiName_CG_RequestBasePointDonationEventRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestBasePointDonationInfoOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int basepointID;
            CommonPacket.Marshaler.Read(__msg, out basepointID);
            int overDonationValue;
            CommonPacket.Marshaler.Read(__msg, out overDonationValue);
            UserDonationEventInfo userDonationEventInfo;
            CommonPacket.Marshaler.Read(__msg, out userDonationEventInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestBasePointDonationInfoOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestBasePointDonationInfoOK,
                    rmiName = RmiName_CG_RequestBasePointDonationInfoOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestBasePointDonationInfoOK(remote, rmiContext, basepointID, overDonationValue, userDonationEventInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBasePointDonationInfoOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestBasePointDonationInfoOK,
                    rmiName = RmiName_CG_RequestBasePointDonationInfoOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestBasePointEventGoldDonationOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            BasePointInfo basePointInfo;
            CommonPacket.Marshaler.Read(__msg, out basePointInfo);
            ItemResultInfo goldResultInfo;
            CommonPacket.Marshaler.Read(__msg, out goldResultInfo);
            List<ItemResultInfo> rewardResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out rewardResultInfoList);
            UserBuffInfo userBuffInfo;
            CommonPacket.Marshaler.Read(__msg, out userBuffInfo);
            UserDonationEventInfo donationEventInfo;
            CommonPacket.Marshaler.Read(__msg, out donationEventInfo);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            List<QuestProgressInfo> questProgressInfoList;
            CommonPacket.Marshaler.Read(__msg, out questProgressInfoList);
            PaybackEventResultInfo paybackEventresultInfo;
            CommonPacket.Marshaler.Read(__msg, out paybackEventresultInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestBasePointEventGoldDonationOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestBasePointEventGoldDonationOK,
                    rmiName = RmiName_CG_RequestBasePointEventGoldDonationOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestBasePointEventGoldDonationOK(remote, rmiContext, basePointInfo, goldResultInfo, rewardResultInfoList, userBuffInfo, donationEventInfo, missionResult, questProgressInfoList, paybackEventresultInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBasePointEventGoldDonationOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestBasePointEventGoldDonationOK,
                    rmiName = RmiName_CG_RequestBasePointEventGoldDonationOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventBasepointInfoOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            EventBasepointInfo eventBasepointInfo;
            CommonPacket.Marshaler.Read(__msg, out eventBasepointInfo);
            BasePointRefreshInfo basePointRefreshInfo;
            CommonPacket.Marshaler.Read(__msg, out basePointRefreshInfo);
            List<QuestProgressInfo> questProgressInfoList;
            CommonPacket.Marshaler.Read(__msg, out questProgressInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventBasepointInfoOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventBasepointInfoOK,
                    rmiName = RmiName_CG_RequestEventBasepointInfoOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventBasepointInfoOK(remote, rmiContext, eventBasepointInfo, basePointRefreshInfo, questProgressInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventBasepointInfoOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventBasepointInfoOK,
                    rmiName = RmiName_CG_RequestEventBasepointInfoOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_GC_NotifyDestroyInvite(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserProfileInfo hostInfo;
            CommonPacket.Marshaler.Read(__msg, out hostInfo);
            DestroyClientSendRoomInfo invitedRoomInfo;
            CommonPacket.Marshaler.Read(__msg, out invitedRoomInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_GC_NotifyDestroyInvite);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.GC_NotifyDestroyInvite,
                    rmiName = RmiName_GC_NotifyDestroyInvite,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.GC_NotifyDestroyInvite(remote, rmiContext, hostInfo, invitedRoomInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_GC_NotifyDestroyInvite);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.GC_NotifyDestroyInvite,
                    rmiName = RmiName_GC_NotifyDestroyInvite,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestDestroySetInviteOptionOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            DestroyInviteOption option;
            CommonPacket.Marshaler.Read(__msg, out option);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroySetInviteOptionOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestDestroySetInviteOptionOK,
                    rmiName = RmiName_CG_RequestDestroySetInviteOptionOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestDestroySetInviteOptionOK(remote, rmiContext, option))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroySetInviteOptionOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestDestroySetInviteOptionOK,
                    rmiName = RmiName_CG_RequestDestroySetInviteOptionOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestDestroyGetUserLoginListOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<DestroyUserProfileInfo> userProfileInfoList;
            CommonPacket.Marshaler.Read(__msg, out userProfileInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyGetUserLoginListOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestDestroyGetUserLoginListOK,
                    rmiName = RmiName_CG_RequestDestroyGetUserLoginListOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestDestroyGetUserLoginListOK(remote, rmiContext, userProfileInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyGetUserLoginListOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestDestroyGetUserLoginListOK,
                    rmiName = RmiName_CG_RequestDestroyGetUserLoginListOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestDestroyGetFriendLoginListOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<DestroyUserProfileInfo> friendProfileInfoList;
            CommonPacket.Marshaler.Read(__msg, out friendProfileInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyGetFriendLoginListOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestDestroyGetFriendLoginListOK,
                    rmiName = RmiName_CG_RequestDestroyGetFriendLoginListOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestDestroyGetFriendLoginListOK(remote, rmiContext, friendProfileInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyGetFriendLoginListOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestDestroyGetFriendLoginListOK,
                    rmiName = RmiName_CG_RequestDestroyGetFriendLoginListOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestDestroyGetGuildLoginListOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<DestroyUserProfileInfo> guildMemberProfileInfoList;
            CommonPacket.Marshaler.Read(__msg, out guildMemberProfileInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyGetGuildLoginListOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestDestroyGetGuildLoginListOK,
                    rmiName = RmiName_CG_RequestDestroyGetGuildLoginListOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestDestroyGetGuildLoginListOK(remote, rmiContext, guildMemberProfileInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyGetGuildLoginListOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestDestroyGetGuildLoginListOK,
                    rmiName = RmiName_CG_RequestDestroyGetGuildLoginListOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestDestroyGetReceivedInvitationListOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<DestroyClientSendRoomInfo> invitedRoomInfoList;
            CommonPacket.Marshaler.Read(__msg, out invitedRoomInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyGetReceivedInvitationListOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestDestroyGetReceivedInvitationListOK,
                    rmiName = RmiName_CG_RequestDestroyGetReceivedInvitationListOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestDestroyGetReceivedInvitationListOK(remote, rmiContext, invitedRoomInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyGetReceivedInvitationListOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestDestroyGetReceivedInvitationListOK,
                    rmiName = RmiName_CG_RequestDestroyGetReceivedInvitationListOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestDestroyInviteOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<long> invitedUSNList;
            CommonPacket.Marshaler.Read(__msg, out invitedUSNList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyInviteOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestDestroyInviteOK,
                    rmiName = RmiName_CG_RequestDestroyInviteOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestDestroyInviteOK(remote, rmiContext, invitedUSNList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyInviteOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestDestroyInviteOK,
                    rmiName = RmiName_CG_RequestDestroyInviteOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestDestroyRemoveInvitationOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int roomSN;
            CommonPacket.Marshaler.Read(__msg, out roomSN);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyRemoveInvitationOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestDestroyRemoveInvitationOK,
                    rmiName = RmiName_CG_RequestDestroyRemoveInvitationOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestDestroyRemoveInvitationOK(remote, rmiContext, roomSN))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyRemoveInvitationOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestDestroyRemoveInvitationOK,
                    rmiName = RmiName_CG_RequestDestroyRemoveInvitationOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestDestroyRemoveJoinInfoOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyRemoveJoinInfoOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestDestroyRemoveJoinInfoOK,
                    rmiName = RmiName_CG_RequestDestroyRemoveJoinInfoOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestDestroyRemoveJoinInfoOK(remote, rmiContext))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyRemoveJoinInfoOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestDestroyRemoveJoinInfoOK,
                    rmiName = RmiName_CG_RequestDestroyRemoveJoinInfoOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestDestroyCreateOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            DestroyCreateResult createResult;
            CommonPacket.Marshaler.Read(__msg, out createResult);
            byte multiBossCount;
            CommonPacket.Marshaler.Read(__msg, out multiBossCount);
            List<int> stageIdList;
            CommonPacket.Marshaler.Read(__msg, out stageIdList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyCreateOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestDestroyCreateOK,
                    rmiName = RmiName_CG_RequestDestroyCreateOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestDestroyCreateOK(remote, rmiContext, createResult, multiBossCount, stageIdList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyCreateOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestDestroyCreateOK,
                    rmiName = RmiName_CG_RequestDestroyCreateOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestDestroyStartOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyStartOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestDestroyStartOK,
                    rmiName = RmiName_CG_RequestDestroyStartOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestDestroyStartOK(remote, rmiContext))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyStartOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestDestroyStartOK,
                    rmiName = RmiName_CG_RequestDestroyStartOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestDestroyBattleStartOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            DestroyBattleStartResult battleStartResult;
            CommonPacket.Marshaler.Read(__msg, out battleStartResult);
            PaybackEventResultInfo paybackEventresultInfo;
            CommonPacket.Marshaler.Read(__msg, out paybackEventresultInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyBattleStartOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestDestroyBattleStartOK,
                    rmiName = RmiName_CG_RequestDestroyBattleStartOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestDestroyBattleStartOK(remote, rmiContext, battleStartResult, paybackEventresultInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyBattleStartOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestDestroyBattleStartOK,
                    rmiName = RmiName_CG_RequestDestroyBattleStartOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestDestroyJoinOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            DestroyJoinResult joinResult;
            CommonPacket.Marshaler.Read(__msg, out joinResult);
            byte multiBossCount;
            CommonPacket.Marshaler.Read(__msg, out multiBossCount);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyJoinOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestDestroyJoinOK,
                    rmiName = RmiName_CG_RequestDestroyJoinOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestDestroyJoinOK(remote, rmiContext, joinResult, multiBossCount))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyJoinOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestDestroyJoinOK,
                    rmiName = RmiName_CG_RequestDestroyJoinOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestDestroyClearOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<DestroyClearResult> clearResultList;
            CommonPacket.Marshaler.Read(__msg, out clearResultList);
            List<UserPackageMissionInfo> userPackageMissionInfoList;
            CommonPacket.Marshaler.Read(__msg, out userPackageMissionInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyClearOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestDestroyClearOK,
                    rmiName = RmiName_CG_RequestDestroyClearOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestDestroyClearOK(remote, rmiContext, clearResultList, userPackageMissionInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyClearOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestDestroyClearOK,
                    rmiName = RmiName_CG_RequestDestroyClearOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestDestroyReJoinOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            DestroyReJoinResult joinResult;
            CommonPacket.Marshaler.Read(__msg, out joinResult);
            byte multiBossCount;
            CommonPacket.Marshaler.Read(__msg, out multiBossCount);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyReJoinOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestDestroyReJoinOK,
                    rmiName = RmiName_CG_RequestDestroyReJoinOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestDestroyReJoinOK(remote, rmiContext, joinResult, multiBossCount))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyReJoinOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestDestroyReJoinOK,
                    rmiName = RmiName_CG_RequestDestroyReJoinOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestDestroyRemoveOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            DestroyDiscoverInfo destroyDiscoverInfo;
            CommonPacket.Marshaler.Read(__msg, out destroyDiscoverInfo);
            ItemResultInfo rewardItemInfo;
            CommonPacket.Marshaler.Read(__msg, out rewardItemInfo);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyRemoveOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestDestroyRemoveOK,
                    rmiName = RmiName_CG_RequestDestroyRemoveOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestDestroyRemoveOK(remote, rmiContext, destroyDiscoverInfo, rewardItemInfo, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyRemoveOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestDestroyRemoveOK,
                    rmiName = RmiName_CG_RequestDestroyRemoveOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestDestroyBattleEndOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            List<UserPackageMissionInfo> userPackageMissionInfoList;
            CommonPacket.Marshaler.Read(__msg, out userPackageMissionInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyBattleEndOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestDestroyBattleEndOK,
                    rmiName = RmiName_CG_RequestDestroyBattleEndOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestDestroyBattleEndOK(remote, rmiContext, missionResult, userPackageMissionInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyBattleEndOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestDestroyBattleEndOK,
                    rmiName = RmiName_CG_RequestDestroyBattleEndOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestDestroyInviteAIOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            OtherPlayerTeamInfo otherPlayerTeamInfo;
            CommonPacket.Marshaler.Read(__msg, out otherPlayerTeamInfo);
            DestroyUserProfileInfo destroyUserProfileInfo;
            CommonPacket.Marshaler.Read(__msg, out destroyUserProfileInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyInviteAIOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestDestroyInviteAIOK,
                    rmiName = RmiName_CG_RequestDestroyInviteAIOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestDestroyInviteAIOK(remote, rmiContext, otherPlayerTeamInfo, destroyUserProfileInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyInviteAIOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestDestroyInviteAIOK,
                    rmiName = RmiName_CG_RequestDestroyInviteAIOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestDestroyKickOutAIOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyKickOutAIOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestDestroyKickOutAIOK,
                    rmiName = RmiName_CG_RequestDestroyKickOutAIOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestDestroyKickOutAIOK(remote, rmiContext))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyKickOutAIOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestDestroyKickOutAIOK,
                    rmiName = RmiName_CG_RequestDestroyKickOutAIOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventDestroyCreateOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            DestroyCreateResult createResult;
            CommonPacket.Marshaler.Read(__msg, out createResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventDestroyCreateOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventDestroyCreateOK,
                    rmiName = RmiName_CG_RequestEventDestroyCreateOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventDestroyCreateOK(remote, rmiContext, createResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventDestroyCreateOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventDestroyCreateOK,
                    rmiName = RmiName_CG_RequestEventDestroyCreateOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventDestroyClearOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            DestroyClearResult clearResult;
            CommonPacket.Marshaler.Read(__msg, out clearResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventDestroyClearOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventDestroyClearOK,
                    rmiName = RmiName_CG_RequestEventDestroyClearOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventDestroyClearOK(remote, rmiContext, clearResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventDestroyClearOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventDestroyClearOK,
                    rmiName = RmiName_CG_RequestEventDestroyClearOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventDestroyStartOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventDestroyStartOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventDestroyStartOK,
                    rmiName = RmiName_CG_RequestEventDestroyStartOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventDestroyStartOK(remote, rmiContext))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventDestroyStartOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventDestroyStartOK,
                    rmiName = RmiName_CG_RequestEventDestroyStartOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventDestroyRemoveOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            DestroyDiscoverInfo destroyDiscoverInfo;
            CommonPacket.Marshaler.Read(__msg, out destroyDiscoverInfo);
            ItemResultInfo rewardItemInfo;
            CommonPacket.Marshaler.Read(__msg, out rewardItemInfo);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventDestroyRemoveOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventDestroyRemoveOK,
                    rmiName = RmiName_CG_RequestEventDestroyRemoveOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventDestroyRemoveOK(remote, rmiContext, destroyDiscoverInfo, rewardItemInfo, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventDestroyRemoveOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventDestroyRemoveOK,
                    rmiName = RmiName_CG_RequestEventDestroyRemoveOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventChallengeDestroyCreateOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            DestroyCreateResult createResult;
            CommonPacket.Marshaler.Read(__msg, out createResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventChallengeDestroyCreateOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventChallengeDestroyCreateOK,
                    rmiName = RmiName_CG_RequestEventChallengeDestroyCreateOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventChallengeDestroyCreateOK(remote, rmiContext, createResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventChallengeDestroyCreateOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventChallengeDestroyCreateOK,
                    rmiName = RmiName_CG_RequestEventChallengeDestroyCreateOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventChallengeDestroyStartOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventChallengeDestroyStartOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventChallengeDestroyStartOK,
                    rmiName = RmiName_CG_RequestEventChallengeDestroyStartOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventChallengeDestroyStartOK(remote, rmiContext))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventChallengeDestroyStartOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventChallengeDestroyStartOK,
                    rmiName = RmiName_CG_RequestEventChallengeDestroyStartOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventChallengeDestroyClearOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            DestroyClearResult clearResult;
            CommonPacket.Marshaler.Read(__msg, out clearResult);
            UserChallengeDestroyEventInfo userChallengeDestroyEventInfo;
            CommonPacket.Marshaler.Read(__msg, out userChallengeDestroyEventInfo);
            long worldTotalPoint;
            CommonPacket.Marshaler.Read(__msg, out worldTotalPoint);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventChallengeDestroyClearOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventChallengeDestroyClearOK,
                    rmiName = RmiName_CG_RequestEventChallengeDestroyClearOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventChallengeDestroyClearOK(remote, rmiContext, clearResult, userChallengeDestroyEventInfo, worldTotalPoint))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventChallengeDestroyClearOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventChallengeDestroyClearOK,
                    rmiName = RmiName_CG_RequestEventChallengeDestroyClearOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventChallengeDestroyPointRefreshOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int eventSEQ;
            CommonPacket.Marshaler.Read(__msg, out eventSEQ);
            long worldTotalPoint;
            CommonPacket.Marshaler.Read(__msg, out worldTotalPoint);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventChallengeDestroyPointRefreshOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventChallengeDestroyPointRefreshOK,
                    rmiName = RmiName_CG_RequestEventChallengeDestroyPointRefreshOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventChallengeDestroyPointRefreshOK(remote, rmiContext, eventSEQ, worldTotalPoint))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventChallengeDestroyPointRefreshOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventChallengeDestroyPointRefreshOK,
                    rmiName = RmiName_CG_RequestEventChallengeDestroyPointRefreshOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventChallengeDestroyUserRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserChallengeDestroyEventInfo userChallengeDestroyEventInfo;
            CommonPacket.Marshaler.Read(__msg, out userChallengeDestroyEventInfo);
            List<ItemResultInfo> getItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventChallengeDestroyUserRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventChallengeDestroyUserRewardOK,
                    rmiName = RmiName_CG_RequestEventChallengeDestroyUserRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventChallengeDestroyUserRewardOK(remote, rmiContext, userChallengeDestroyEventInfo, getItemResultInfoList, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventChallengeDestroyUserRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventChallengeDestroyUserRewardOK,
                    rmiName = RmiName_CG_RequestEventChallengeDestroyUserRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventChallengeDestroyWorldRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserChallengeDestroyEventInfo userChallengeDestroyEventInfo;
            CommonPacket.Marshaler.Read(__msg, out userChallengeDestroyEventInfo);
            List<ItemResultInfo> getItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventChallengeDestroyWorldRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventChallengeDestroyWorldRewardOK,
                    rmiName = RmiName_CG_RequestEventChallengeDestroyWorldRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventChallengeDestroyWorldRewardOK(remote, rmiContext, userChallengeDestroyEventInfo, getItemResultInfoList, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventChallengeDestroyWorldRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventChallengeDestroyWorldRewardOK,
                    rmiName = RmiName_CG_RequestEventChallengeDestroyWorldRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestDisasterDestroyCreateOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            DestroyCreateResult createResult;
            CommonPacket.Marshaler.Read(__msg, out createResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestDisasterDestroyCreateOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestDisasterDestroyCreateOK,
                    rmiName = RmiName_CG_RequestDisasterDestroyCreateOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestDisasterDestroyCreateOK(remote, rmiContext, createResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDisasterDestroyCreateOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestDisasterDestroyCreateOK,
                    rmiName = RmiName_CG_RequestDisasterDestroyCreateOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestDisasterDestroyStartOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestDisasterDestroyStartOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestDisasterDestroyStartOK,
                    rmiName = RmiName_CG_RequestDisasterDestroyStartOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestDisasterDestroyStartOK(remote, rmiContext))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDisasterDestroyStartOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestDisasterDestroyStartOK,
                    rmiName = RmiName_CG_RequestDisasterDestroyStartOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestDisasterDestroyClearOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            DestroyClearResult clearResult;
            CommonPacket.Marshaler.Read(__msg, out clearResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestDisasterDestroyClearOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestDisasterDestroyClearOK,
                    rmiName = RmiName_CG_RequestDisasterDestroyClearOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestDisasterDestroyClearOK(remote, rmiContext, clearResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDisasterDestroyClearOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestDisasterDestroyClearOK,
                    rmiName = RmiName_CG_RequestDisasterDestroyClearOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventDisasterDestroyCreateOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            DestroyCreateResult createResult;
            CommonPacket.Marshaler.Read(__msg, out createResult);
            int remainSec;
            CommonPacket.Marshaler.Read(__msg, out remainSec);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventDisasterDestroyCreateOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventDisasterDestroyCreateOK,
                    rmiName = RmiName_CG_RequestEventDisasterDestroyCreateOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventDisasterDestroyCreateOK(remote, rmiContext, createResult, remainSec))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventDisasterDestroyCreateOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventDisasterDestroyCreateOK,
                    rmiName = RmiName_CG_RequestEventDisasterDestroyCreateOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventDisasterDestroyStartOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventDisasterDestroyStartOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventDisasterDestroyStartOK,
                    rmiName = RmiName_CG_RequestEventDisasterDestroyStartOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventDisasterDestroyStartOK(remote, rmiContext))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventDisasterDestroyStartOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventDisasterDestroyStartOK,
                    rmiName = RmiName_CG_RequestEventDisasterDestroyStartOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventDisasterDestroyClearOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            DestroyClearResult clearResult;
            CommonPacket.Marshaler.Read(__msg, out clearResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventDisasterDestroyClearOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventDisasterDestroyClearOK,
                    rmiName = RmiName_CG_RequestEventDisasterDestroyClearOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventDisasterDestroyClearOK(remote, rmiContext, clearResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventDisasterDestroyClearOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventDisasterDestroyClearOK,
                    rmiName = RmiName_CG_RequestEventDisasterDestroyClearOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventDisasterDestroyLeaveOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventDisasterDestroyLeaveOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventDisasterDestroyLeaveOK,
                    rmiName = RmiName_CG_RequestEventDisasterDestroyLeaveOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventDisasterDestroyLeaveOK(remote, rmiContext))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventDisasterDestroyLeaveOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventDisasterDestroyLeaveOK,
                    rmiName = RmiName_CG_RequestEventDisasterDestroyLeaveOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestDestroyOtherPlayerTeamInfoOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            long targetUSN;
            CommonPacket.Marshaler.Read(__msg, out targetUSN);
            List<DestroyOtherPlayerTeamInfo> destroyOtherPlayerTeamInfoList;
            CommonPacket.Marshaler.Read(__msg, out destroyOtherPlayerTeamInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyOtherPlayerTeamInfoOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestDestroyOtherPlayerTeamInfoOK,
                    rmiName = RmiName_CG_RequestDestroyOtherPlayerTeamInfoOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestDestroyOtherPlayerTeamInfoOK(remote, rmiContext, targetUSN, destroyOtherPlayerTeamInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyOtherPlayerTeamInfoOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestDestroyOtherPlayerTeamInfoOK,
                    rmiName = RmiName_CG_RequestDestroyOtherPlayerTeamInfoOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestDestroyLiveJoinRegisterOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int bossID;
            CommonPacket.Marshaler.Read(__msg, out bossID);
            byte difficulty;
            CommonPacket.Marshaler.Read(__msg, out difficulty);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyLiveJoinRegisterOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestDestroyLiveJoinRegisterOK,
                    rmiName = RmiName_CG_RequestDestroyLiveJoinRegisterOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestDestroyLiveJoinRegisterOK(remote, rmiContext, bossID, difficulty))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyLiveJoinRegisterOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestDestroyLiveJoinRegisterOK,
                    rmiName = RmiName_CG_RequestDestroyLiveJoinRegisterOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestDestroyLiveJoinUnregisterOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int bossID;
            CommonPacket.Marshaler.Read(__msg, out bossID);
            byte difficulty;
            CommonPacket.Marshaler.Read(__msg, out difficulty);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyLiveJoinUnregisterOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestDestroyLiveJoinUnregisterOK,
                    rmiName = RmiName_CG_RequestDestroyLiveJoinUnregisterOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestDestroyLiveJoinUnregisterOK(remote, rmiContext, bossID, difficulty))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyLiveJoinUnregisterOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestDestroyLiveJoinUnregisterOK,
                    rmiName = RmiName_CG_RequestDestroyLiveJoinUnregisterOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestDestroyLiveJoinListOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<DestroyLiveJoinUserInfo> destroyLiveJoinUserList;
            CommonPacket.Marshaler.Read(__msg, out destroyLiveJoinUserList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyLiveJoinListOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestDestroyLiveJoinListOK,
                    rmiName = RmiName_CG_RequestDestroyLiveJoinListOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestDestroyLiveJoinListOK(remote, rmiContext, destroyLiveJoinUserList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyLiveJoinListOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestDestroyLiveJoinListOK,
                    rmiName = RmiName_CG_RequestDestroyLiveJoinListOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestDestroyLiveJoinInviteOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            long invitedUSN;
            CommonPacket.Marshaler.Read(__msg, out invitedUSN);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyLiveJoinInviteOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestDestroyLiveJoinInviteOK,
                    rmiName = RmiName_CG_RequestDestroyLiveJoinInviteOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestDestroyLiveJoinInviteOK(remote, rmiContext, invitedUSN))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyLiveJoinInviteOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestDestroyLiveJoinInviteOK,
                    rmiName = RmiName_CG_RequestDestroyLiveJoinInviteOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestDestroyLiveJoinAbortInvitationOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            long invitedUSN;
            CommonPacket.Marshaler.Read(__msg, out invitedUSN);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyLiveJoinAbortInvitationOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestDestroyLiveJoinAbortInvitationOK,
                    rmiName = RmiName_CG_RequestDestroyLiveJoinAbortInvitationOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestDestroyLiveJoinAbortInvitationOK(remote, rmiContext, invitedUSN))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyLiveJoinAbortInvitationOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestDestroyLiveJoinAbortInvitationOK,
                    rmiName = RmiName_CG_RequestDestroyLiveJoinAbortInvitationOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestDestroyLiveJoinRejectInvitationOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int roomSN;
            CommonPacket.Marshaler.Read(__msg, out roomSN);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyLiveJoinRejectInvitationOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestDestroyLiveJoinRejectInvitationOK,
                    rmiName = RmiName_CG_RequestDestroyLiveJoinRejectInvitationOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestDestroyLiveJoinRejectInvitationOK(remote, rmiContext, roomSN))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyLiveJoinRejectInvitationOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestDestroyLiveJoinRejectInvitationOK,
                    rmiName = RmiName_CG_RequestDestroyLiveJoinRejectInvitationOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_GC_NotifyDestroyLiveJoinInvite(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            DestroyLiveJoinInvitation liveJoinInvitation;
            CommonPacket.Marshaler.Read(__msg, out liveJoinInvitation);
            base.core.PostCheckReadMessage(__msg, RmiName_GC_NotifyDestroyLiveJoinInvite);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.GC_NotifyDestroyLiveJoinInvite,
                    rmiName = RmiName_GC_NotifyDestroyLiveJoinInvite,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.GC_NotifyDestroyLiveJoinInvite(remote, rmiContext, liveJoinInvitation))
                base.core.ShowNotImplementedRmiWarning(RmiName_GC_NotifyDestroyLiveJoinInvite);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.GC_NotifyDestroyLiveJoinInvite,
                    rmiName = RmiName_GC_NotifyDestroyLiveJoinInvite,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_GC_NotifyDestroyLiveJoinAbortInvitation(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int roomSN;
            CommonPacket.Marshaler.Read(__msg, out roomSN);
            base.core.PostCheckReadMessage(__msg, RmiName_GC_NotifyDestroyLiveJoinAbortInvitation);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.GC_NotifyDestroyLiveJoinAbortInvitation,
                    rmiName = RmiName_GC_NotifyDestroyLiveJoinAbortInvitation,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.GC_NotifyDestroyLiveJoinAbortInvitation(remote, rmiContext, roomSN))
                base.core.ShowNotImplementedRmiWarning(RmiName_GC_NotifyDestroyLiveJoinAbortInvitation);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.GC_NotifyDestroyLiveJoinAbortInvitation,
                    rmiName = RmiName_GC_NotifyDestroyLiveJoinAbortInvitation,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_GC_NotifyDestroyLiveJoinRejectInvitation(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            long invitedUSN;
            CommonPacket.Marshaler.Read(__msg, out invitedUSN);
            base.core.PostCheckReadMessage(__msg, RmiName_GC_NotifyDestroyLiveJoinRejectInvitation);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.GC_NotifyDestroyLiveJoinRejectInvitation,
                    rmiName = RmiName_GC_NotifyDestroyLiveJoinRejectInvitation,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.GC_NotifyDestroyLiveJoinRejectInvitation(remote, rmiContext, invitedUSN))
                base.core.ShowNotImplementedRmiWarning(RmiName_GC_NotifyDestroyLiveJoinRejectInvitation);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.GC_NotifyDestroyLiveJoinRejectInvitation,
                    rmiName = RmiName_GC_NotifyDestroyLiveJoinRejectInvitation,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestDestroyRoomInfoOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int multiBossCount;
            CommonPacket.Marshaler.Read(__msg, out multiBossCount);
            List<int> stageIdList;
            CommonPacket.Marshaler.Read(__msg, out stageIdList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyRoomInfoOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestDestroyRoomInfoOK,
                    rmiName = RmiName_CG_RequestDestroyRoomInfoOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestDestroyRoomInfoOK(remote, rmiContext, multiBossCount, stageIdList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyRoomInfoOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestDestroyRoomInfoOK,
                    rmiName = RmiName_CG_RequestDestroyRoomInfoOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestFriendListOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<FriendInfo> friendList;
            CommonPacket.Marshaler.Read(__msg, out friendList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            List<FriendInfo> randomRecommendfriendList;
            CommonPacket.Marshaler.Read(__msg, out randomRecommendfriendList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendListOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendListOK,
                    rmiName = RmiName_CG_RequestFriendListOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestFriendListOK(remote, rmiContext, friendList, missionResult, randomRecommendfriendList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendListOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendListOK,
                    rmiName = RmiName_CG_RequestFriendListOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestFriendGuildInfoOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            FriendGuildInfo friendGuildInfo;
            CommonPacket.Marshaler.Read(__msg, out friendGuildInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendGuildInfoOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendGuildInfoOK,
                    rmiName = RmiName_CG_RequestFriendGuildInfoOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestFriendGuildInfoOK(remote, rmiContext, friendGuildInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendGuildInfoOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendGuildInfoOK,
                    rmiName = RmiName_CG_RequestFriendGuildInfoOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestFriendApplySendListOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<FriendInfo> applySendList;
            CommonPacket.Marshaler.Read(__msg, out applySendList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendApplySendListOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendApplySendListOK,
                    rmiName = RmiName_CG_RequestFriendApplySendListOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestFriendApplySendListOK(remote, rmiContext, applySendList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendApplySendListOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendApplySendListOK,
                    rmiName = RmiName_CG_RequestFriendApplySendListOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestFriendApplyReceiveListOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<FriendInfo> applyReceiveList;
            CommonPacket.Marshaler.Read(__msg, out applyReceiveList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendApplyReceiveListOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendApplyReceiveListOK,
                    rmiName = RmiName_CG_RequestFriendApplyReceiveListOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestFriendApplyReceiveListOK(remote, rmiContext, applyReceiveList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendApplyReceiveListOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendApplyReceiveListOK,
                    rmiName = RmiName_CG_RequestFriendApplyReceiveListOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestFriendApplySendOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            long targetUSN;
            CommonPacket.Marshaler.Read(__msg, out targetUSN);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendApplySendOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendApplySendOK,
                    rmiName = RmiName_CG_RequestFriendApplySendOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestFriendApplySendOK(remote, rmiContext, targetUSN))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendApplySendOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendApplySendOK,
                    rmiName = RmiName_CG_RequestFriendApplySendOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestFriendApplyRejectOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            long targetUSN;
            CommonPacket.Marshaler.Read(__msg, out targetUSN);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendApplyRejectOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendApplyRejectOK,
                    rmiName = RmiName_CG_RequestFriendApplyRejectOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestFriendApplyRejectOK(remote, rmiContext, targetUSN))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendApplyRejectOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendApplyRejectOK,
                    rmiName = RmiName_CG_RequestFriendApplyRejectOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestFriendApplyReceiveAcceptOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            long targetUSN;
            CommonPacket.Marshaler.Read(__msg, out targetUSN);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendApplyReceiveAcceptOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendApplyReceiveAcceptOK,
                    rmiName = RmiName_CG_RequestFriendApplyReceiveAcceptOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestFriendApplyReceiveAcceptOK(remote, rmiContext, targetUSN, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendApplyReceiveAcceptOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendApplyReceiveAcceptOK,
                    rmiName = RmiName_CG_RequestFriendApplyReceiveAcceptOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestFriendApplyReceiveAcceptListOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<long> targetUSNList;
            CommonPacket.Marshaler.Read(__msg, out targetUSNList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendApplyReceiveAcceptListOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendApplyReceiveAcceptListOK,
                    rmiName = RmiName_CG_RequestFriendApplyReceiveAcceptListOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestFriendApplyReceiveAcceptListOK(remote, rmiContext, targetUSNList, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendApplyReceiveAcceptListOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendApplyReceiveAcceptListOK,
                    rmiName = RmiName_CG_RequestFriendApplyReceiveAcceptListOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestFriendApplyReceiveRefuseOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            long targetUSN;
            CommonPacket.Marshaler.Read(__msg, out targetUSN);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendApplyReceiveRefuseOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendApplyReceiveRefuseOK,
                    rmiName = RmiName_CG_RequestFriendApplyReceiveRefuseOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestFriendApplyReceiveRefuseOK(remote, rmiContext, targetUSN))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendApplyReceiveRefuseOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendApplyReceiveRefuseOK,
                    rmiName = RmiName_CG_RequestFriendApplyReceiveRefuseOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestFriendApplyReceiveRefuseListOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<long> targetUSNList;
            CommonPacket.Marshaler.Read(__msg, out targetUSNList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendApplyReceiveRefuseListOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendApplyReceiveRefuseListOK,
                    rmiName = RmiName_CG_RequestFriendApplyReceiveRefuseListOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestFriendApplyReceiveRefuseListOK(remote, rmiContext, targetUSNList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendApplyReceiveRefuseListOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendApplyReceiveRefuseListOK,
                    rmiName = RmiName_CG_RequestFriendApplyReceiveRefuseListOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestFriendRemoveOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            long targetUSN;
            CommonPacket.Marshaler.Read(__msg, out targetUSN);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendRemoveOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendRemoveOK,
                    rmiName = RmiName_CG_RequestFriendRemoveOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestFriendRemoveOK(remote, rmiContext, targetUSN))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendRemoveOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendRemoveOK,
                    rmiName = RmiName_CG_RequestFriendRemoveOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestFriendSearchOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            FriendInfo searchUserInfo;
            CommonPacket.Marshaler.Read(__msg, out searchUserInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendSearchOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendSearchOK,
                    rmiName = RmiName_CG_RequestFriendSearchOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestFriendSearchOK(remote, rmiContext, searchUserInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendSearchOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendSearchOK,
                    rmiName = RmiName_CG_RequestFriendSearchOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestFriendVisitOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            FriendInfo friendInfo;
            CommonPacket.Marshaler.Read(__msg, out friendInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendVisitOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendVisitOK,
                    rmiName = RmiName_CG_RequestFriendVisitOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestFriendVisitOK(remote, rmiContext, friendInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendVisitOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendVisitOK,
                    rmiName = RmiName_CG_RequestFriendVisitOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestFriendPointSendOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            FriendInfo friendInfo;
            CommonPacket.Marshaler.Read(__msg, out friendInfo);
            List<QuestProgressInfo> questProgressList;
            CommonPacket.Marshaler.Read(__msg, out questProgressList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendPointSendOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendPointSendOK,
                    rmiName = RmiName_CG_RequestFriendPointSendOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestFriendPointSendOK(remote, rmiContext, friendInfo, questProgressList, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendPointSendOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendPointSendOK,
                    rmiName = RmiName_CG_RequestFriendPointSendOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestFriendPointSendAllOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<FriendInfo> friendInfoList;
            CommonPacket.Marshaler.Read(__msg, out friendInfoList);
            List<QuestProgressInfo> questProgressList;
            CommonPacket.Marshaler.Read(__msg, out questProgressList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendPointSendAllOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendPointSendAllOK,
                    rmiName = RmiName_CG_RequestFriendPointSendAllOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestFriendPointSendAllOK(remote, rmiContext, friendInfoList, questProgressList, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendPointSendAllOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendPointSendAllOK,
                    rmiName = RmiName_CG_RequestFriendPointSendAllOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestFriendLobbyInfoOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            FriendLobbyInfo friendLobbyInfo;
            CommonPacket.Marshaler.Read(__msg, out friendLobbyInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendLobbyInfoOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendLobbyInfoOK,
                    rmiName = RmiName_CG_RequestFriendLobbyInfoOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestFriendLobbyInfoOK(remote, rmiContext, friendLobbyInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendLobbyInfoOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendLobbyInfoOK,
                    rmiName = RmiName_CG_RequestFriendLobbyInfoOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestFriendCookingRecipeInfoOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            bool friendCookingEatable;
            CommonPacket.Marshaler.Read(__msg, out friendCookingEatable);
            List<FriendRecipeOrderInfo> friendRecipeOrderInfoList;
            CommonPacket.Marshaler.Read(__msg, out friendRecipeOrderInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendCookingRecipeInfoOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendCookingRecipeInfoOK,
                    rmiName = RmiName_CG_RequestFriendCookingRecipeInfoOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestFriendCookingRecipeInfoOK(remote, rmiContext, friendCookingEatable, friendRecipeOrderInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendCookingRecipeInfoOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendCookingRecipeInfoOK,
                    rmiName = RmiName_CG_RequestFriendCookingRecipeInfoOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestFriendCookingEatOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            FriendCookingEatResult friendCookingEatResult;
            CommonPacket.Marshaler.Read(__msg, out friendCookingEatResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendCookingEatOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendCookingEatOK,
                    rmiName = RmiName_CG_RequestFriendCookingEatOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestFriendCookingEatOK(remote, rmiContext, friendCookingEatResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendCookingEatOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendCookingEatOK,
                    rmiName = RmiName_CG_RequestFriendCookingEatOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestFriendCookingEatFriendListOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<FriendInfo> friendInfoList;
            CommonPacket.Marshaler.Read(__msg, out friendInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendCookingEatFriendListOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendCookingEatFriendListOK,
                    rmiName = RmiName_CG_RequestFriendCookingEatFriendListOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestFriendCookingEatFriendListOK(remote, rmiContext, friendInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendCookingEatFriendListOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendCookingEatFriendListOK,
                    rmiName = RmiName_CG_RequestFriendCookingEatFriendListOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestRefreshRecommendFriendListOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<FriendInfo> recommendFriendList;
            CommonPacket.Marshaler.Read(__msg, out recommendFriendList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestRefreshRecommendFriendListOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestRefreshRecommendFriendListOK,
                    rmiName = RmiName_CG_RequestRefreshRecommendFriendListOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestRefreshRecommendFriendListOK(remote, rmiContext, recommendFriendList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestRefreshRecommendFriendListOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestRefreshRecommendFriendListOK,
                    rmiName = RmiName_CG_RequestRefreshRecommendFriendListOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestAPRechargeByUseItemOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            ItemResultInfo useItemResultInfo;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfo);
            APInfo apInfo;
            CommonPacket.Marshaler.Read(__msg, out apInfo);
            UserADViewInfo updateUserADViewInfo;
            CommonPacket.Marshaler.Read(__msg, out updateUserADViewInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestAPRechargeByUseItemOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestAPRechargeByUseItemOK,
                    rmiName = RmiName_CG_RequestAPRechargeByUseItemOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestAPRechargeByUseItemOK(remote, rmiContext, useItemResultInfo, apInfo, updateUserADViewInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestAPRechargeByUseItemOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestAPRechargeByUseItemOK,
                    rmiName = RmiName_CG_RequestAPRechargeByUseItemOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestFoodBuffAutoUseOnOffOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            FoodBuffInfo foodBuffInfo;
            CommonPacket.Marshaler.Read(__msg, out foodBuffInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestFoodBuffAutoUseOnOffOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestFoodBuffAutoUseOnOffOK,
                    rmiName = RmiName_CG_RequestFoodBuffAutoUseOnOffOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestFoodBuffAutoUseOnOffOK(remote, rmiContext, foodBuffInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFoodBuffAutoUseOnOffOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestFoodBuffAutoUseOnOffOK,
                    rmiName = RmiName_CG_RequestFoodBuffAutoUseOnOffOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestItemUseRankExpOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            ItemResultInfo useItemResultInfo;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfo);
            int getRankExp;
            CommonPacket.Marshaler.Read(__msg, out getRankExp);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestItemUseRankExpOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestItemUseRankExpOK,
                    rmiName = RmiName_CG_RequestItemUseRankExpOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestItemUseRankExpOK(remote, rmiContext, useItemResultInfo, getRankExp, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestItemUseRankExpOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestItemUseRankExpOK,
                    rmiName = RmiName_CG_RequestItemUseRankExpOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestItemUseBoxOpenOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            ItemUseResult itemUseResult;
            CommonPacket.Marshaler.Read(__msg, out itemUseResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestItemUseBoxOpenOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestItemUseBoxOpenOK,
                    rmiName = RmiName_CG_RequestItemUseBoxOpenOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestItemUseBoxOpenOK(remote, rmiContext, itemUseResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestItemUseBoxOpenOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestItemUseBoxOpenOK,
                    rmiName = RmiName_CG_RequestItemUseBoxOpenOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestItemUseRecipeExpOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            ItemResultInfo useItemResultInfo;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfo);
            int recipeID;
            CommonPacket.Marshaler.Read(__msg, out recipeID);
            int recipeResultExp;
            CommonPacket.Marshaler.Read(__msg, out recipeResultExp);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestItemUseRecipeExpOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestItemUseRecipeExpOK,
                    rmiName = RmiName_CG_RequestItemUseRecipeExpOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestItemUseRecipeExpOK(remote, rmiContext, useItemResultInfo, recipeID, recipeResultExp, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestItemUseRecipeExpOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestItemUseRecipeExpOK,
                    rmiName = RmiName_CG_RequestItemUseRecipeExpOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestItemUseWeeklyKeyBoxOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            ItemResultInfo useItemResultInfo;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfo);
            List<ItemResultInfo> getItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestItemUseWeeklyKeyBoxOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestItemUseWeeklyKeyBoxOK,
                    rmiName = RmiName_CG_RequestItemUseWeeklyKeyBoxOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestItemUseWeeklyKeyBoxOK(remote, rmiContext, useItemResultInfo, getItemResultInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestItemUseWeeklyKeyBoxOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestItemUseWeeklyKeyBoxOK,
                    rmiName = RmiName_CG_RequestItemUseWeeklyKeyBoxOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestItemUseWeaponTicketOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            ItemResultInfo useItemResultInfo;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfo);
            List<ItemResultInfo> getItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestItemUseWeaponTicketOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestItemUseWeaponTicketOK,
                    rmiName = RmiName_CG_RequestItemUseWeaponTicketOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestItemUseWeaponTicketOK(remote, rmiContext, useItemResultInfo, getItemResultInfoList, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestItemUseWeaponTicketOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestItemUseWeaponTicketOK,
                    rmiName = RmiName_CG_RequestItemUseWeaponTicketOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestItemUseMusicOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            ItemResultInfo useItemResultInfo;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfo);
            List<ItemResultInfo> getItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestItemUseMusicOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestItemUseMusicOK,
                    rmiName = RmiName_CG_RequestItemUseMusicOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestItemUseMusicOK(remote, rmiContext, useItemResultInfo, getItemResultInfoList, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestItemUseMusicOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestItemUseMusicOK,
                    rmiName = RmiName_CG_RequestItemUseMusicOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestItemUseBuffOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            ItemResultInfo useItemResultInfo;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfo);
            UserBuffInfo userBuffInfo;
            CommonPacket.Marshaler.Read(__msg, out userBuffInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestItemUseBuffOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestItemUseBuffOK,
                    rmiName = RmiName_CG_RequestItemUseBuffOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestItemUseBuffOK(remote, rmiContext, useItemResultInfo, userBuffInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestItemUseBuffOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestItemUseBuffOK,
                    rmiName = RmiName_CG_RequestItemUseBuffOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestTutorialAddStepOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserTutorialInfo tutorialInfo;
            CommonPacket.Marshaler.Read(__msg, out tutorialInfo);
            List<ItemResultInfo> itemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out itemResultInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestTutorialAddStepOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestTutorialAddStepOK,
                    rmiName = RmiName_CG_RequestTutorialAddStepOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestTutorialAddStepOK(remote, rmiContext, tutorialInfo, itemResultInfoList, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestTutorialAddStepOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestTutorialAddStepOK,
                    rmiName = RmiName_CG_RequestTutorialAddStepOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestTutorialSetFlagOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserTutorialInfo tutorialInfo;
            CommonPacket.Marshaler.Read(__msg, out tutorialInfo);
            List<ItemResultInfo> itemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out itemResultInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestTutorialSetFlagOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestTutorialSetFlagOK,
                    rmiName = RmiName_CG_RequestTutorialSetFlagOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestTutorialSetFlagOK(remote, rmiContext, tutorialInfo, itemResultInfoList, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestTutorialSetFlagOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestTutorialSetFlagOK,
                    rmiName = RmiName_CG_RequestTutorialSetFlagOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestTutorialHeroFlagOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserTutorialInfo tutorialInfo;
            CommonPacket.Marshaler.Read(__msg, out tutorialInfo);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestTutorialHeroFlagOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestTutorialHeroFlagOK,
                    rmiName = RmiName_CG_RequestTutorialHeroFlagOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestTutorialHeroFlagOK(remote, rmiContext, tutorialInfo, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestTutorialHeroFlagOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestTutorialHeroFlagOK,
                    rmiName = RmiName_CG_RequestTutorialHeroFlagOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestTutorialGambleShopBuyOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserTutorialInfo tutorialInfo;
            CommonPacket.Marshaler.Read(__msg, out tutorialInfo);
            List<ItemResultInfo> useItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfoList);
            List<ItemResultInfo> gambleItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out gambleItemResultInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            UserBingoGachaEventInfo userBingoGachaEventInfo;
            CommonPacket.Marshaler.Read(__msg, out userBingoGachaEventInfo);
            PaybackEventResultInfo paybackEventresultInfo;
            CommonPacket.Marshaler.Read(__msg, out paybackEventresultInfo);
            List<UpgradeUserSkin> upgradeSkinResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out upgradeSkinResultInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestTutorialGambleShopBuyOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestTutorialGambleShopBuyOK,
                    rmiName = RmiName_CG_RequestTutorialGambleShopBuyOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestTutorialGambleShopBuyOK(remote, rmiContext, tutorialInfo, useItemResultInfoList, gambleItemResultInfoList, missionResult, userBingoGachaEventInfo, paybackEventresultInfo, upgradeSkinResultInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestTutorialGambleShopBuyOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestTutorialGambleShopBuyOK,
                    rmiName = RmiName_CG_RequestTutorialGambleShopBuyOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestBattleTutorialInfoOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            byte battleTutorialSeq;
            CommonPacket.Marshaler.Read(__msg, out battleTutorialSeq);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestBattleTutorialInfoOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestBattleTutorialInfoOK,
                    rmiName = RmiName_CG_RequestBattleTutorialInfoOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestBattleTutorialInfoOK(remote, rmiContext, battleTutorialSeq))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBattleTutorialInfoOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestBattleTutorialInfoOK,
                    rmiName = RmiName_CG_RequestBattleTutorialInfoOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestBattleTutorialSetOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            byte battleTutorialSeq;
            CommonPacket.Marshaler.Read(__msg, out battleTutorialSeq);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestBattleTutorialSetOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestBattleTutorialSetOK,
                    rmiName = RmiName_CG_RequestBattleTutorialSetOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestBattleTutorialSetOK(remote, rmiContext, battleTutorialSeq))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBattleTutorialSetOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestBattleTutorialSetOK,
                    rmiName = RmiName_CG_RequestBattleTutorialSetOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestFriendlyMatchCreateOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            FriendlyMatchCreateResult friendlyMatchCreateResult;
            CommonPacket.Marshaler.Read(__msg, out friendlyMatchCreateResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendlyMatchCreateOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendlyMatchCreateOK,
                    rmiName = RmiName_CG_RequestFriendlyMatchCreateOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestFriendlyMatchCreateOK(remote, rmiContext, friendlyMatchCreateResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendlyMatchCreateOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendlyMatchCreateOK,
                    rmiName = RmiName_CG_RequestFriendlyMatchCreateOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestFriendlyMatchFriendListOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<FriendlyMatchUserProfileInfo> fmUserProfileInfoList;
            CommonPacket.Marshaler.Read(__msg, out fmUserProfileInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendlyMatchFriendListOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendlyMatchFriendListOK,
                    rmiName = RmiName_CG_RequestFriendlyMatchFriendListOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestFriendlyMatchFriendListOK(remote, rmiContext, fmUserProfileInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendlyMatchFriendListOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendlyMatchFriendListOK,
                    rmiName = RmiName_CG_RequestFriendlyMatchFriendListOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestFriendlyMatchInviteOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<long> resultInvitedUSNList;
            CommonPacket.Marshaler.Read(__msg, out resultInvitedUSNList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendlyMatchInviteOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendlyMatchInviteOK,
                    rmiName = RmiName_CG_RequestFriendlyMatchInviteOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestFriendlyMatchInviteOK(remote, rmiContext, resultInvitedUSNList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendlyMatchInviteOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendlyMatchInviteOK,
                    rmiName = RmiName_CG_RequestFriendlyMatchInviteOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestFriendlyMatchReceivedInviteListOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<FriendlyMatchClientSendRoomInfo> invitedRoomInfoList;
            CommonPacket.Marshaler.Read(__msg, out invitedRoomInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendlyMatchReceivedInviteListOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendlyMatchReceivedInviteListOK,
                    rmiName = RmiName_CG_RequestFriendlyMatchReceivedInviteListOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestFriendlyMatchReceivedInviteListOK(remote, rmiContext, invitedRoomInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendlyMatchReceivedInviteListOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendlyMatchReceivedInviteListOK,
                    rmiName = RmiName_CG_RequestFriendlyMatchReceivedInviteListOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestFriendlyMatchInviteAcceptOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            FriendlyMatchJoinResult joinResult;
            CommonPacket.Marshaler.Read(__msg, out joinResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendlyMatchInviteAcceptOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendlyMatchInviteAcceptOK,
                    rmiName = RmiName_CG_RequestFriendlyMatchInviteAcceptOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestFriendlyMatchInviteAcceptOK(remote, rmiContext, joinResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendlyMatchInviteAcceptOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendlyMatchInviteAcceptOK,
                    rmiName = RmiName_CG_RequestFriendlyMatchInviteAcceptOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestFriendlyMatchInviteRejectOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int roomSN;
            CommonPacket.Marshaler.Read(__msg, out roomSN);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendlyMatchInviteRejectOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendlyMatchInviteRejectOK,
                    rmiName = RmiName_CG_RequestFriendlyMatchInviteRejectOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestFriendlyMatchInviteRejectOK(remote, rmiContext, roomSN))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendlyMatchInviteRejectOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendlyMatchInviteRejectOK,
                    rmiName = RmiName_CG_RequestFriendlyMatchInviteRejectOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestFriendlyMatchStartOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendlyMatchStartOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendlyMatchStartOK,
                    rmiName = RmiName_CG_RequestFriendlyMatchStartOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestFriendlyMatchStartOK(remote, rmiContext))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendlyMatchStartOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendlyMatchStartOK,
                    rmiName = RmiName_CG_RequestFriendlyMatchStartOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestFriendlyMatchBattleStartOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            FriendlyMatchBattleStartResult battleStartResult;
            CommonPacket.Marshaler.Read(__msg, out battleStartResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendlyMatchBattleStartOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendlyMatchBattleStartOK,
                    rmiName = RmiName_CG_RequestFriendlyMatchBattleStartOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestFriendlyMatchBattleStartOK(remote, rmiContext, battleStartResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendlyMatchBattleStartOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendlyMatchBattleStartOK,
                    rmiName = RmiName_CG_RequestFriendlyMatchBattleStartOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestFriendlyMatchClearOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            FriendlyMatchClearResult clearResult;
            CommonPacket.Marshaler.Read(__msg, out clearResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendlyMatchClearOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendlyMatchClearOK,
                    rmiName = RmiName_CG_RequestFriendlyMatchClearOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestFriendlyMatchClearOK(remote, rmiContext, clearResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendlyMatchClearOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendlyMatchClearOK,
                    rmiName = RmiName_CG_RequestFriendlyMatchClearOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestFriendlyMatchExitOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            bool isRelayServerStatus;
            CommonPacket.Marshaler.Read(__msg, out isRelayServerStatus);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendlyMatchExitOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendlyMatchExitOK,
                    rmiName = RmiName_CG_RequestFriendlyMatchExitOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestFriendlyMatchExitOK(remote, rmiContext, isRelayServerStatus))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendlyMatchExitOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendlyMatchExitOK,
                    rmiName = RmiName_CG_RequestFriendlyMatchExitOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_GC_NotifyFriendlyMatchInvite(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            FriendlyMatchClientSendRoomInfo inviteRoomInfo;
            CommonPacket.Marshaler.Read(__msg, out inviteRoomInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_GC_NotifyFriendlyMatchInvite);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.GC_NotifyFriendlyMatchInvite,
                    rmiName = RmiName_GC_NotifyFriendlyMatchInvite,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.GC_NotifyFriendlyMatchInvite(remote, rmiContext, inviteRoomInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_GC_NotifyFriendlyMatchInvite);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.GC_NotifyFriendlyMatchInvite,
                    rmiName = RmiName_GC_NotifyFriendlyMatchInvite,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestFriendlyMatchSetInviteOptionOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            FriendlyMatchInviteOption option;
            CommonPacket.Marshaler.Read(__msg, out option);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendlyMatchSetInviteOptionOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendlyMatchSetInviteOptionOK,
                    rmiName = RmiName_CG_RequestFriendlyMatchSetInviteOptionOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestFriendlyMatchSetInviteOptionOK(remote, rmiContext, option))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendlyMatchSetInviteOptionOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendlyMatchSetInviteOptionOK,
                    rmiName = RmiName_CG_RequestFriendlyMatchSetInviteOptionOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventMissionGetAchievePointRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            short rewardOrder;
            CommonPacket.Marshaler.Read(__msg, out rewardOrder);
            ItemResultInfo achievePointItemInfo;
            CommonPacket.Marshaler.Read(__msg, out achievePointItemInfo);
            ItemResultInfo rewardItemInfo;
            CommonPacket.Marshaler.Read(__msg, out rewardItemInfo);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventMissionGetAchievePointRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventMissionGetAchievePointRewardOK,
                    rmiName = RmiName_CG_RequestEventMissionGetAchievePointRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventMissionGetAchievePointRewardOK(remote, rmiContext, rewardOrder, achievePointItemInfo, rewardItemInfo, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventMissionGetAchievePointRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventMissionGetAchievePointRewardOK,
                    rmiName = RmiName_CG_RequestEventMissionGetAchievePointRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventMissionCompleteRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int eventSeq;
            CommonPacket.Marshaler.Read(__msg, out eventSeq);
            ItemResultInfo rewardItemInfo;
            CommonPacket.Marshaler.Read(__msg, out rewardItemInfo);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            UpgradeUserSkin upgradeSkinResultInfo;
            CommonPacket.Marshaler.Read(__msg, out upgradeSkinResultInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventMissionCompleteRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventMissionCompleteRewardOK,
                    rmiName = RmiName_CG_RequestEventMissionCompleteRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventMissionCompleteRewardOK(remote, rmiContext, eventSeq, rewardItemInfo, missionResult, upgradeSkinResultInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventMissionCompleteRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventMissionCompleteRewardOK,
                    rmiName = RmiName_CG_RequestEventMissionCompleteRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventMissionInfoOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<ClientSendEventMissionInfo> userMissionEventInfoList;
            CommonPacket.Marshaler.Read(__msg, out userMissionEventInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventMissionInfoOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventMissionInfoOK,
                    rmiName = RmiName_CG_RequestEventMissionInfoOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventMissionInfoOK(remote, rmiContext, userMissionEventInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventMissionInfoOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventMissionInfoOK,
                    rmiName = RmiName_CG_RequestEventMissionInfoOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestLobbyFurnitureRegistOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<UserFurniture> registUserFurnitureList;
            CommonPacket.Marshaler.Read(__msg, out registUserFurnitureList);
            APInfo apInfo;
            CommonPacket.Marshaler.Read(__msg, out apInfo);
            bool hawkCollectAble;
            CommonPacket.Marshaler.Read(__msg, out hawkCollectAble);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyFurnitureRegistOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestLobbyFurnitureRegistOK,
                    rmiName = RmiName_CG_RequestLobbyFurnitureRegistOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestLobbyFurnitureRegistOK(remote, rmiContext, registUserFurnitureList, apInfo, hawkCollectAble, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyFurnitureRegistOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestLobbyFurnitureRegistOK,
                    rmiName = RmiName_CG_RequestLobbyFurnitureRegistOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestUserMusicEditOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserMusic editUserMusic;
            CommonPacket.Marshaler.Read(__msg, out editUserMusic);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestUserMusicEditOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestUserMusicEditOK,
                    rmiName = RmiName_CG_RequestUserMusicEditOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestUserMusicEditOK(remote, rmiContext, editUserMusic, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestUserMusicEditOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestUserMusicEditOK,
                    rmiName = RmiName_CG_RequestUserMusicEditOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventSeasonPassInfoOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<ClientSeasonPassRankRewardInfo> seasonPassRankRewardInfoList;
            CommonPacket.Marshaler.Read(__msg, out seasonPassRankRewardInfoList);
            UserCommonItem rankPointItemInfo;
            CommonPacket.Marshaler.Read(__msg, out rankPointItemInfo);
            byte currentServerSeasonPassWeek;
            CommonPacket.Marshaler.Read(__msg, out currentServerSeasonPassWeek);
            byte currentClientSeasonPassWeek;
            CommonPacket.Marshaler.Read(__msg, out currentClientSeasonPassWeek);
            byte seasonPassRewardStackCount;
            CommonPacket.Marshaler.Read(__msg, out seasonPassRewardStackCount);
            byte seasonPassBuyStackCount;
            CommonPacket.Marshaler.Read(__msg, out seasonPassBuyStackCount);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventSeasonPassInfoOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventSeasonPassInfoOK,
                    rmiName = RmiName_CG_RequestEventSeasonPassInfoOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventSeasonPassInfoOK(remote, rmiContext, seasonPassRankRewardInfoList, rankPointItemInfo, currentServerSeasonPassWeek, currentClientSeasonPassWeek, seasonPassRewardStackCount, seasonPassBuyStackCount))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventSeasonPassInfoOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventSeasonPassInfoOK,
                    rmiName = RmiName_CG_RequestEventSeasonPassInfoOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventSeasonPassRankUpRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<ItemResultInfo> getItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfoList);
            List<ApRewardInfo> apRewardInfoList;
            CommonPacket.Marshaler.Read(__msg, out apRewardInfoList);
            List<ClientSeasonPassRankRewardInfo> resultInfoList;
            CommonPacket.Marshaler.Read(__msg, out resultInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventSeasonPassRankUpRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventSeasonPassRankUpRewardOK,
                    rmiName = RmiName_CG_RequestEventSeasonPassRankUpRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventSeasonPassRankUpRewardOK(remote, rmiContext, getItemResultInfoList, apRewardInfoList, resultInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventSeasonPassRankUpRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventSeasonPassRankUpRewardOK,
                    rmiName = RmiName_CG_RequestEventSeasonPassRankUpRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventSeasonPassRankUpRewardAllOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<ItemResultInfo> getItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfoList);
            List<ApRewardInfo> apRewardInfoList;
            CommonPacket.Marshaler.Read(__msg, out apRewardInfoList);
            List<ClientSeasonPassRankRewardInfo> resultInfoList;
            CommonPacket.Marshaler.Read(__msg, out resultInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventSeasonPassRankUpRewardAllOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventSeasonPassRankUpRewardAllOK,
                    rmiName = RmiName_CG_RequestEventSeasonPassRankUpRewardAllOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventSeasonPassRankUpRewardAllOK(remote, rmiContext, getItemResultInfoList, apRewardInfoList, resultInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventSeasonPassRankUpRewardAllOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventSeasonPassRankUpRewardAllOK,
                    rmiName = RmiName_CG_RequestEventSeasonPassRankUpRewardAllOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventSeasonPassRankBuyOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<ItemResultInfo> getItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfoList);
            List<ItemResultInfo> useItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfoList);
            PaybackEventResultInfo paybackEventresultInfo;
            CommonPacket.Marshaler.Read(__msg, out paybackEventresultInfo);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventSeasonPassRankBuyOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventSeasonPassRankBuyOK,
                    rmiName = RmiName_CG_RequestEventSeasonPassRankBuyOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventSeasonPassRankBuyOK(remote, rmiContext, getItemResultInfoList, useItemResultInfoList, paybackEventresultInfo, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventSeasonPassRankBuyOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventSeasonPassRankBuyOK,
                    rmiName = RmiName_CG_RequestEventSeasonPassRankBuyOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventExchangeOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserExchangeEventInfo userExchangeInfo;
            CommonPacket.Marshaler.Read(__msg, out userExchangeInfo);
            List<ItemResultInfo> materialItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out materialItemResultInfoList);
            ItemResultInfo getItemResultInfo;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfo);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            PaybackEventResultInfo paybackEventresultInfo;
            CommonPacket.Marshaler.Read(__msg, out paybackEventresultInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventExchangeOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventExchangeOK,
                    rmiName = RmiName_CG_RequestEventExchangeOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventExchangeOK(remote, rmiContext, userExchangeInfo, materialItemResultInfoList, getItemResultInfo, missionResult, paybackEventresultInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventExchangeOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventExchangeOK,
                    rmiName = RmiName_CG_RequestEventExchangeOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventPlayCountRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int eventSEQ;
            CommonPacket.Marshaler.Read(__msg, out eventSEQ);
            UserPlayCountEventInfo userPlayCountEventInfo;
            CommonPacket.Marshaler.Read(__msg, out userPlayCountEventInfo);
            List<ItemResultInfo> getItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            List<UserPackageMissionInfo> userPackageMissionInfoList;
            CommonPacket.Marshaler.Read(__msg, out userPackageMissionInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventPlayCountRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventPlayCountRewardOK,
                    rmiName = RmiName_CG_RequestEventPlayCountRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventPlayCountRewardOK(remote, rmiContext, eventSEQ, userPlayCountEventInfo, getItemResultInfoList, missionResult, userPackageMissionInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventPlayCountRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventPlayCountRewardOK,
                    rmiName = RmiName_CG_RequestEventPlayCountRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestWestSideServerInfo_RandomOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestWestSideServerInfo_RandomOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestWestSideServerInfo_RandomOK,
                    rmiName = RmiName_CG_RequestWestSideServerInfo_RandomOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestWestSideServerInfo_RandomOK(remote, rmiContext))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWestSideServerInfo_RandomOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestWestSideServerInfo_RandomOK,
                    rmiName = RmiName_CG_RequestWestSideServerInfo_RandomOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestWestSideServerInfo_FixedOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestWestSideServerInfo_FixedOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestWestSideServerInfo_FixedOK,
                    rmiName = RmiName_CG_RequestWestSideServerInfo_FixedOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestWestSideServerInfo_FixedOK(remote, rmiContext))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWestSideServerInfo_FixedOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestWestSideServerInfo_FixedOK,
                    rmiName = RmiName_CG_RequestWestSideServerInfo_FixedOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestWestSideServerInfo_RecommandOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int channelID;
            CommonPacket.Marshaler.Read(__msg, out channelID);
            int maxChannelNumber;
            CommonPacket.Marshaler.Read(__msg, out maxChannelNumber);
            WestRoomType selectRoomType;
            CommonPacket.Marshaler.Read(__msg, out selectRoomType);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestWestSideServerInfo_RecommandOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestWestSideServerInfo_RecommandOK,
                    rmiName = RmiName_CG_RequestWestSideServerInfo_RecommandOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestWestSideServerInfo_RecommandOK(remote, rmiContext, channelID, maxChannelNumber, selectRoomType))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWestSideServerInfo_RecommandOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestWestSideServerInfo_RecommandOK,
                    rmiName = RmiName_CG_RequestWestSideServerInfo_RecommandOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestWestSide_PlayerInfoOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            WestSideUserSimpleInfo westSideUserSimpleInfo;
            CommonPacket.Marshaler.Read(__msg, out westSideUserSimpleInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestWestSide_PlayerInfoOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestWestSide_PlayerInfoOK,
                    rmiName = RmiName_CG_RequestWestSide_PlayerInfoOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestWestSide_PlayerInfoOK(remote, rmiContext, westSideUserSimpleInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWestSide_PlayerInfoOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestWestSide_PlayerInfoOK,
                    rmiName = RmiName_CG_RequestWestSide_PlayerInfoOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestWestSide_PlayerteamInfoOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            OtherPlayerTeamInfo otherPlayerTeamInfo;
            CommonPacket.Marshaler.Read(__msg, out otherPlayerTeamInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestWestSide_PlayerteamInfoOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestWestSide_PlayerteamInfoOK,
                    rmiName = RmiName_CG_RequestWestSide_PlayerteamInfoOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestWestSide_PlayerteamInfoOK(remote, rmiContext, otherPlayerTeamInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWestSide_PlayerteamInfoOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestWestSide_PlayerteamInfoOK,
                    rmiName = RmiName_CG_RequestWestSide_PlayerteamInfoOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestWestSide_PlayerGuildInfoOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            GuildInfo guildInfo;
            CommonPacket.Marshaler.Read(__msg, out guildInfo);
            List<GuildMemberInfo> memberInfoList;
            CommonPacket.Marshaler.Read(__msg, out memberInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestWestSide_PlayerGuildInfoOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestWestSide_PlayerGuildInfoOK,
                    rmiName = RmiName_CG_RequestWestSide_PlayerGuildInfoOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestWestSide_PlayerGuildInfoOK(remote, rmiContext, guildInfo, memberInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWestSide_PlayerGuildInfoOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestWestSide_PlayerGuildInfoOK,
                    rmiName = RmiName_CG_RequestWestSide_PlayerGuildInfoOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestWorldChattingChannelOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int targetChannelId;
            CommonPacket.Marshaler.Read(__msg, out targetChannelId);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestWorldChattingChannelOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestWorldChattingChannelOK,
                    rmiName = RmiName_CG_RequestWorldChattingChannelOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestWorldChattingChannelOK(remote, rmiContext, targetChannelId))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWorldChattingChannelOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestWorldChattingChannelOK,
                    rmiName = RmiName_CG_RequestWorldChattingChannelOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestWestSideServerInfo_RandomNotify(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            WestSideServerInfo westSideServerInfo;
            CommonPacket.Marshaler.Read(__msg, out westSideServerInfo);
            int maxChannelNumber;
            CommonPacket.Marshaler.Read(__msg, out maxChannelNumber);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestWestSideServerInfo_RandomNotify);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestWestSideServerInfo_RandomNotify,
                    rmiName = RmiName_CG_RequestWestSideServerInfo_RandomNotify,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestWestSideServerInfo_RandomNotify(remote, rmiContext, westSideServerInfo, maxChannelNumber))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWestSideServerInfo_RandomNotify);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestWestSideServerInfo_RandomNotify,
                    rmiName = RmiName_CG_RequestWestSideServerInfo_RandomNotify,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestWestSideServerInfo_FixedNotify(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            WestSideServerInfo westSideServerInfo;
            CommonPacket.Marshaler.Read(__msg, out westSideServerInfo);
            int maxChannelNumber;
            CommonPacket.Marshaler.Read(__msg, out maxChannelNumber);
            bool isChangeRandom;
            CommonPacket.Marshaler.Read(__msg, out isChangeRandom);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestWestSideServerInfo_FixedNotify);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestWestSideServerInfo_FixedNotify,
                    rmiName = RmiName_CG_RequestWestSideServerInfo_FixedNotify,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestWestSideServerInfo_FixedNotify(remote, rmiContext, westSideServerInfo, maxChannelNumber, isChangeRandom))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWestSideServerInfo_FixedNotify);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestWestSideServerInfo_FixedNotify,
                    rmiName = RmiName_CG_RequestWestSideServerInfo_FixedNotify,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventExchangeInfoOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            bool isActive;
            CommonPacket.Marshaler.Read(__msg, out isActive);
            DateTime serverTime;
            CommonPacket.Marshaler.Read(__msg, out serverTime);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventExchangeInfoOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventExchangeInfoOK,
                    rmiName = RmiName_CG_RequestEventExchangeInfoOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventExchangeInfoOK(remote, rmiContext, isActive, serverTime))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventExchangeInfoOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventExchangeInfoOK,
                    rmiName = RmiName_CG_RequestEventExchangeInfoOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventExchangeBoxGachaInfoOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int eventSEQ;
            CommonPacket.Marshaler.Read(__msg, out eventSEQ);
            byte resetCount;
            CommonPacket.Marshaler.Read(__msg, out resetCount);
            int groupIndex;
            CommonPacket.Marshaler.Read(__msg, out groupIndex);
            List<UserExchangeEventInfo> userExchangeBoxGachaList;
            CommonPacket.Marshaler.Read(__msg, out userExchangeBoxGachaList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventExchangeBoxGachaInfoOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventExchangeBoxGachaInfoOK,
                    rmiName = RmiName_CG_RequestEventExchangeBoxGachaInfoOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventExchangeBoxGachaInfoOK(remote, rmiContext, eventSEQ, resetCount, groupIndex, userExchangeBoxGachaList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventExchangeBoxGachaInfoOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventExchangeBoxGachaInfoOK,
                    rmiName = RmiName_CG_RequestEventExchangeBoxGachaInfoOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventExchangeBoxGachaPickupOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            byte resetCount;
            CommonPacket.Marshaler.Read(__msg, out resetCount);
            int groupIndex;
            CommonPacket.Marshaler.Read(__msg, out groupIndex);
            List<UserExchangeEventInfo> userExchangeBoxGachaList;
            CommonPacket.Marshaler.Read(__msg, out userExchangeBoxGachaList);
            List<ItemResultInfo> getItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfoList);
            List<ItemResultInfo> useItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            PaybackEventResultInfo paybackEventResultInfo;
            CommonPacket.Marshaler.Read(__msg, out paybackEventResultInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventExchangeBoxGachaPickupOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventExchangeBoxGachaPickupOK,
                    rmiName = RmiName_CG_RequestEventExchangeBoxGachaPickupOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventExchangeBoxGachaPickupOK(remote, rmiContext, resetCount, groupIndex, userExchangeBoxGachaList, getItemResultInfoList, useItemResultInfoList, missionResult, paybackEventResultInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventExchangeBoxGachaPickupOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventExchangeBoxGachaPickupOK,
                    rmiName = RmiName_CG_RequestEventExchangeBoxGachaPickupOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventExchangeBoxGachaResetOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            byte resetCount;
            CommonPacket.Marshaler.Read(__msg, out resetCount);
            int groupIndex;
            CommonPacket.Marshaler.Read(__msg, out groupIndex);
            List<UserExchangeEventInfo> userExchangeBoxGachaList;
            CommonPacket.Marshaler.Read(__msg, out userExchangeBoxGachaList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventExchangeBoxGachaResetOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventExchangeBoxGachaResetOK,
                    rmiName = RmiName_CG_RequestEventExchangeBoxGachaResetOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventExchangeBoxGachaResetOK(remote, rmiContext, resetCount, groupIndex, userExchangeBoxGachaList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventExchangeBoxGachaResetOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventExchangeBoxGachaResetOK,
                    rmiName = RmiName_CG_RequestEventExchangeBoxGachaResetOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventPaybackRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserPaybackEventInfo userPaybackEventInfo;
            CommonPacket.Marshaler.Read(__msg, out userPaybackEventInfo);
            ItemResultInfo getItemResultInfo;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfo);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventPaybackRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventPaybackRewardOK,
                    rmiName = RmiName_CG_RequestEventPaybackRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventPaybackRewardOK(remote, rmiContext, userPaybackEventInfo, getItemResultInfo, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventPaybackRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventPaybackRewardOK,
                    rmiName = RmiName_CG_RequestEventPaybackRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventSnsShareProgressOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int eventSEQ;
            CommonPacket.Marshaler.Read(__msg, out eventSEQ);
            UserSnsShareEventInfo userSnsShareEventInfo;
            CommonPacket.Marshaler.Read(__msg, out userSnsShareEventInfo);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventSnsShareProgressOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventSnsShareProgressOK,
                    rmiName = RmiName_CG_RequestEventSnsShareProgressOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventSnsShareProgressOK(remote, rmiContext, eventSEQ, userSnsShareEventInfo, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventSnsShareProgressOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventSnsShareProgressOK,
                    rmiName = RmiName_CG_RequestEventSnsShareProgressOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventSnsShareRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int eventSEQ;
            CommonPacket.Marshaler.Read(__msg, out eventSEQ);
            UserSnsShareEventInfo userSnsShareEventInfo;
            CommonPacket.Marshaler.Read(__msg, out userSnsShareEventInfo);
            List<ApRewardInfo> apRewardInfoList;
            CommonPacket.Marshaler.Read(__msg, out apRewardInfoList);
            List<ItemResultInfo> getItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventSnsShareRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventSnsShareRewardOK,
                    rmiName = RmiName_CG_RequestEventSnsShareRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventSnsShareRewardOK(remote, rmiContext, eventSEQ, userSnsShareEventInfo, apRewardInfoList, getItemResultInfoList, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventSnsShareRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventSnsShareRewardOK,
                    rmiName = RmiName_CG_RequestEventSnsShareRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestGagueEventInfoOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserGagueEventInfo userGagueEventInfo;
            CommonPacket.Marshaler.Read(__msg, out userGagueEventInfo);
            int remainFreeChargeSEC;
            CommonPacket.Marshaler.Read(__msg, out remainFreeChargeSEC);
            int remainFreeChargeEndSEC;
            CommonPacket.Marshaler.Read(__msg, out remainFreeChargeEndSEC);
            bool freeChargeAble;
            CommonPacket.Marshaler.Read(__msg, out freeChargeAble);
            int todayChargePoint;
            CommonPacket.Marshaler.Read(__msg, out todayChargePoint);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestGagueEventInfoOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestGagueEventInfoOK,
                    rmiName = RmiName_CG_RequestGagueEventInfoOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestGagueEventInfoOK(remote, rmiContext, userGagueEventInfo, remainFreeChargeSEC, remainFreeChargeEndSEC, freeChargeAble, todayChargePoint))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGagueEventInfoOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestGagueEventInfoOK,
                    rmiName = RmiName_CG_RequestGagueEventInfoOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestGagueEventChargeOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int chargePoint;
            CommonPacket.Marshaler.Read(__msg, out chargePoint);
            UserGagueEventInfo userGagueEventInfo;
            CommonPacket.Marshaler.Read(__msg, out userGagueEventInfo);
            ItemResultInfo useItemResultInfo;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestGagueEventChargeOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestGagueEventChargeOK,
                    rmiName = RmiName_CG_RequestGagueEventChargeOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestGagueEventChargeOK(remote, rmiContext, chargePoint, userGagueEventInfo, useItemResultInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGagueEventChargeOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestGagueEventChargeOK,
                    rmiName = RmiName_CG_RequestGagueEventChargeOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestGagueEventRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserGagueEventInfo userGagueEventInfo;
            CommonPacket.Marshaler.Read(__msg, out userGagueEventInfo);
            ItemResultInfo getItemResultInfo;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestGagueEventRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestGagueEventRewardOK,
                    rmiName = RmiName_CG_RequestGagueEventRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestGagueEventRewardOK(remote, rmiContext, userGagueEventInfo, getItemResultInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGagueEventRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestGagueEventRewardOK,
                    rmiName = RmiName_CG_RequestGagueEventRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestGagueEventResetOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserGagueEventInfo userGagueEventInfo;
            CommonPacket.Marshaler.Read(__msg, out userGagueEventInfo);
            List<ItemResultInfo> useItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfoList);
            PaybackEventResultInfo m_paybackEventResultInfo;
            CommonPacket.Marshaler.Read(__msg, out m_paybackEventResultInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestGagueEventResetOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestGagueEventResetOK,
                    rmiName = RmiName_CG_RequestGagueEventResetOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestGagueEventResetOK(remote, rmiContext, userGagueEventInfo, useItemResultInfoList, m_paybackEventResultInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGagueEventResetOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestGagueEventResetOK,
                    rmiName = RmiName_CG_RequestGagueEventResetOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventLadderRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            EventLadderResult eventLadderResult;
            CommonPacket.Marshaler.Read(__msg, out eventLadderResult);
            byte eventLadderPlayCount;
            CommonPacket.Marshaler.Read(__msg, out eventLadderPlayCount);
            List<ItemResultInfo> useItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfoList);
            List<ItemResultInfo> getItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            PaybackEventResultInfo paybackEventresultInfo;
            CommonPacket.Marshaler.Read(__msg, out paybackEventresultInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventLadderRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventLadderRewardOK,
                    rmiName = RmiName_CG_RequestEventLadderRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventLadderRewardOK(remote, rmiContext, eventLadderResult, eventLadderPlayCount, useItemResultInfoList, getItemResultInfoList, missionResult, paybackEventresultInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventLadderRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventLadderRewardOK,
                    rmiName = RmiName_CG_RequestEventLadderRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventLobbyGiftRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            EventLobbyGiftResult eventLobbyGiftResult;
            CommonPacket.Marshaler.Read(__msg, out eventLobbyGiftResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventLobbyGiftRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventLobbyGiftRewardOK,
                    rmiName = RmiName_CG_RequestEventLobbyGiftRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventLobbyGiftRewardOK(remote, rmiContext, eventLobbyGiftResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventLobbyGiftRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventLobbyGiftRewardOK,
                    rmiName = RmiName_CG_RequestEventLobbyGiftRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventTimeMissionInfoOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int currentSeverTimeMissionDays;
            CommonPacket.Marshaler.Read(__msg, out currentSeverTimeMissionDays);
            int currentClientTimeMissionDays;
            CommonPacket.Marshaler.Read(__msg, out currentClientTimeMissionDays);
            ClientSendTimeMissionEventInfo clientSendTimeMissionEventInfo;
            CommonPacket.Marshaler.Read(__msg, out clientSendTimeMissionEventInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventTimeMissionInfoOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventTimeMissionInfoOK,
                    rmiName = RmiName_CG_RequestEventTimeMissionInfoOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventTimeMissionInfoOK(remote, rmiContext, currentSeverTimeMissionDays, currentClientTimeMissionDays, clientSendTimeMissionEventInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventTimeMissionInfoOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventTimeMissionInfoOK,
                    rmiName = RmiName_CG_RequestEventTimeMissionInfoOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventTimeMissionStartOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            ClientSendTimeMissionEventInfo updateUserTimeMissionEventInfo;
            CommonPacket.Marshaler.Read(__msg, out updateUserTimeMissionEventInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventTimeMissionStartOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventTimeMissionStartOK,
                    rmiName = RmiName_CG_RequestEventTimeMissionStartOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventTimeMissionStartOK(remote, rmiContext, updateUserTimeMissionEventInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventTimeMissionStartOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventTimeMissionStartOK,
                    rmiName = RmiName_CG_RequestEventTimeMissionStartOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventLobbyDecorationRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int eventSEQ;
            CommonPacket.Marshaler.Read(__msg, out eventSEQ);
            UserEventLobbyDecorationInfo userEventLobbyDecorationInfo;
            CommonPacket.Marshaler.Read(__msg, out userEventLobbyDecorationInfo);
            List<ItemResultInfo> getItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfoList);
            List<ItemResultInfo> useItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventLobbyDecorationRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventLobbyDecorationRewardOK,
                    rmiName = RmiName_CG_RequestEventLobbyDecorationRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventLobbyDecorationRewardOK(remote, rmiContext, eventSEQ, userEventLobbyDecorationInfo, getItemResultInfoList, useItemResultInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventLobbyDecorationRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventLobbyDecorationRewardOK,
                    rmiName = RmiName_CG_RequestEventLobbyDecorationRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventPvpWinCountRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserPVPWinCountEventInfo pvpWinCountEventInfo;
            CommonPacket.Marshaler.Read(__msg, out pvpWinCountEventInfo);
            List<ItemResultInfo> getItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventPvpWinCountRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventPvpWinCountRewardOK,
                    rmiName = RmiName_CG_RequestEventPvpWinCountRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventPvpWinCountRewardOK(remote, rmiContext, pvpWinCountEventInfo, getItemResultInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventPvpWinCountRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventPvpWinCountRewardOK,
                    rmiName = RmiName_CG_RequestEventPvpWinCountRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventChapterClearRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserChapterClearEventInfo chapterClearEventInfo;
            CommonPacket.Marshaler.Read(__msg, out chapterClearEventInfo);
            List<ItemResultInfo> getItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventChapterClearRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventChapterClearRewardOK,
                    rmiName = RmiName_CG_RequestEventChapterClearRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventChapterClearRewardOK(remote, rmiContext, chapterClearEventInfo, getItemResultInfoList, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventChapterClearRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventChapterClearRewardOK,
                    rmiName = RmiName_CG_RequestEventChapterClearRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestRegistPlayTitleOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int playTitleID;
            CommonPacket.Marshaler.Read(__msg, out playTitleID);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestRegistPlayTitleOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestRegistPlayTitleOK,
                    rmiName = RmiName_CG_RequestRegistPlayTitleOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestRegistPlayTitleOK(remote, rmiContext, playTitleID))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestRegistPlayTitleOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestRegistPlayTitleOK,
                    rmiName = RmiName_CG_RequestRegistPlayTitleOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestPlayTitleMissionRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<int> userPlayTitleList;
            CommonPacket.Marshaler.Read(__msg, out userPlayTitleList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestPlayTitleMissionRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestPlayTitleMissionRewardOK,
                    rmiName = RmiName_CG_RequestPlayTitleMissionRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestPlayTitleMissionRewardOK(remote, rmiContext, userPlayTitleList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestPlayTitleMissionRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestPlayTitleMissionRewardOK,
                    rmiName = RmiName_CG_RequestPlayTitleMissionRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestPlayTitleInfoOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<int> userPlayTitleList;
            CommonPacket.Marshaler.Read(__msg, out userPlayTitleList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            List<PlayTitleGroupActiveInfo> playTitleGroupActiveInfoList;
            CommonPacket.Marshaler.Read(__msg, out playTitleGroupActiveInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestPlayTitleInfoOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestPlayTitleInfoOK,
                    rmiName = RmiName_CG_RequestPlayTitleInfoOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestPlayTitleInfoOK(remote, rmiContext, userPlayTitleList, missionResult, playTitleGroupActiveInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestPlayTitleInfoOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestPlayTitleInfoOK,
                    rmiName = RmiName_CG_RequestPlayTitleInfoOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventBingoInfoOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserEventBingoInfo bingoInfo;
            CommonPacket.Marshaler.Read(__msg, out bingoInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventBingoInfoOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventBingoInfoOK,
                    rmiName = RmiName_CG_RequestEventBingoInfoOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventBingoInfoOK(remote, rmiContext, bingoInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventBingoInfoOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventBingoInfoOK,
                    rmiName = RmiName_CG_RequestEventBingoInfoOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventBingoRandomNumberOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            EventBingoRandomNumberResult result;
            CommonPacket.Marshaler.Read(__msg, out result);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventBingoRandomNumberOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventBingoRandomNumberOK,
                    rmiName = RmiName_CG_RequestEventBingoRandomNumberOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventBingoRandomNumberOK(remote, rmiContext, result, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventBingoRandomNumberOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventBingoRandomNumberOK,
                    rmiName = RmiName_CG_RequestEventBingoRandomNumberOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventBingoExchangeNumberOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            EventBingoExchangeResult result;
            CommonPacket.Marshaler.Read(__msg, out result);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventBingoExchangeNumberOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventBingoExchangeNumberOK,
                    rmiName = RmiName_CG_RequestEventBingoExchangeNumberOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventBingoExchangeNumberOK(remote, rmiContext, result, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventBingoExchangeNumberOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventBingoExchangeNumberOK,
                    rmiName = RmiName_CG_RequestEventBingoExchangeNumberOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventBingoResetOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserEventBingoInfo bingoInfo;
            CommonPacket.Marshaler.Read(__msg, out bingoInfo);
            List<NeedItemInfo> normalRewardItemInfoList;
            CommonPacket.Marshaler.Read(__msg, out normalRewardItemInfoList);
            NeedItemInfo allClearRewardItemInfo;
            CommonPacket.Marshaler.Read(__msg, out allClearRewardItemInfo);
            List<ItemResultInfo> itemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out itemResultInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventBingoResetOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventBingoResetOK,
                    rmiName = RmiName_CG_RequestEventBingoResetOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventBingoResetOK(remote, rmiContext, bingoInfo, normalRewardItemInfoList, allClearRewardItemInfo, itemResultInfoList, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventBingoResetOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventBingoResetOK,
                    rmiName = RmiName_CG_RequestEventBingoResetOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestSubdueCreateOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            RelayServerInfo relayServerInfo;
            CommonPacket.Marshaler.Read(__msg, out relayServerInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestSubdueCreateOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestSubdueCreateOK,
                    rmiName = RmiName_CG_RequestSubdueCreateOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestSubdueCreateOK(remote, rmiContext, relayServerInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSubdueCreateOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestSubdueCreateOK,
                    rmiName = RmiName_CG_RequestSubdueCreateOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestSubdueJoinOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            BossWarJoinResult joinResult;
            CommonPacket.Marshaler.Read(__msg, out joinResult);
            RelayServerInfo relayServerInfo;
            CommonPacket.Marshaler.Read(__msg, out relayServerInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestSubdueJoinOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestSubdueJoinOK,
                    rmiName = RmiName_CG_RequestSubdueJoinOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestSubdueJoinOK(remote, rmiContext, joinResult, relayServerInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSubdueJoinOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestSubdueJoinOK,
                    rmiName = RmiName_CG_RequestSubdueJoinOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestSubdueOwnerGameStartOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            BossWarBattleStartResult battleStartResult;
            CommonPacket.Marshaler.Read(__msg, out battleStartResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestSubdueOwnerGameStartOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestSubdueOwnerGameStartOK,
                    rmiName = RmiName_CG_RequestSubdueOwnerGameStartOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestSubdueOwnerGameStartOK(remote, rmiContext, battleStartResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSubdueOwnerGameStartOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestSubdueOwnerGameStartOK,
                    rmiName = RmiName_CG_RequestSubdueOwnerGameStartOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestSubdueLoadingCompleteOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            SubdueBossPlayInfo subdueBossPlayInfo;
            CommonPacket.Marshaler.Read(__msg, out subdueBossPlayInfo);
            bool isReturnToLobby;
            CommonPacket.Marshaler.Read(__msg, out isReturnToLobby);
            ItemResultInfo useItemResultInfo;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfo);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            bool isBuffUsed;
            CommonPacket.Marshaler.Read(__msg, out isBuffUsed);
            FoodBuffInfo clientFoodBuffInfo;
            CommonPacket.Marshaler.Read(__msg, out clientFoodBuffInfo);
            List<int> usedEventLobbyBuffIdList;
            CommonPacket.Marshaler.Read(__msg, out usedEventLobbyBuffIdList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestSubdueLoadingCompleteOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestSubdueLoadingCompleteOK,
                    rmiName = RmiName_CG_RequestSubdueLoadingCompleteOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestSubdueLoadingCompleteOK(remote, rmiContext, subdueBossPlayInfo, isReturnToLobby, useItemResultInfo, missionResult, isBuffUsed, clientFoodBuffInfo, usedEventLobbyBuffIdList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSubdueLoadingCompleteOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestSubdueLoadingCompleteOK,
                    rmiName = RmiName_CG_RequestSubdueLoadingCompleteOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestSubdueOnlineFriendListOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<BossWarUserProfileInfo> friendProfileInfoList;
            CommonPacket.Marshaler.Read(__msg, out friendProfileInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestSubdueOnlineFriendListOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestSubdueOnlineFriendListOK,
                    rmiName = RmiName_CG_RequestSubdueOnlineFriendListOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestSubdueOnlineFriendListOK(remote, rmiContext, friendProfileInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSubdueOnlineFriendListOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestSubdueOnlineFriendListOK,
                    rmiName = RmiName_CG_RequestSubdueOnlineFriendListOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestSubdueOnlineGuildMemberListOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<BossWarUserProfileInfo> guildMemberProfileInfoList;
            CommonPacket.Marshaler.Read(__msg, out guildMemberProfileInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestSubdueOnlineGuildMemberListOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestSubdueOnlineGuildMemberListOK,
                    rmiName = RmiName_CG_RequestSubdueOnlineGuildMemberListOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestSubdueOnlineGuildMemberListOK(remote, rmiContext, guildMemberProfileInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSubdueOnlineGuildMemberListOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestSubdueOnlineGuildMemberListOK,
                    rmiName = RmiName_CG_RequestSubdueOnlineGuildMemberListOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestSubdueOnlineUserRankRangeListOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<BossWarUserProfileInfo> userProfileInfoList;
            CommonPacket.Marshaler.Read(__msg, out userProfileInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestSubdueOnlineUserRankRangeListOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestSubdueOnlineUserRankRangeListOK,
                    rmiName = RmiName_CG_RequestSubdueOnlineUserRankRangeListOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestSubdueOnlineUserRankRangeListOK(remote, rmiContext, userProfileInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSubdueOnlineUserRankRangeListOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestSubdueOnlineUserRankRangeListOK,
                    rmiName = RmiName_CG_RequestSubdueOnlineUserRankRangeListOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestSubdueInvitationReceiveListOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<BossWarClientSendGameInfo> invitedGameInfoList;
            CommonPacket.Marshaler.Read(__msg, out invitedGameInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestSubdueInvitationReceiveListOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestSubdueInvitationReceiveListOK,
                    rmiName = RmiName_CG_RequestSubdueInvitationReceiveListOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestSubdueInvitationReceiveListOK(remote, rmiContext, invitedGameInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSubdueInvitationReceiveListOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestSubdueInvitationReceiveListOK,
                    rmiName = RmiName_CG_RequestSubdueInvitationReceiveListOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestSubdueRemoveInvitationOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int gameSN;
            CommonPacket.Marshaler.Read(__msg, out gameSN);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestSubdueRemoveInvitationOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestSubdueRemoveInvitationOK,
                    rmiName = RmiName_CG_RequestSubdueRemoveInvitationOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestSubdueRemoveInvitationOK(remote, rmiContext, gameSN))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSubdueRemoveInvitationOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestSubdueRemoveInvitationOK,
                    rmiName = RmiName_CG_RequestSubdueRemoveInvitationOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestSubdueInviteOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<long> invitedUSNList;
            CommonPacket.Marshaler.Read(__msg, out invitedUSNList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestSubdueInviteOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestSubdueInviteOK,
                    rmiName = RmiName_CG_RequestSubdueInviteOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestSubdueInviteOK(remote, rmiContext, invitedUSNList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSubdueInviteOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestSubdueInviteOK,
                    rmiName = RmiName_CG_RequestSubdueInviteOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestSubdueRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            SubdueBossRewardResult rewardResult;
            CommonPacket.Marshaler.Read(__msg, out rewardResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestSubdueRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestSubdueRewardOK,
                    rmiName = RmiName_CG_RequestSubdueRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestSubdueRewardOK(remote, rmiContext, rewardResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSubdueRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestSubdueRewardOK,
                    rmiName = RmiName_CG_RequestSubdueRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_NotifySubdueInviteOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserProfileInfo hostInfo;
            CommonPacket.Marshaler.Read(__msg, out hostInfo);
            BossWarClientSendGameInfo invitedGameInfo;
            CommonPacket.Marshaler.Read(__msg, out invitedGameInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_NotifySubdueInviteOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_NotifySubdueInviteOK,
                    rmiName = RmiName_CG_NotifySubdueInviteOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_NotifySubdueInviteOK(remote, rmiContext, hostInfo, invitedGameInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_NotifySubdueInviteOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_NotifySubdueInviteOK,
                    rmiName = RmiName_CG_NotifySubdueInviteOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestPatrolMissionInfoOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            PatrolInfo patrolInfo;
            CommonPacket.Marshaler.Read(__msg, out patrolInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestPatrolMissionInfoOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestPatrolMissionInfoOK,
                    rmiName = RmiName_CG_RequestPatrolMissionInfoOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestPatrolMissionInfoOK(remote, rmiContext, patrolInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestPatrolMissionInfoOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestPatrolMissionInfoOK,
                    rmiName = RmiName_CG_RequestPatrolMissionInfoOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestPatrolMissionStartOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            PatrolMissionInfo missionInfo;
            CommonPacket.Marshaler.Read(__msg, out missionInfo);
            List<UserHeroPassiveGroupInfo> heroPassiveGroupList;
            CommonPacket.Marshaler.Read(__msg, out heroPassiveGroupList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestPatrolMissionStartOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestPatrolMissionStartOK,
                    rmiName = RmiName_CG_RequestPatrolMissionStartOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestPatrolMissionStartOK(remote, rmiContext, missionInfo, heroPassiveGroupList, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestPatrolMissionStartOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestPatrolMissionStartOK,
                    rmiName = RmiName_CG_RequestPatrolMissionStartOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestPatrolMissionCancelOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int patrolId;
            CommonPacket.Marshaler.Read(__msg, out patrolId);
            PatrolMissionInfo newMIssionInfo;
            CommonPacket.Marshaler.Read(__msg, out newMIssionInfo);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestPatrolMissionCancelOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestPatrolMissionCancelOK,
                    rmiName = RmiName_CG_RequestPatrolMissionCancelOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestPatrolMissionCancelOK(remote, rmiContext, patrolId, newMIssionInfo, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestPatrolMissionCancelOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestPatrolMissionCancelOK,
                    rmiName = RmiName_CG_RequestPatrolMissionCancelOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestPatrolMissionRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<PatrolMissionInfo> patrolMissionInfoList;
            CommonPacket.Marshaler.Read(__msg, out patrolMissionInfoList);
            List<ItemResultInfo> itemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out itemResultInfoList);
            List<ItemResultInfo> passiveItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out passiveItemResultInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestPatrolMissionRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestPatrolMissionRewardOK,
                    rmiName = RmiName_CG_RequestPatrolMissionRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestPatrolMissionRewardOK(remote, rmiContext, patrolMissionInfoList, itemResultInfoList, passiveItemResultInfoList, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestPatrolMissionRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestPatrolMissionRewardOK,
                    rmiName = RmiName_CG_RequestPatrolMissionRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestPatrolMissionTimeRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            ItemResultInfo itemResultInfo;
            CommonPacket.Marshaler.Read(__msg, out itemResultInfo);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            byte rotationId;
            CommonPacket.Marshaler.Read(__msg, out rotationId);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestPatrolMissionTimeRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestPatrolMissionTimeRewardOK,
                    rmiName = RmiName_CG_RequestPatrolMissionTimeRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestPatrolMissionTimeRewardOK(remote, rmiContext, itemResultInfo, missionResult, rotationId))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestPatrolMissionTimeRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestPatrolMissionTimeRewardOK,
                    rmiName = RmiName_CG_RequestPatrolMissionTimeRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventExchangeCardInfoOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            EventExchangeCardInfo eventExchangeCardInfo;
            CommonPacket.Marshaler.Read(__msg, out eventExchangeCardInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventExchangeCardInfoOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventExchangeCardInfoOK,
                    rmiName = RmiName_CG_RequestEventExchangeCardInfoOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventExchangeCardInfoOK(remote, rmiContext, eventExchangeCardInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventExchangeCardInfoOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventExchangeCardInfoOK,
                    rmiName = RmiName_CG_RequestEventExchangeCardInfoOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventExchangeCardSetupOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            EventExchangeCardInfo eventExchangeCardInfo;
            CommonPacket.Marshaler.Read(__msg, out eventExchangeCardInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventExchangeCardSetupOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventExchangeCardSetupOK,
                    rmiName = RmiName_CG_RequestEventExchangeCardSetupOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventExchangeCardSetupOK(remote, rmiContext, eventExchangeCardInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventExchangeCardSetupOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventExchangeCardSetupOK,
                    rmiName = RmiName_CG_RequestEventExchangeCardSetupOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventExchangeCardChoiceManualOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            EventExchangeCardInfo eventExchangeCardInfo;
            CommonPacket.Marshaler.Read(__msg, out eventExchangeCardInfo);
            List<ItemResultInfo> getItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfoList);
            List<ItemResultInfo> useItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventExchangeCardChoiceManualOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventExchangeCardChoiceManualOK,
                    rmiName = RmiName_CG_RequestEventExchangeCardChoiceManualOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventExchangeCardChoiceManualOK(remote, rmiContext, eventExchangeCardInfo, getItemResultInfoList, useItemResultInfoList, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventExchangeCardChoiceManualOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventExchangeCardChoiceManualOK,
                    rmiName = RmiName_CG_RequestEventExchangeCardChoiceManualOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventExchangeCardChoiceAutoOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            EventExchangeCardInfo eventExchangeCardInfo;
            CommonPacket.Marshaler.Read(__msg, out eventExchangeCardInfo);
            List<ItemResultInfo> getItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfoList);
            List<ItemResultInfo> useItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventExchangeCardChoiceAutoOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventExchangeCardChoiceAutoOK,
                    rmiName = RmiName_CG_RequestEventExchangeCardChoiceAutoOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventExchangeCardChoiceAutoOK(remote, rmiContext, eventExchangeCardInfo, getItemResultInfoList, useItemResultInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventExchangeCardChoiceAutoOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventExchangeCardChoiceAutoOK,
                    rmiName = RmiName_CG_RequestEventExchangeCardChoiceAutoOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventExchangeCardResetOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            EventExchangeCardInfo eventExchangeCardInfo;
            CommonPacket.Marshaler.Read(__msg, out eventExchangeCardInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventExchangeCardResetOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventExchangeCardResetOK,
                    rmiName = RmiName_CG_RequestEventExchangeCardResetOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventExchangeCardResetOK(remote, rmiContext, eventExchangeCardInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventExchangeCardResetOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventExchangeCardResetOK,
                    rmiName = RmiName_CG_RequestEventExchangeCardResetOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventCraftExchangeOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            ItemResultInfo craftItemInfo;
            CommonPacket.Marshaler.Read(__msg, out craftItemInfo);
            List<ItemResultInfo> useItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventCraftExchangeOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventCraftExchangeOK,
                    rmiName = RmiName_CG_RequestEventCraftExchangeOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventCraftExchangeOK(remote, rmiContext, craftItemInfo, useItemResultInfoList, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventCraftExchangeOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventCraftExchangeOK,
                    rmiName = RmiName_CG_RequestEventCraftExchangeOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventProvisionProvideOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserProvisionEventSectionInfo sectionInfo;
            CommonPacket.Marshaler.Read(__msg, out sectionInfo);
            List<ItemResultInfo> useItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfoList);
            List<ItemResultInfo> provisionRewardItemInfoList;
            CommonPacket.Marshaler.Read(__msg, out provisionRewardItemInfoList);
            ItemResultInfo sectionRewardItemInfo;
            CommonPacket.Marshaler.Read(__msg, out sectionRewardItemInfo);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventProvisionProvideOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventProvisionProvideOK,
                    rmiName = RmiName_CG_RequestEventProvisionProvideOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventProvisionProvideOK(remote, rmiContext, sectionInfo, useItemResultInfoList, provisionRewardItemInfoList, sectionRewardItemInfo, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventProvisionProvideOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventProvisionProvideOK,
                    rmiName = RmiName_CG_RequestEventProvisionProvideOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventProvisionGetFinalRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserProvisionEventInfo provisionEventInfo;
            CommonPacket.Marshaler.Read(__msg, out provisionEventInfo);
            ItemResultInfo finalRewardItemInfo;
            CommonPacket.Marshaler.Read(__msg, out finalRewardItemInfo);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventProvisionGetFinalRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventProvisionGetFinalRewardOK,
                    rmiName = RmiName_CG_RequestEventProvisionGetFinalRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventProvisionGetFinalRewardOK(remote, rmiContext, provisionEventInfo, finalRewardItemInfo, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventProvisionGetFinalRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventProvisionGetFinalRewardOK,
                    rmiName = RmiName_CG_RequestEventProvisionGetFinalRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventExchangeKingAmberOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserExchangeEventInfo userExchangeEventInfo;
            CommonPacket.Marshaler.Read(__msg, out userExchangeEventInfo);
            ItemResultInfo useItemResultInfo;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfo);
            ItemResultInfo getItemResultInfo;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfo);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            List<QuestProgressInfo> questProgressInfoList;
            CommonPacket.Marshaler.Read(__msg, out questProgressInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventExchangeKingAmberOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventExchangeKingAmberOK,
                    rmiName = RmiName_CG_RequestEventExchangeKingAmberOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventExchangeKingAmberOK(remote, rmiContext, userExchangeEventInfo, useItemResultInfo, getItemResultInfo, missionResult, questProgressInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventExchangeKingAmberOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventExchangeKingAmberOK,
                    rmiName = RmiName_CG_RequestEventExchangeKingAmberOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventTreasureHuntInfoOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserTreasureHuntEventInfo userTreasureHuntEventInfo;
            CommonPacket.Marshaler.Read(__msg, out userTreasureHuntEventInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventTreasureHuntInfoOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventTreasureHuntInfoOK,
                    rmiName = RmiName_CG_RequestEventTreasureHuntInfoOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventTreasureHuntInfoOK(remote, rmiContext, userTreasureHuntEventInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventTreasureHuntInfoOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventTreasureHuntInfoOK,
                    rmiName = RmiName_CG_RequestEventTreasureHuntInfoOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventTreasureHuntStartOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserTreasureHuntEventInfo userTreasureHuntEventInfo;
            CommonPacket.Marshaler.Read(__msg, out userTreasureHuntEventInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventTreasureHuntStartOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventTreasureHuntStartOK,
                    rmiName = RmiName_CG_RequestEventTreasureHuntStartOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventTreasureHuntStartOK(remote, rmiContext, userTreasureHuntEventInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventTreasureHuntStartOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventTreasureHuntStartOK,
                    rmiName = RmiName_CG_RequestEventTreasureHuntStartOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventTreasureHuntMoveDiceOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserTreasureHuntEventInfo userTreasureHuntEventInfo;
            CommonPacket.Marshaler.Read(__msg, out userTreasureHuntEventInfo);
            List<ItemResultInfo> useItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfoList);
            List<ItemResultInfo> rewardItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out rewardItemResultInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventTreasureHuntMoveDiceOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventTreasureHuntMoveDiceOK,
                    rmiName = RmiName_CG_RequestEventTreasureHuntMoveDiceOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventTreasureHuntMoveDiceOK(remote, rmiContext, userTreasureHuntEventInfo, useItemResultInfoList, rewardItemResultInfoList, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventTreasureHuntMoveDiceOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventTreasureHuntMoveDiceOK,
                    rmiName = RmiName_CG_RequestEventTreasureHuntMoveDiceOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventTreasureHuntMoveChoosePointOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserTreasureHuntEventInfo userTreasureHuntEventInfo;
            CommonPacket.Marshaler.Read(__msg, out userTreasureHuntEventInfo);
            List<ItemResultInfo> rewardItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out rewardItemResultInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventTreasureHuntMoveChoosePointOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventTreasureHuntMoveChoosePointOK,
                    rmiName = RmiName_CG_RequestEventTreasureHuntMoveChoosePointOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventTreasureHuntMoveChoosePointOK(remote, rmiContext, userTreasureHuntEventInfo, rewardItemResultInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventTreasureHuntMoveChoosePointOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventTreasureHuntMoveChoosePointOK,
                    rmiName = RmiName_CG_RequestEventTreasureHuntMoveChoosePointOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventTreasureHuntChooseRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserTreasureHuntEventInfo userTreasureHuntEventInfo;
            CommonPacket.Marshaler.Read(__msg, out userTreasureHuntEventInfo);
            List<ItemResultInfo> rewardItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out rewardItemResultInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventTreasureHuntChooseRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventTreasureHuntChooseRewardOK,
                    rmiName = RmiName_CG_RequestEventTreasureHuntChooseRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventTreasureHuntChooseRewardOK(remote, rmiContext, userTreasureHuntEventInfo, rewardItemResultInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventTreasureHuntChooseRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventTreasureHuntChooseRewardOK,
                    rmiName = RmiName_CG_RequestEventTreasureHuntChooseRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventTreasureHuntCompleteOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserTreasureHuntEventInfo userTreasureHuntEventInfo;
            CommonPacket.Marshaler.Read(__msg, out userTreasureHuntEventInfo);
            List<ItemResultInfo> useItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventTreasureHuntCompleteOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventTreasureHuntCompleteOK,
                    rmiName = RmiName_CG_RequestEventTreasureHuntCompleteOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventTreasureHuntCompleteOK(remote, rmiContext, userTreasureHuntEventInfo, useItemResultInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventTreasureHuntCompleteOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventTreasureHuntCompleteOK,
                    rmiName = RmiName_CG_RequestEventTreasureHuntCompleteOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventTreasureHuntCompleteRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserTreasureHuntEventInfo userTreasureHuntEventInfo;
            CommonPacket.Marshaler.Read(__msg, out userTreasureHuntEventInfo);
            List<ItemResultInfo> rewardItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out rewardItemResultInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventTreasureHuntCompleteRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventTreasureHuntCompleteRewardOK,
                    rmiName = RmiName_CG_RequestEventTreasureHuntCompleteRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventTreasureHuntCompleteRewardOK(remote, rmiContext, userTreasureHuntEventInfo, rewardItemResultInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventTreasureHuntCompleteRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventTreasureHuntCompleteRewardOK,
                    rmiName = RmiName_CG_RequestEventTreasureHuntCompleteRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventTreasureHuntMissionOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserTreasureHuntEventInfo userTreasureHuntEventInfo;
            CommonPacket.Marshaler.Read(__msg, out userTreasureHuntEventInfo);
            List<ItemResultInfo> useItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfoList);
            List<ItemResultInfo> rewardItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out rewardItemResultInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventTreasureHuntMissionOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventTreasureHuntMissionOK,
                    rmiName = RmiName_CG_RequestEventTreasureHuntMissionOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventTreasureHuntMissionOK(remote, rmiContext, userTreasureHuntEventInfo, useItemResultInfoList, rewardItemResultInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventTreasureHuntMissionOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventTreasureHuntMissionOK,
                    rmiName = RmiName_CG_RequestEventTreasureHuntMissionOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestNMFunTalkKitLoginOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestNMFunTalkKitLoginOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestNMFunTalkKitLoginOK,
                    rmiName = RmiName_CG_RequestNMFunTalkKitLoginOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestNMFunTalkKitLoginOK(remote, rmiContext))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestNMFunTalkKitLoginOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestNMFunTalkKitLoginOK,
                    rmiName = RmiName_CG_RequestNMFunTalkKitLoginOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestNMFunTalkKitCreateRoomOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int errorCode;
            CommonPacket.Marshaler.Read(__msg, out errorCode);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestNMFunTalkKitCreateRoomOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestNMFunTalkKitCreateRoomOK,
                    rmiName = RmiName_CG_RequestNMFunTalkKitCreateRoomOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestNMFunTalkKitCreateRoomOK(remote, rmiContext, errorCode))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestNMFunTalkKitCreateRoomOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestNMFunTalkKitCreateRoomOK,
                    rmiName = RmiName_CG_RequestNMFunTalkKitCreateRoomOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestNMFunTalkKitPasswordOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            string pwd;
            CommonPacket.Marshaler.Read(__msg, out pwd);
            string guildChatRoomPrefix;
            CommonPacket.Marshaler.Read(__msg, out guildChatRoomPrefix);
            int guildSN;
            CommonPacket.Marshaler.Read(__msg, out guildSN);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestNMFunTalkKitPasswordOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestNMFunTalkKitPasswordOK,
                    rmiName = RmiName_CG_RequestNMFunTalkKitPasswordOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestNMFunTalkKitPasswordOK(remote, rmiContext, pwd, guildChatRoomPrefix, guildSN))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestNMFunTalkKitPasswordOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestNMFunTalkKitPasswordOK,
                    rmiName = RmiName_CG_RequestNMFunTalkKitPasswordOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_GC_NotifyNMFunTalkKitGuildRoomJoin(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int errorCode;
            CommonPacket.Marshaler.Read(__msg, out errorCode);
            string guildChatRoomPrefix;
            CommonPacket.Marshaler.Read(__msg, out guildChatRoomPrefix);
            int guildSN;
            CommonPacket.Marshaler.Read(__msg, out guildSN);
            base.core.PostCheckReadMessage(__msg, RmiName_GC_NotifyNMFunTalkKitGuildRoomJoin);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.GC_NotifyNMFunTalkKitGuildRoomJoin,
                    rmiName = RmiName_GC_NotifyNMFunTalkKitGuildRoomJoin,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.GC_NotifyNMFunTalkKitGuildRoomJoin(remote, rmiContext, errorCode, guildChatRoomPrefix, guildSN))
                base.core.ShowNotImplementedRmiWarning(RmiName_GC_NotifyNMFunTalkKitGuildRoomJoin);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.GC_NotifyNMFunTalkKitGuildRoomJoin,
                    rmiName = RmiName_GC_NotifyNMFunTalkKitGuildRoomJoin,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_GC_NotifyNMFunTalkKitGuildRoomLeave(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            base.core.PostCheckReadMessage(__msg, RmiName_GC_NotifyNMFunTalkKitGuildRoomLeave);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.GC_NotifyNMFunTalkKitGuildRoomLeave,
                    rmiName = RmiName_GC_NotifyNMFunTalkKitGuildRoomLeave,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.GC_NotifyNMFunTalkKitGuildRoomLeave(remote, rmiContext))
                base.core.ShowNotImplementedRmiWarning(RmiName_GC_NotifyNMFunTalkKitGuildRoomLeave);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.GC_NotifyNMFunTalkKitGuildRoomLeave,
                    rmiName = RmiName_GC_NotifyNMFunTalkKitGuildRoomLeave,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_GC_NotifyChatInfo(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            ChatInfo chatInfo;
            CommonPacket.Marshaler.Read(__msg, out chatInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_GC_NotifyChatInfo);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.GC_NotifyChatInfo,
                    rmiName = RmiName_GC_NotifyChatInfo,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.GC_NotifyChatInfo(remote, rmiContext, chatInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_GC_NotifyChatInfo);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.GC_NotifyChatInfo,
                    rmiName = RmiName_GC_NotifyChatInfo,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventGamblePaybackRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserPaybackEventInfo userGamblePaybackEventInfo;
            CommonPacket.Marshaler.Read(__msg, out userGamblePaybackEventInfo);
            List<ItemResultInfo> getItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventGamblePaybackRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventGamblePaybackRewardOK,
                    rmiName = RmiName_CG_RequestEventGamblePaybackRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventGamblePaybackRewardOK(remote, rmiContext, userGamblePaybackEventInfo, getItemResultInfoList, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventGamblePaybackRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventGamblePaybackRewardOK,
                    rmiName = RmiName_CG_RequestEventGamblePaybackRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventRandomBoxInfoOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserRandomBoxEventInfo userRandomBoxEventInfo;
            CommonPacket.Marshaler.Read(__msg, out userRandomBoxEventInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventRandomBoxInfoOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventRandomBoxInfoOK,
                    rmiName = RmiName_CG_RequestEventRandomBoxInfoOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventRandomBoxInfoOK(remote, rmiContext, userRandomBoxEventInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventRandomBoxInfoOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventRandomBoxInfoOK,
                    rmiName = RmiName_CG_RequestEventRandomBoxInfoOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventRandomBoxCreateOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserRandomBoxEventInfo userRandomBoxEventInfo;
            CommonPacket.Marshaler.Read(__msg, out userRandomBoxEventInfo);
            ItemResultInfo itemResultInfo;
            CommonPacket.Marshaler.Read(__msg, out itemResultInfo);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventRandomBoxCreateOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventRandomBoxCreateOK,
                    rmiName = RmiName_CG_RequestEventRandomBoxCreateOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventRandomBoxCreateOK(remote, rmiContext, userRandomBoxEventInfo, itemResultInfo, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventRandomBoxCreateOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventRandomBoxCreateOK,
                    rmiName = RmiName_CG_RequestEventRandomBoxCreateOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventRandomBoxRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            byte slot;
            CommonPacket.Marshaler.Read(__msg, out slot);
            EventRandomBoxInfo boxInfo;
            CommonPacket.Marshaler.Read(__msg, out boxInfo);
            EventRandomBoxChangeType changeType;
            CommonPacket.Marshaler.Read(__msg, out changeType);
            int mileage;
            CommonPacket.Marshaler.Read(__msg, out mileage);
            ItemResultInfo itemResultInfo;
            CommonPacket.Marshaler.Read(__msg, out itemResultInfo);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventRandomBoxRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventRandomBoxRewardOK,
                    rmiName = RmiName_CG_RequestEventRandomBoxRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventRandomBoxRewardOK(remote, rmiContext, slot, boxInfo, changeType, mileage, itemResultInfo, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventRandomBoxRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventRandomBoxRewardOK,
                    rmiName = RmiName_CG_RequestEventRandomBoxRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestSeasonpassShopInfoOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int eventSEQ;
            CommonPacket.Marshaler.Read(__msg, out eventSEQ);
            List<SeasonPassShopBuyInfo> shopBuyInfoList;
            CommonPacket.Marshaler.Read(__msg, out shopBuyInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestSeasonpassShopInfoOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestSeasonpassShopInfoOK,
                    rmiName = RmiName_CG_RequestSeasonpassShopInfoOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestSeasonpassShopInfoOK(remote, rmiContext, eventSEQ, shopBuyInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSeasonpassShopInfoOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestSeasonpassShopInfoOK,
                    rmiName = RmiName_CG_RequestSeasonpassShopInfoOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestSeasonpassShopBuyOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<ItemResultInfo> useItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfoList);
            List<ItemResultInfo> getItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfoList);
            int eventSEQ;
            CommonPacket.Marshaler.Read(__msg, out eventSEQ);
            ShopBuyInfo shopBuyInfo;
            CommonPacket.Marshaler.Read(__msg, out shopBuyInfo);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            PaybackEventResultInfo paybackEventresultInfo;
            CommonPacket.Marshaler.Read(__msg, out paybackEventresultInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestSeasonpassShopBuyOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestSeasonpassShopBuyOK,
                    rmiName = RmiName_CG_RequestSeasonpassShopBuyOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestSeasonpassShopBuyOK(remote, rmiContext, useItemResultInfoList, getItemResultInfoList, eventSEQ, shopBuyInfo, missionResult, paybackEventresultInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSeasonpassShopBuyOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestSeasonpassShopBuyOK,
                    rmiName = RmiName_CG_RequestSeasonpassShopBuyOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_Request_EventPredict_User_InfoOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int eventSEQ;
            CommonPacket.Marshaler.Read(__msg, out eventSEQ);
            EventPredictInfo userPredictInfo;
            CommonPacket.Marshaler.Read(__msg, out userPredictInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_Request_EventPredict_User_InfoOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_Request_EventPredict_User_InfoOK,
                    rmiName = RmiName_CG_Request_EventPredict_User_InfoOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_Request_EventPredict_User_InfoOK(remote, rmiContext, eventSEQ, userPredictInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_Request_EventPredict_User_InfoOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_Request_EventPredict_User_InfoOK,
                    rmiName = RmiName_CG_Request_EventPredict_User_InfoOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_Request_EventPredict_StartOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int eventSEQ;
            CommonPacket.Marshaler.Read(__msg, out eventSEQ);
            List<HawkStepInfo> hawkStepList;
            CommonPacket.Marshaler.Read(__msg, out hawkStepList);
            List<ItemResultInfo> resultItemInfoList;
            CommonPacket.Marshaler.Read(__msg, out resultItemInfoList);
            int getScore;
            CommonPacket.Marshaler.Read(__msg, out getScore);
            EventPredictInfo userPredictInfo;
            CommonPacket.Marshaler.Read(__msg, out userPredictInfo);
            ItemResultInfo useItemResultInfo;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfo);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_Request_EventPredict_StartOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_Request_EventPredict_StartOK,
                    rmiName = RmiName_CG_Request_EventPredict_StartOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_Request_EventPredict_StartOK(remote, rmiContext, eventSEQ, hawkStepList, resultItemInfoList, getScore, userPredictInfo, useItemResultInfo, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_Request_EventPredict_StartOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_Request_EventPredict_StartOK,
                    rmiName = RmiName_CG_Request_EventPredict_StartOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_Request_EventPredict_Special_RewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int eventSEQ;
            CommonPacket.Marshaler.Read(__msg, out eventSEQ);
            byte specialRewardIndex;
            CommonPacket.Marshaler.Read(__msg, out specialRewardIndex);
            List<ItemResultInfo> resultItemInfoList;
            CommonPacket.Marshaler.Read(__msg, out resultItemInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_Request_EventPredict_Special_RewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_Request_EventPredict_Special_RewardOK,
                    rmiName = RmiName_CG_Request_EventPredict_Special_RewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_Request_EventPredict_Special_RewardOK(remote, rmiContext, eventSEQ, specialRewardIndex, resultItemInfoList, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_Request_EventPredict_Special_RewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_Request_EventPredict_Special_RewardOK,
                    rmiName = RmiName_CG_Request_EventPredict_Special_RewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_Request_EventAuto_OnOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            EventAutoInfo userEventAutoInfo;
            CommonPacket.Marshaler.Read(__msg, out userEventAutoInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_Request_EventAuto_OnOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_Request_EventAuto_OnOK,
                    rmiName = RmiName_CG_Request_EventAuto_OnOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_Request_EventAuto_OnOK(remote, rmiContext, userEventAutoInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_Request_EventAuto_OnOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_Request_EventAuto_OnOK,
                    rmiName = RmiName_CG_Request_EventAuto_OnOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_Request_EventAuto_ResultOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            EventAutoInfo userEventAutoInfo;
            CommonPacket.Marshaler.Read(__msg, out userEventAutoInfo);
            int normalKillCount;
            CommonPacket.Marshaler.Read(__msg, out normalKillCount);
            int bossKillCount;
            CommonPacket.Marshaler.Read(__msg, out bossKillCount);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_Request_EventAuto_ResultOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_Request_EventAuto_ResultOK,
                    rmiName = RmiName_CG_Request_EventAuto_ResultOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_Request_EventAuto_ResultOK(remote, rmiContext, userEventAutoInfo, normalKillCount, bossKillCount))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_Request_EventAuto_ResultOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_Request_EventAuto_ResultOK,
                    rmiName = RmiName_CG_Request_EventAuto_ResultOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_Request_EventAuto_Battle_EndOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            EventAutoInfo userEventAutoInfo;
            CommonPacket.Marshaler.Read(__msg, out userEventAutoInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_Request_EventAuto_Battle_EndOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_Request_EventAuto_Battle_EndOK,
                    rmiName = RmiName_CG_Request_EventAuto_Battle_EndOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_Request_EventAuto_Battle_EndOK(remote, rmiContext, userEventAutoInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_Request_EventAuto_Battle_EndOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_Request_EventAuto_Battle_EndOK,
                    rmiName = RmiName_CG_Request_EventAuto_Battle_EndOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_Request_EventAuto_HawkUpgradeOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            EventAutoInfo userEventAutoInfo;
            CommonPacket.Marshaler.Read(__msg, out userEventAutoInfo);
            List<ItemResultInfo> useItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_Request_EventAuto_HawkUpgradeOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_Request_EventAuto_HawkUpgradeOK,
                    rmiName = RmiName_CG_Request_EventAuto_HawkUpgradeOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_Request_EventAuto_HawkUpgradeOK(remote, rmiContext, userEventAutoInfo, useItemResultInfoList, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_Request_EventAuto_HawkUpgradeOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_Request_EventAuto_HawkUpgradeOK,
                    rmiName = RmiName_CG_Request_EventAuto_HawkUpgradeOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_Request_EventAuto_RewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            EventAutoInfo userEventAutoInfo;
            CommonPacket.Marshaler.Read(__msg, out userEventAutoInfo);
            List<ItemResultInfo> rewardItemInfoList;
            CommonPacket.Marshaler.Read(__msg, out rewardItemInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_Request_EventAuto_RewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_Request_EventAuto_RewardOK,
                    rmiName = RmiName_CG_Request_EventAuto_RewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_Request_EventAuto_RewardOK(remote, rmiContext, userEventAutoInfo, rewardItemInfoList, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_Request_EventAuto_RewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_Request_EventAuto_RewardOK,
                    rmiName = RmiName_CG_Request_EventAuto_RewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_Request_EventAuto_Box_Slot_UpgradeOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            EventAutoInfo userEventAutoInfo;
            CommonPacket.Marshaler.Read(__msg, out userEventAutoInfo);
            List<ItemResultInfo> useItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_Request_EventAuto_Box_Slot_UpgradeOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_Request_EventAuto_Box_Slot_UpgradeOK,
                    rmiName = RmiName_CG_Request_EventAuto_Box_Slot_UpgradeOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_Request_EventAuto_Box_Slot_UpgradeOK(remote, rmiContext, userEventAutoInfo, useItemResultInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_Request_EventAuto_Box_Slot_UpgradeOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_Request_EventAuto_Box_Slot_UpgradeOK,
                    rmiName = RmiName_CG_Request_EventAuto_Box_Slot_UpgradeOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_Request_EventAuto_SpecialRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            EventAutoInfo userEventAutoInfo;
            CommonPacket.Marshaler.Read(__msg, out userEventAutoInfo);
            List<ItemResultInfo> rewardItemInfoList;
            CommonPacket.Marshaler.Read(__msg, out rewardItemInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_Request_EventAuto_SpecialRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_Request_EventAuto_SpecialRewardOK,
                    rmiName = RmiName_CG_Request_EventAuto_SpecialRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_Request_EventAuto_SpecialRewardOK(remote, rmiContext, userEventAutoInfo, rewardItemInfoList, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_Request_EventAuto_SpecialRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_Request_EventAuto_SpecialRewardOK,
                    rmiName = RmiName_CG_Request_EventAuto_SpecialRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestArtifactCardPackOpenOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            ItemResultInfo useItemResultInfo;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfo);
            List<ItemResultInfo> getItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestArtifactCardPackOpenOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestArtifactCardPackOpenOK,
                    rmiName = RmiName_CG_RequestArtifactCardPackOpenOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestArtifactCardPackOpenOK(remote, rmiContext, useItemResultInfo, getItemResultInfoList, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArtifactCardPackOpenOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestArtifactCardPackOpenOK,
                    rmiName = RmiName_CG_RequestArtifactCardPackOpenOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestArtifactUnionUpgradeOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserArtifactUnionInfo unionInfo;
            CommonPacket.Marshaler.Read(__msg, out unionInfo);
            List<ItemResultInfo> useItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            PaybackEventResultInfo paybackEventresultInfo;
            CommonPacket.Marshaler.Read(__msg, out paybackEventresultInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestArtifactUnionUpgradeOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestArtifactUnionUpgradeOK,
                    rmiName = RmiName_CG_RequestArtifactUnionUpgradeOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestArtifactUnionUpgradeOK(remote, rmiContext, unionInfo, useItemResultInfoList, missionResult, paybackEventresultInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArtifactUnionUpgradeOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestArtifactUnionUpgradeOK,
                    rmiName = RmiName_CG_RequestArtifactUnionUpgradeOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestArtifactTeamChangeOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestArtifactTeamChangeOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestArtifactTeamChangeOK,
                    rmiName = RmiName_CG_RequestArtifactTeamChangeOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestArtifactTeamChangeOK(remote, rmiContext))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArtifactTeamChangeOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestArtifactTeamChangeOK,
                    rmiName = RmiName_CG_RequestArtifactTeamChangeOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestArtifactDescentBossTeamChangeOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestArtifactDescentBossTeamChangeOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestArtifactDescentBossTeamChangeOK,
                    rmiName = RmiName_CG_RequestArtifactDescentBossTeamChangeOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestArtifactDescentBossTeamChangeOK(remote, rmiContext))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArtifactDescentBossTeamChangeOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestArtifactDescentBossTeamChangeOK,
                    rmiName = RmiName_CG_RequestArtifactDescentBossTeamChangeOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestArtifactTeamInfoAllOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<UserArtifactTeamInfo> userArtifactTeamInfoList;
            CommonPacket.Marshaler.Read(__msg, out userArtifactTeamInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestArtifactTeamInfoAllOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestArtifactTeamInfoAllOK,
                    rmiName = RmiName_CG_RequestArtifactTeamInfoAllOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestArtifactTeamInfoAllOK(remote, rmiContext, userArtifactTeamInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArtifactTeamInfoAllOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestArtifactTeamInfoAllOK,
                    rmiName = RmiName_CG_RequestArtifactTeamInfoAllOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventArtifactWishSaveOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserArtifactWishEventInfo userArtifactWishEventInfo;
            CommonPacket.Marshaler.Read(__msg, out userArtifactWishEventInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventArtifactWishSaveOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventArtifactWishSaveOK,
                    rmiName = RmiName_CG_RequestEventArtifactWishSaveOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventArtifactWishSaveOK(remote, rmiContext, userArtifactWishEventInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventArtifactWishSaveOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventArtifactWishSaveOK,
                    rmiName = RmiName_CG_RequestEventArtifactWishSaveOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventArtifactWishCardPackOpenOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserArtifactWishEventInfo userArtifactWishEventInfo;
            CommonPacket.Marshaler.Read(__msg, out userArtifactWishEventInfo);
            ItemResultInfo useItemResultInfo;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfo);
            List<ItemResultInfo> getItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            int getWishSlotIndex;
            CommonPacket.Marshaler.Read(__msg, out getWishSlotIndex);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventArtifactWishCardPackOpenOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventArtifactWishCardPackOpenOK,
                    rmiName = RmiName_CG_RequestEventArtifactWishCardPackOpenOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventArtifactWishCardPackOpenOK(remote, rmiContext, userArtifactWishEventInfo, useItemResultInfo, getItemResultInfoList, missionResult, getWishSlotIndex))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventArtifactWishCardPackOpenOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventArtifactWishCardPackOpenOK,
                    rmiName = RmiName_CG_RequestEventArtifactWishCardPackOpenOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestArtifactDemonLordTeamChangeOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestArtifactDemonLordTeamChangeOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestArtifactDemonLordTeamChangeOK,
                    rmiName = RmiName_CG_RequestArtifactDemonLordTeamChangeOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestArtifactDemonLordTeamChangeOK(remote, rmiContext))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArtifactDemonLordTeamChangeOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestArtifactDemonLordTeamChangeOK,
                    rmiName = RmiName_CG_RequestArtifactDemonLordTeamChangeOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestNorthGrimBookRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int grimContentID;
            CommonPacket.Marshaler.Read(__msg, out grimContentID);
            NorthGrimBookCategoryInfo grimCategoryInfo;
            CommonPacket.Marshaler.Read(__msg, out grimCategoryInfo);
            ItemResultInfo rewardItemInfo;
            CommonPacket.Marshaler.Read(__msg, out rewardItemInfo);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestNorthGrimBookRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestNorthGrimBookRewardOK,
                    rmiName = RmiName_CG_RequestNorthGrimBookRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestNorthGrimBookRewardOK(remote, rmiContext, grimContentID, grimCategoryInfo, rewardItemInfo, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestNorthGrimBookRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestNorthGrimBookRewardOK,
                    rmiName = RmiName_CG_RequestNorthGrimBookRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventCheerGroupOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserCheerEventInfo userCheerEventInfo;
            CommonPacket.Marshaler.Read(__msg, out userCheerEventInfo);
            List<ItemResultInfo> useItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfoList);
            List<ItemResultInfo> rewardItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out rewardItemResultInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventCheerGroupOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventCheerGroupOK,
                    rmiName = RmiName_CG_RequestEventCheerGroupOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventCheerGroupOK(remote, rmiContext, userCheerEventInfo, useItemResultInfoList, rewardItemResultInfoList, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventCheerGroupOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventCheerGroupOK,
                    rmiName = RmiName_CG_RequestEventCheerGroupOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventCheerGaugeRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserCheerEventInfo userCheerEventInfo;
            CommonPacket.Marshaler.Read(__msg, out userCheerEventInfo);
            List<ItemResultInfo> rewardItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out rewardItemResultInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventCheerGaugeRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventCheerGaugeRewardOK,
                    rmiName = RmiName_CG_RequestEventCheerGaugeRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventCheerGaugeRewardOK(remote, rmiContext, userCheerEventInfo, rewardItemResultInfoList, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventCheerGaugeRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventCheerGaugeRewardOK,
                    rmiName = RmiName_CG_RequestEventCheerGaugeRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventCheerFinishRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserCheerEventInfo userCheerEventInfo;
            CommonPacket.Marshaler.Read(__msg, out userCheerEventInfo);
            List<ItemResultInfo> rewardItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out rewardItemResultInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventCheerFinishRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventCheerFinishRewardOK,
                    rmiName = RmiName_CG_RequestEventCheerFinishRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventCheerFinishRewardOK(remote, rmiContext, userCheerEventInfo, rewardItemResultInfoList, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventCheerFinishRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventCheerFinishRewardOK,
                    rmiName = RmiName_CG_RequestEventCheerFinishRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventDiceInfoOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            ClientSendEventDiceInfo clientEventDiceInfo;
            CommonPacket.Marshaler.Read(__msg, out clientEventDiceInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventDiceInfoOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventDiceInfoOK,
                    rmiName = RmiName_CG_RequestEventDiceInfoOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventDiceInfoOK(remote, rmiContext, clientEventDiceInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventDiceInfoOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventDiceInfoOK,
                    rmiName = RmiName_CG_RequestEventDiceInfoOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventDiceRollOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            ClientSendEventDiceInfo clientEventDiceInfo;
            CommonPacket.Marshaler.Read(__msg, out clientEventDiceInfo);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventDiceRollOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventDiceRollOK,
                    rmiName = RmiName_CG_RequestEventDiceRollOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventDiceRollOK(remote, rmiContext, clientEventDiceInfo, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventDiceRollOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventDiceRollOK,
                    rmiName = RmiName_CG_RequestEventDiceRollOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventDiceRollEventHandleOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int resultIndex;
            CommonPacket.Marshaler.Read(__msg, out resultIndex);
            ClientSendEventDiceInfo clientEventDiceInfo;
            CommonPacket.Marshaler.Read(__msg, out clientEventDiceInfo);
            ItemResultInfo getItemResultInfo;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventDiceRollEventHandleOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventDiceRollEventHandleOK,
                    rmiName = RmiName_CG_RequestEventDiceRollEventHandleOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventDiceRollEventHandleOK(remote, rmiContext, resultIndex, clientEventDiceInfo, getItemResultInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventDiceRollEventHandleOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventDiceRollEventHandleOK,
                    rmiName = RmiName_CG_RequestEventDiceRollEventHandleOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventDiceRaceRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            ClientSendEventDiceInfo clientEventDiceInfo;
            CommonPacket.Marshaler.Read(__msg, out clientEventDiceInfo);
            ItemResultInfo getItemResultInfo;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventDiceRaceRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventDiceRaceRewardOK,
                    rmiName = RmiName_CG_RequestEventDiceRaceRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventDiceRaceRewardOK(remote, rmiContext, clientEventDiceInfo, getItemResultInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventDiceRaceRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventDiceRaceRewardOK,
                    rmiName = RmiName_CG_RequestEventDiceRaceRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestConstellationStoneOpenOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            byte group;
            CommonPacket.Marshaler.Read(__msg, out group);
            List<ConstellationStoneInfo> stoneInfoList;
            CommonPacket.Marshaler.Read(__msg, out stoneInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            int growthPoint;
            CommonPacket.Marshaler.Read(__msg, out growthPoint);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestConstellationStoneOpenOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestConstellationStoneOpenOK,
                    rmiName = RmiName_CG_RequestConstellationStoneOpenOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestConstellationStoneOpenOK(remote, rmiContext, group, stoneInfoList, missionResult, growthPoint))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestConstellationStoneOpenOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestConstellationStoneOpenOK,
                    rmiName = RmiName_CG_RequestConstellationStoneOpenOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestConstellationStoneOptionValueChangeOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            byte group;
            CommonPacket.Marshaler.Read(__msg, out group);
            List<ConstellationStoneInfo> stoneInfoList;
            CommonPacket.Marshaler.Read(__msg, out stoneInfoList);
            List<ItemResultInfo> useItemInfoResultList;
            CommonPacket.Marshaler.Read(__msg, out useItemInfoResultList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestConstellationStoneOptionValueChangeOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestConstellationStoneOptionValueChangeOK,
                    rmiName = RmiName_CG_RequestConstellationStoneOptionValueChangeOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestConstellationStoneOptionValueChangeOK(remote, rmiContext, group, stoneInfoList, useItemInfoResultList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestConstellationStoneOptionValueChangeOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestConstellationStoneOptionValueChangeOK,
                    rmiName = RmiName_CG_RequestConstellationStoneOptionValueChangeOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestConstellationStoneOptionValueChangeApplyOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            byte group;
            CommonPacket.Marshaler.Read(__msg, out group);
            List<ConstellationStoneInfo> stoneInfoList;
            CommonPacket.Marshaler.Read(__msg, out stoneInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestConstellationStoneOptionValueChangeApplyOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestConstellationStoneOptionValueChangeApplyOK,
                    rmiName = RmiName_CG_RequestConstellationStoneOptionValueChangeApplyOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestConstellationStoneOptionValueChangeApplyOK(remote, rmiContext, group, stoneInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestConstellationStoneOptionValueChangeApplyOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestConstellationStoneOptionValueChangeApplyOK,
                    rmiName = RmiName_CG_RequestConstellationStoneOptionValueChangeApplyOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestMaterialFusionOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int userMaterialFusionPoint;
            CommonPacket.Marshaler.Read(__msg, out userMaterialFusionPoint);
            ItemResultInfo rewardItemResultInfo;
            CommonPacket.Marshaler.Read(__msg, out rewardItemResultInfo);
            List<ItemResultInfo> materialItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out materialItemResultInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestMaterialFusionOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestMaterialFusionOK,
                    rmiName = RmiName_CG_RequestMaterialFusionOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestMaterialFusionOK(remote, rmiContext, userMaterialFusionPoint, rewardItemResultInfo, materialItemResultInfoList, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestMaterialFusionOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestMaterialFusionOK,
                    rmiName = RmiName_CG_RequestMaterialFusionOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventSkinOneStepEvolutionOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserSkinOneStepEvolutionEventInfo userSkinOneStepEvolutionEventInfo;
            CommonPacket.Marshaler.Read(__msg, out userSkinOneStepEvolutionEventInfo);
            ItemResultInfo useItemResultInfo;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfo);
            SkinOneStepEvolutionResult skinOneStepEvolutionResult;
            CommonPacket.Marshaler.Read(__msg, out skinOneStepEvolutionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventSkinOneStepEvolutionOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventSkinOneStepEvolutionOK,
                    rmiName = RmiName_CG_RequestEventSkinOneStepEvolutionOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventSkinOneStepEvolutionOK(remote, rmiContext, userSkinOneStepEvolutionEventInfo, useItemResultInfo, skinOneStepEvolutionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventSkinOneStepEvolutionOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventSkinOneStepEvolutionOK,
                    rmiName = RmiName_CG_RequestEventSkinOneStepEvolutionOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventPuzzleInfoOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            ClientSendEventPuzzleInfo puzzleEventInfo;
            CommonPacket.Marshaler.Read(__msg, out puzzleEventInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventPuzzleInfoOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventPuzzleInfoOK,
                    rmiName = RmiName_CG_RequestEventPuzzleInfoOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventPuzzleInfoOK(remote, rmiContext, puzzleEventInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventPuzzleInfoOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventPuzzleInfoOK,
                    rmiName = RmiName_CG_RequestEventPuzzleInfoOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventPuzzleInfoStartOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            ClientSendEventPuzzleInfo puzzleEventInfo;
            CommonPacket.Marshaler.Read(__msg, out puzzleEventInfo);
            List<int> usedEventLobbyBuffIdList;
            CommonPacket.Marshaler.Read(__msg, out usedEventLobbyBuffIdList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventPuzzleInfoStartOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventPuzzleInfoStartOK,
                    rmiName = RmiName_CG_RequestEventPuzzleInfoStartOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventPuzzleInfoStartOK(remote, rmiContext, puzzleEventInfo, usedEventLobbyBuffIdList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventPuzzleInfoStartOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventPuzzleInfoStartOK,
                    rmiName = RmiName_CG_RequestEventPuzzleInfoStartOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventPuzzleInfoEndOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            ClientSendEventPuzzleInfo puzzleEventInfo;
            CommonPacket.Marshaler.Read(__msg, out puzzleEventInfo);
            List<ItemResultInfo> rewardItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out rewardItemResultInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            List<int> usedEventLobbyBuffIdList;
            CommonPacket.Marshaler.Read(__msg, out usedEventLobbyBuffIdList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventPuzzleInfoEndOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventPuzzleInfoEndOK,
                    rmiName = RmiName_CG_RequestEventPuzzleInfoEndOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventPuzzleInfoEndOK(remote, rmiContext, puzzleEventInfo, rewardItemResultInfoList, missionResult, usedEventLobbyBuffIdList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventPuzzleInfoEndOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventPuzzleInfoEndOK,
                    rmiName = RmiName_CG_RequestEventPuzzleInfoEndOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventPuzzleInfoBlockRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            ClientSendEventPuzzleInfo puzzleEventInfo;
            CommonPacket.Marshaler.Read(__msg, out puzzleEventInfo);
            ItemResultInfo rewardItemResultInfo;
            CommonPacket.Marshaler.Read(__msg, out rewardItemResultInfo);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            int blockID;
            CommonPacket.Marshaler.Read(__msg, out blockID);
            int resultRewardOrder;
            CommonPacket.Marshaler.Read(__msg, out resultRewardOrder);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventPuzzleInfoBlockRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventPuzzleInfoBlockRewardOK,
                    rmiName = RmiName_CG_RequestEventPuzzleInfoBlockRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventPuzzleInfoBlockRewardOK(remote, rmiContext, puzzleEventInfo, rewardItemResultInfo, missionResult, blockID, resultRewardOrder))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventPuzzleInfoBlockRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventPuzzleInfoBlockRewardOK,
                    rmiName = RmiName_CG_RequestEventPuzzleInfoBlockRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventPuzzleInfoTotalRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            ClientSendEventPuzzleInfo puzzleEventInfo;
            CommonPacket.Marshaler.Read(__msg, out puzzleEventInfo);
            ItemResultInfo rewardItemResultInfo;
            CommonPacket.Marshaler.Read(__msg, out rewardItemResultInfo);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventPuzzleInfoTotalRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventPuzzleInfoTotalRewardOK,
                    rmiName = RmiName_CG_RequestEventPuzzleInfoTotalRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventPuzzleInfoTotalRewardOK(remote, rmiContext, puzzleEventInfo, rewardItemResultInfo, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventPuzzleInfoTotalRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventPuzzleInfoTotalRewardOK,
                    rmiName = RmiName_CG_RequestEventPuzzleInfoTotalRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestRandomLuckybagInfoOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserRandomLuckybagInfo userEventLuckybagInfo;
            CommonPacket.Marshaler.Read(__msg, out userEventLuckybagInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestRandomLuckybagInfoOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestRandomLuckybagInfoOK,
                    rmiName = RmiName_CG_RequestRandomLuckybagInfoOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestRandomLuckybagInfoOK(remote, rmiContext, userEventLuckybagInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestRandomLuckybagInfoOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestRandomLuckybagInfoOK,
                    rmiName = RmiName_CG_RequestRandomLuckybagInfoOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestRandomLuckybagOpenOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserRandomLuckybagInfo userLuckybagInfo;
            CommonPacket.Marshaler.Read(__msg, out userLuckybagInfo);
            ItemResultInfo priceItemResultInfo;
            CommonPacket.Marshaler.Read(__msg, out priceItemResultInfo);
            List<ItemResultInfo> rewardItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out rewardItemResultInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestRandomLuckybagOpenOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestRandomLuckybagOpenOK,
                    rmiName = RmiName_CG_RequestRandomLuckybagOpenOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestRandomLuckybagOpenOK(remote, rmiContext, userLuckybagInfo, priceItemResultInfo, rewardItemResultInfoList, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestRandomLuckybagOpenOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestRandomLuckybagOpenOK,
                    rmiName = RmiName_CG_RequestRandomLuckybagOpenOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestRandomLuckybagLastRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserRandomLuckybagInfo userLuckybagInfo;
            CommonPacket.Marshaler.Read(__msg, out userLuckybagInfo);
            List<ItemResultInfo> rewardItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out rewardItemResultInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestRandomLuckybagLastRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestRandomLuckybagLastRewardOK,
                    rmiName = RmiName_CG_RequestRandomLuckybagLastRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestRandomLuckybagLastRewardOK(remote, rmiContext, userLuckybagInfo, rewardItemResultInfoList, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestRandomLuckybagLastRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestRandomLuckybagLastRewardOK,
                    rmiName = RmiName_CG_RequestRandomLuckybagLastRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventStepupMissionStartOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserStepupMissionEventInfo userStepupMissionEventInfo;
            CommonPacket.Marshaler.Read(__msg, out userStepupMissionEventInfo);
            List<QuestProgressInfo> questProgressInfoList;
            CommonPacket.Marshaler.Read(__msg, out questProgressInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventStepupMissionStartOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventStepupMissionStartOK,
                    rmiName = RmiName_CG_RequestEventStepupMissionStartOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventStepupMissionStartOK(remote, rmiContext, userStepupMissionEventInfo, questProgressInfoList, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventStepupMissionStartOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventStepupMissionStartOK,
                    rmiName = RmiName_CG_RequestEventStepupMissionStartOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventStepupMissionGroupClearOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserStepupMissionEventInfo userStepupMissionEventInfo;
            CommonPacket.Marshaler.Read(__msg, out userStepupMissionEventInfo);
            List<ItemResultInfo> rewardItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out rewardItemResultInfoList);
            List<QuestProgressInfo> questProgressInfoList;
            CommonPacket.Marshaler.Read(__msg, out questProgressInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            List<int> removedQuestIDList;
            CommonPacket.Marshaler.Read(__msg, out removedQuestIDList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventStepupMissionGroupClearOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventStepupMissionGroupClearOK,
                    rmiName = RmiName_CG_RequestEventStepupMissionGroupClearOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventStepupMissionGroupClearOK(remote, rmiContext, userStepupMissionEventInfo, rewardItemResultInfoList, questProgressInfoList, missionResult, removedQuestIDList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventStepupMissionGroupClearOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventStepupMissionGroupClearOK,
                    rmiName = RmiName_CG_RequestEventStepupMissionGroupClearOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestFriendlyMatchObserveCreateOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            FriendlyMatchCreateResult friendlyMatchCreateResult;
            CommonPacket.Marshaler.Read(__msg, out friendlyMatchCreateResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendlyMatchObserveCreateOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendlyMatchObserveCreateOK,
                    rmiName = RmiName_CG_RequestFriendlyMatchObserveCreateOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestFriendlyMatchObserveCreateOK(remote, rmiContext, friendlyMatchCreateResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendlyMatchObserveCreateOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendlyMatchObserveCreateOK,
                    rmiName = RmiName_CG_RequestFriendlyMatchObserveCreateOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestFriendlyMatchObserveFriendListOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<FriendlyMatchUserProfileInfo> fmUserProfileInfoList;
            CommonPacket.Marshaler.Read(__msg, out fmUserProfileInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendlyMatchObserveFriendListOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendlyMatchObserveFriendListOK,
                    rmiName = RmiName_CG_RequestFriendlyMatchObserveFriendListOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestFriendlyMatchObserveFriendListOK(remote, rmiContext, fmUserProfileInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendlyMatchObserveFriendListOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendlyMatchObserveFriendListOK,
                    rmiName = RmiName_CG_RequestFriendlyMatchObserveFriendListOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestFriendlyMatchObserveInviteOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<long> resultInvitedUSNList;
            CommonPacket.Marshaler.Read(__msg, out resultInvitedUSNList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendlyMatchObserveInviteOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendlyMatchObserveInviteOK,
                    rmiName = RmiName_CG_RequestFriendlyMatchObserveInviteOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestFriendlyMatchObserveInviteOK(remote, rmiContext, resultInvitedUSNList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendlyMatchObserveInviteOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendlyMatchObserveInviteOK,
                    rmiName = RmiName_CG_RequestFriendlyMatchObserveInviteOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestFriendlyMatchObserveReceivedInviteListOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<FriendlyMatchClientSendRoomInfo> invitedRoomInfoList;
            CommonPacket.Marshaler.Read(__msg, out invitedRoomInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendlyMatchObserveReceivedInviteListOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendlyMatchObserveReceivedInviteListOK,
                    rmiName = RmiName_CG_RequestFriendlyMatchObserveReceivedInviteListOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestFriendlyMatchObserveReceivedInviteListOK(remote, rmiContext, invitedRoomInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendlyMatchObserveReceivedInviteListOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendlyMatchObserveReceivedInviteListOK,
                    rmiName = RmiName_CG_RequestFriendlyMatchObserveReceivedInviteListOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestFriendlyMatchObserveInviteAcceptOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            FriendlyMatchJoinResult joinResult;
            CommonPacket.Marshaler.Read(__msg, out joinResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendlyMatchObserveInviteAcceptOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendlyMatchObserveInviteAcceptOK,
                    rmiName = RmiName_CG_RequestFriendlyMatchObserveInviteAcceptOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestFriendlyMatchObserveInviteAcceptOK(remote, rmiContext, joinResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendlyMatchObserveInviteAcceptOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendlyMatchObserveInviteAcceptOK,
                    rmiName = RmiName_CG_RequestFriendlyMatchObserveInviteAcceptOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestFriendlyMatchObserveInviteRejectOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int roomSN;
            CommonPacket.Marshaler.Read(__msg, out roomSN);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendlyMatchObserveInviteRejectOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendlyMatchObserveInviteRejectOK,
                    rmiName = RmiName_CG_RequestFriendlyMatchObserveInviteRejectOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestFriendlyMatchObserveInviteRejectOK(remote, rmiContext, roomSN))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendlyMatchObserveInviteRejectOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendlyMatchObserveInviteRejectOK,
                    rmiName = RmiName_CG_RequestFriendlyMatchObserveInviteRejectOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestFriendlyMatchObserveStartOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendlyMatchObserveStartOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendlyMatchObserveStartOK,
                    rmiName = RmiName_CG_RequestFriendlyMatchObserveStartOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestFriendlyMatchObserveStartOK(remote, rmiContext))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendlyMatchObserveStartOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendlyMatchObserveStartOK,
                    rmiName = RmiName_CG_RequestFriendlyMatchObserveStartOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestFriendlyMatchObserveBattleStartOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            FriendlyMatchBattleStartResult battleStartResult;
            CommonPacket.Marshaler.Read(__msg, out battleStartResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendlyMatchObserveBattleStartOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendlyMatchObserveBattleStartOK,
                    rmiName = RmiName_CG_RequestFriendlyMatchObserveBattleStartOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestFriendlyMatchObserveBattleStartOK(remote, rmiContext, battleStartResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendlyMatchObserveBattleStartOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendlyMatchObserveBattleStartOK,
                    rmiName = RmiName_CG_RequestFriendlyMatchObserveBattleStartOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestFriendlyMatchObserveClearOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            FriendlyMatchClearResult clearResult;
            CommonPacket.Marshaler.Read(__msg, out clearResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendlyMatchObserveClearOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendlyMatchObserveClearOK,
                    rmiName = RmiName_CG_RequestFriendlyMatchObserveClearOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestFriendlyMatchObserveClearOK(remote, rmiContext, clearResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendlyMatchObserveClearOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendlyMatchObserveClearOK,
                    rmiName = RmiName_CG_RequestFriendlyMatchObserveClearOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestFriendlyMatchObserveExitOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            bool isRelayServerStatus;
            CommonPacket.Marshaler.Read(__msg, out isRelayServerStatus);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendlyMatchObserveExitOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendlyMatchObserveExitOK,
                    rmiName = RmiName_CG_RequestFriendlyMatchObserveExitOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestFriendlyMatchObserveExitOK(remote, rmiContext, isRelayServerStatus))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendlyMatchObserveExitOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendlyMatchObserveExitOK,
                    rmiName = RmiName_CG_RequestFriendlyMatchObserveExitOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_GC_NotifyFriendlyMatchObserveInvite(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            FriendlyMatchClientSendRoomInfo inviteRoomInfo;
            CommonPacket.Marshaler.Read(__msg, out inviteRoomInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_GC_NotifyFriendlyMatchObserveInvite);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.GC_NotifyFriendlyMatchObserveInvite,
                    rmiName = RmiName_GC_NotifyFriendlyMatchObserveInvite,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.GC_NotifyFriendlyMatchObserveInvite(remote, rmiContext, inviteRoomInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_GC_NotifyFriendlyMatchObserveInvite);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.GC_NotifyFriendlyMatchObserveInvite,
                    rmiName = RmiName_GC_NotifyFriendlyMatchObserveInvite,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestFriendlyMatchObserveSetInviteOptionOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            FriendlyMatchInviteOption option;
            CommonPacket.Marshaler.Read(__msg, out option);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendlyMatchObserveSetInviteOptionOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendlyMatchObserveSetInviteOptionOK,
                    rmiName = RmiName_CG_RequestFriendlyMatchObserveSetInviteOptionOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestFriendlyMatchObserveSetInviteOptionOK(remote, rmiContext, option))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendlyMatchObserveSetInviteOptionOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestFriendlyMatchObserveSetInviteOptionOK,
                    rmiName = RmiName_CG_RequestFriendlyMatchObserveSetInviteOptionOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventGambleWishSaveOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserEventGachaWishInfo userEventGachaWishInfo;
            CommonPacket.Marshaler.Read(__msg, out userEventGachaWishInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventGambleWishSaveOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventGambleWishSaveOK,
                    rmiName = RmiName_CG_RequestEventGambleWishSaveOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventGambleWishSaveOK(remote, rmiContext, userEventGachaWishInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventGambleWishSaveOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventGambleWishSaveOK,
                    rmiName = RmiName_CG_RequestEventGambleWishSaveOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventMazeInfoOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserMazeEventInfo userMazeEventInfo;
            CommonPacket.Marshaler.Read(__msg, out userMazeEventInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventMazeInfoOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventMazeInfoOK,
                    rmiName = RmiName_CG_RequestEventMazeInfoOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventMazeInfoOK(remote, rmiContext, userMazeEventInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventMazeInfoOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventMazeInfoOK,
                    rmiName = RmiName_CG_RequestEventMazeInfoOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventMazeStartOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserMazeEventInfo userMazeEventInfo;
            CommonPacket.Marshaler.Read(__msg, out userMazeEventInfo);
            List<ItemResultInfo> useItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfoList);
            APInfo apInfo;
            CommonPacket.Marshaler.Read(__msg, out apInfo);
            ItemResultInfo getItemResultInfo;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfo);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventMazeStartOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventMazeStartOK,
                    rmiName = RmiName_CG_RequestEventMazeStartOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventMazeStartOK(remote, rmiContext, userMazeEventInfo, useItemResultInfoList, apInfo, getItemResultInfo, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventMazeStartOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventMazeStartOK,
                    rmiName = RmiName_CG_RequestEventMazeStartOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventMazeSelectStartHeroesOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserMazeEventInfo userMazeEventInfo;
            CommonPacket.Marshaler.Read(__msg, out userMazeEventInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventMazeSelectStartHeroesOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventMazeSelectStartHeroesOK,
                    rmiName = RmiName_CG_RequestEventMazeSelectStartHeroesOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventMazeSelectStartHeroesOK(remote, rmiContext, userMazeEventInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventMazeSelectStartHeroesOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventMazeSelectStartHeroesOK,
                    rmiName = RmiName_CG_RequestEventMazeSelectStartHeroesOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventMazeInitializeOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserMazeEventInfo userMazeEventInfo;
            CommonPacket.Marshaler.Read(__msg, out userMazeEventInfo);
            ItemResultInfo useItemResultInfo;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventMazeInitializeOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventMazeInitializeOK,
                    rmiName = RmiName_CG_RequestEventMazeInitializeOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventMazeInitializeOK(remote, rmiContext, userMazeEventInfo, useItemResultInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventMazeInitializeOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventMazeInitializeOK,
                    rmiName = RmiName_CG_RequestEventMazeInitializeOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventMazeMoveOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserMazeEventInfo userMazeEventInfo;
            CommonPacket.Marshaler.Read(__msg, out userMazeEventInfo);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventMazeMoveOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventMazeMoveOK,
                    rmiName = RmiName_CG_RequestEventMazeMoveOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventMazeMoveOK(remote, rmiContext, userMazeEventInfo, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventMazeMoveOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventMazeMoveOK,
                    rmiName = RmiName_CG_RequestEventMazeMoveOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventMazePassiveSelectOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserMazeEventInfo userMazeEventInfo;
            CommonPacket.Marshaler.Read(__msg, out userMazeEventInfo);
            int passiveID;
            CommonPacket.Marshaler.Read(__msg, out passiveID);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventMazePassiveSelectOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventMazePassiveSelectOK,
                    rmiName = RmiName_CG_RequestEventMazePassiveSelectOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventMazePassiveSelectOK(remote, rmiContext, userMazeEventInfo, passiveID))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventMazePassiveSelectOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventMazePassiveSelectOK,
                    rmiName = RmiName_CG_RequestEventMazePassiveSelectOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventMazeSeasonRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserMazeEventInfo userMazeEventInfo;
            CommonPacket.Marshaler.Read(__msg, out userMazeEventInfo);
            List<ItemResultInfo> getItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventMazeSeasonRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventMazeSeasonRewardOK,
                    rmiName = RmiName_CG_RequestEventMazeSeasonRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventMazeSeasonRewardOK(remote, rmiContext, userMazeEventInfo, getItemResultInfoList, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventMazeSeasonRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventMazeSeasonRewardOK,
                    rmiName = RmiName_CG_RequestEventMazeSeasonRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventMazeChangeSlotOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserMazeEventInfo userMazeEventInfo;
            CommonPacket.Marshaler.Read(__msg, out userMazeEventInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventMazeChangeSlotOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventMazeChangeSlotOK,
                    rmiName = RmiName_CG_RequestEventMazeChangeSlotOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventMazeChangeSlotOK(remote, rmiContext, userMazeEventInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventMazeChangeSlotOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventMazeChangeSlotOK,
                    rmiName = RmiName_CG_RequestEventMazeChangeSlotOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventMazeRefreshSelectableHeroesOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserMazeEventInfo userMazeEventInfo;
            CommonPacket.Marshaler.Read(__msg, out userMazeEventInfo);
            ItemResultInfo useItemResultInfo;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfo);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventMazeRefreshSelectableHeroesOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventMazeRefreshSelectableHeroesOK,
                    rmiName = RmiName_CG_RequestEventMazeRefreshSelectableHeroesOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventMazeRefreshSelectableHeroesOK(remote, rmiContext, userMazeEventInfo, useItemResultInfo, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventMazeRefreshSelectableHeroesOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventMazeRefreshSelectableHeroesOK,
                    rmiName = RmiName_CG_RequestEventMazeRefreshSelectableHeroesOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventMazeShopBuyOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserMazeEventInfo userMazeEventInfo;
            CommonPacket.Marshaler.Read(__msg, out userMazeEventInfo);
            ItemResultInfo useItemResultInfo;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfo);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventMazeShopBuyOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventMazeShopBuyOK,
                    rmiName = RmiName_CG_RequestEventMazeShopBuyOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventMazeShopBuyOK(remote, rmiContext, userMazeEventInfo, useItemResultInfo, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventMazeShopBuyOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventMazeShopBuyOK,
                    rmiName = RmiName_CG_RequestEventMazeShopBuyOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventMazeShopBuffBuyOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserMazeEventInfo userMazeEventInfo;
            CommonPacket.Marshaler.Read(__msg, out userMazeEventInfo);
            ItemResultInfo useItemResultInfo;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfo);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventMazeShopBuffBuyOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventMazeShopBuffBuyOK,
                    rmiName = RmiName_CG_RequestEventMazeShopBuffBuyOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventMazeShopBuffBuyOK(remote, rmiContext, userMazeEventInfo, useItemResultInfo, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventMazeShopBuffBuyOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventMazeShopBuffBuyOK,
                    rmiName = RmiName_CG_RequestEventMazeShopBuffBuyOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventMoleGameInfoOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            ClientSendEventMoleGameInfo clientSendEventMoleGameInfo;
            CommonPacket.Marshaler.Read(__msg, out clientSendEventMoleGameInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventMoleGameInfoOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventMoleGameInfoOK,
                    rmiName = RmiName_CG_RequestEventMoleGameInfoOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventMoleGameInfoOK(remote, rmiContext, clientSendEventMoleGameInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventMoleGameInfoOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventMoleGameInfoOK,
                    rmiName = RmiName_CG_RequestEventMoleGameInfoOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventMoleGameStartOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            ClientSendEventMoleGameInfo clientSendMoleGameInfo;
            CommonPacket.Marshaler.Read(__msg, out clientSendMoleGameInfo);
            ItemResultInfo useItemResultInfo;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfo);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventMoleGameStartOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventMoleGameStartOK,
                    rmiName = RmiName_CG_RequestEventMoleGameStartOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventMoleGameStartOK(remote, rmiContext, clientSendMoleGameInfo, useItemResultInfo, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventMoleGameStartOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventMoleGameStartOK,
                    rmiName = RmiName_CG_RequestEventMoleGameStartOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventMoleGameEndOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            ClientSendEventMoleGameInfo clientSendMoleGameInfo;
            CommonPacket.Marshaler.Read(__msg, out clientSendMoleGameInfo);
            List<ItemResultInfo> rewardItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out rewardItemResultInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventMoleGameEndOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventMoleGameEndOK,
                    rmiName = RmiName_CG_RequestEventMoleGameEndOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventMoleGameEndOK(remote, rmiContext, clientSendMoleGameInfo, rewardItemResultInfoList, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventMoleGameEndOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventMoleGameEndOK,
                    rmiName = RmiName_CG_RequestEventMoleGameEndOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventMoleGameRecordRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            ClientSendEventMoleGameInfo clientSendMoleGameInfo;
            CommonPacket.Marshaler.Read(__msg, out clientSendMoleGameInfo);
            int recordType;
            CommonPacket.Marshaler.Read(__msg, out recordType);
            int resultRewardOrder;
            CommonPacket.Marshaler.Read(__msg, out resultRewardOrder);
            ItemResultInfo rewardItemResultInfo;
            CommonPacket.Marshaler.Read(__msg, out rewardItemResultInfo);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventMoleGameRecordRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventMoleGameRecordRewardOK,
                    rmiName = RmiName_CG_RequestEventMoleGameRecordRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventMoleGameRecordRewardOK(remote, rmiContext, clientSendMoleGameInfo, recordType, resultRewardOrder, rewardItemResultInfo, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventMoleGameRecordRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventMoleGameRecordRewardOK,
                    rmiName = RmiName_CG_RequestEventMoleGameRecordRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventMoleGameTotalRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            ClientSendEventMoleGameInfo clientSendMoleGameInfo;
            CommonPacket.Marshaler.Read(__msg, out clientSendMoleGameInfo);
            int resultRewardOrder;
            CommonPacket.Marshaler.Read(__msg, out resultRewardOrder);
            ItemResultInfo rewardItemResultInfo;
            CommonPacket.Marshaler.Read(__msg, out rewardItemResultInfo);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventMoleGameTotalRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventMoleGameTotalRewardOK,
                    rmiName = RmiName_CG_RequestEventMoleGameTotalRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventMoleGameTotalRewardOK(remote, rmiContext, clientSendMoleGameInfo, resultRewardOrder, rewardItemResultInfo, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventMoleGameTotalRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventMoleGameTotalRewardOK,
                    rmiName = RmiName_CG_RequestEventMoleGameTotalRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventMoleGameRankInfoOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int eventSEQ;
            CommonPacket.Marshaler.Read(__msg, out eventSEQ);
            List<EventMoleGameRankInfo> rankInfoList;
            CommonPacket.Marshaler.Read(__msg, out rankInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventMoleGameRankInfoOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventMoleGameRankInfoOK,
                    rmiName = RmiName_CG_RequestEventMoleGameRankInfoOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventMoleGameRankInfoOK(remote, rmiContext, eventSEQ, rankInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventMoleGameRankInfoOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventMoleGameRankInfoOK,
                    rmiName = RmiName_CG_RequestEventMoleGameRankInfoOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventLobbyBuffInfoOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserEventLobbyBuffInfo userEventLobbyBuffInfo;
            CommonPacket.Marshaler.Read(__msg, out userEventLobbyBuffInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventLobbyBuffInfoOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventLobbyBuffInfoOK,
                    rmiName = RmiName_CG_RequestEventLobbyBuffInfoOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventLobbyBuffInfoOK(remote, rmiContext, userEventLobbyBuffInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventLobbyBuffInfoOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventLobbyBuffInfoOK,
                    rmiName = RmiName_CG_RequestEventLobbyBuffInfoOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventLobbyBuffBuyOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserEventLobbyBuffInfo userEventLobbyBuffInfo;
            CommonPacket.Marshaler.Read(__msg, out userEventLobbyBuffInfo);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventLobbyBuffBuyOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventLobbyBuffBuyOK,
                    rmiName = RmiName_CG_RequestEventLobbyBuffBuyOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventLobbyBuffBuyOK(remote, rmiContext, userEventLobbyBuffInfo, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventLobbyBuffBuyOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventLobbyBuffBuyOK,
                    rmiName = RmiName_CG_RequestEventLobbyBuffBuyOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_GC_NotifyEventLobbyBuffInfo(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserEventLobbyBuffInfo userEventLobbyBuffInfo;
            CommonPacket.Marshaler.Read(__msg, out userEventLobbyBuffInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_GC_NotifyEventLobbyBuffInfo);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.GC_NotifyEventLobbyBuffInfo,
                    rmiName = RmiName_GC_NotifyEventLobbyBuffInfo,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.GC_NotifyEventLobbyBuffInfo(remote, rmiContext, userEventLobbyBuffInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_GC_NotifyEventLobbyBuffInfo);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.GC_NotifyEventLobbyBuffInfo,
                    rmiName = RmiName_GC_NotifyEventLobbyBuffInfo,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventBoxWishInfoOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int eventSEQ;
            CommonPacket.Marshaler.Read(__msg, out eventSEQ);
            int wishStep;
            CommonPacket.Marshaler.Read(__msg, out wishStep);
            int wishId;
            CommonPacket.Marshaler.Read(__msg, out wishId);
            List<UserExchangeEventInfo> exchangeEventInfoList;
            CommonPacket.Marshaler.Read(__msg, out exchangeEventInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventBoxWishInfoOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventBoxWishInfoOK,
                    rmiName = RmiName_CG_RequestEventBoxWishInfoOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventBoxWishInfoOK(remote, rmiContext, eventSEQ, wishStep, wishId, exchangeEventInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventBoxWishInfoOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventBoxWishInfoOK,
                    rmiName = RmiName_CG_RequestEventBoxWishInfoOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventBoxWishSetOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int eventSEQ;
            CommonPacket.Marshaler.Read(__msg, out eventSEQ);
            int wishId;
            CommonPacket.Marshaler.Read(__msg, out wishId);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventBoxWishSetOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventBoxWishSetOK,
                    rmiName = RmiName_CG_RequestEventBoxWishSetOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventBoxWishSetOK(remote, rmiContext, eventSEQ, wishId))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventBoxWishSetOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventBoxWishSetOK,
                    rmiName = RmiName_CG_RequestEventBoxWishSetOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventBoxWishPickUpOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int eventSEQ;
            CommonPacket.Marshaler.Read(__msg, out eventSEQ);
            byte pickCount;
            CommonPacket.Marshaler.Read(__msg, out pickCount);
            byte pickUpCount;
            CommonPacket.Marshaler.Read(__msg, out pickUpCount);
            List<UserExchangeEventInfo> exchangeEventInfoList;
            CommonPacket.Marshaler.Read(__msg, out exchangeEventInfoList);
            List<ItemResultInfo> getItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfoList);
            List<UpgradeUserSkin> upgradeSkinList;
            CommonPacket.Marshaler.Read(__msg, out upgradeSkinList);
            List<ItemResultInfo> useItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventBoxWishPickUpOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventBoxWishPickUpOK,
                    rmiName = RmiName_CG_RequestEventBoxWishPickUpOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventBoxWishPickUpOK(remote, rmiContext, eventSEQ, pickCount, pickUpCount, exchangeEventInfoList, getItemResultInfoList, upgradeSkinList, useItemResultInfoList, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventBoxWishPickUpOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventBoxWishPickUpOK,
                    rmiName = RmiName_CG_RequestEventBoxWishPickUpOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventBoxWishResetOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int eventSEQ;
            CommonPacket.Marshaler.Read(__msg, out eventSEQ);
            int wishStep;
            CommonPacket.Marshaler.Read(__msg, out wishStep);
            int wishId;
            CommonPacket.Marshaler.Read(__msg, out wishId);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventBoxWishResetOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventBoxWishResetOK,
                    rmiName = RmiName_CG_RequestEventBoxWishResetOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventBoxWishResetOK(remote, rmiContext, eventSEQ, wishStep, wishId))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventBoxWishResetOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventBoxWishResetOK,
                    rmiName = RmiName_CG_RequestEventBoxWishResetOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestConstellationStoneLockOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int stoneId;
            CommonPacket.Marshaler.Read(__msg, out stoneId);
            bool isLock;
            CommonPacket.Marshaler.Read(__msg, out isLock);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestConstellationStoneLockOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestConstellationStoneLockOK,
                    rmiName = RmiName_CG_RequestConstellationStoneLockOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestConstellationStoneLockOK(remote, rmiContext, stoneId, isLock))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestConstellationStoneLockOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestConstellationStoneLockOK,
                    rmiName = RmiName_CG_RequestConstellationStoneLockOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventConquestInfoOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserEventConquesClientSendInfo userEventConquestClientSendInfo;
            CommonPacket.Marshaler.Read(__msg, out userEventConquestClientSendInfo);
            bool isEventFirstEnter;
            CommonPacket.Marshaler.Read(__msg, out isEventFirstEnter);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventConquestInfoOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventConquestInfoOK,
                    rmiName = RmiName_CG_RequestEventConquestInfoOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventConquestInfoOK(remote, rmiContext, userEventConquestClientSendInfo, isEventFirstEnter))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventConquestInfoOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventConquestInfoOK,
                    rmiName = RmiName_CG_RequestEventConquestInfoOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventConquestProductionDepotCompleteRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserEventConquesClientSendInfo userEventConquestClientSendInfo;
            CommonPacket.Marshaler.Read(__msg, out userEventConquestClientSendInfo);
            List<ItemResultInfo> getItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventConquestProductionDepotCompleteRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventConquestProductionDepotCompleteRewardOK,
                    rmiName = RmiName_CG_RequestEventConquestProductionDepotCompleteRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventConquestProductionDepotCompleteRewardOK(remote, rmiContext, userEventConquestClientSendInfo, getItemResultInfoList, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventConquestProductionDepotCompleteRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventConquestProductionDepotCompleteRewardOK,
                    rmiName = RmiName_CG_RequestEventConquestProductionDepotCompleteRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventConquestProductionDepotUpgradeOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserEventConquesClientSendInfo userEventConquestClientSendInfo;
            CommonPacket.Marshaler.Read(__msg, out userEventConquestClientSendInfo);
            List<ItemResultInfo> useItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventConquestProductionDepotUpgradeOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventConquestProductionDepotUpgradeOK,
                    rmiName = RmiName_CG_RequestEventConquestProductionDepotUpgradeOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventConquestProductionDepotUpgradeOK(remote, rmiContext, userEventConquestClientSendInfo, useItemResultInfoList, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventConquestProductionDepotUpgradeOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventConquestProductionDepotUpgradeOK,
                    rmiName = RmiName_CG_RequestEventConquestProductionDepotUpgradeOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventConquestProductionDepotUpgradeRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserEventConquesClientSendInfo userEventConquestClientSendInfo;
            CommonPacket.Marshaler.Read(__msg, out userEventConquestClientSendInfo);
            List<ItemResultInfo> getItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventConquestProductionDepotUpgradeRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventConquestProductionDepotUpgradeRewardOK,
                    rmiName = RmiName_CG_RequestEventConquestProductionDepotUpgradeRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventConquestProductionDepotUpgradeRewardOK(remote, rmiContext, userEventConquestClientSendInfo, getItemResultInfoList, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventConquestProductionDepotUpgradeRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventConquestProductionDepotUpgradeRewardOK,
                    rmiName = RmiName_CG_RequestEventConquestProductionDepotUpgradeRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventConquestAreaAttackOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserEventConquesClientSendInfo userEventConquestClientSendInfo;
            CommonPacket.Marshaler.Read(__msg, out userEventConquestClientSendInfo);
            int attackAreaID;
            CommonPacket.Marshaler.Read(__msg, out attackAreaID);
            List<ItemResultInfo> useItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventConquestAreaAttackOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventConquestAreaAttackOK,
                    rmiName = RmiName_CG_RequestEventConquestAreaAttackOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventConquestAreaAttackOK(remote, rmiContext, userEventConquestClientSendInfo, attackAreaID, useItemResultInfoList, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventConquestAreaAttackOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventConquestAreaAttackOK,
                    rmiName = RmiName_CG_RequestEventConquestAreaAttackOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventConquestAreaFeverAttackOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserEventConquesClientSendInfo userEventConquestClientSendInfo;
            CommonPacket.Marshaler.Read(__msg, out userEventConquestClientSendInfo);
            int attackAreaID;
            CommonPacket.Marshaler.Read(__msg, out attackAreaID);
            List<ItemResultInfo> useItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventConquestAreaFeverAttackOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventConquestAreaFeverAttackOK,
                    rmiName = RmiName_CG_RequestEventConquestAreaFeverAttackOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventConquestAreaFeverAttackOK(remote, rmiContext, userEventConquestClientSendInfo, attackAreaID, useItemResultInfoList, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventConquestAreaFeverAttackOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventConquestAreaFeverAttackOK,
                    rmiName = RmiName_CG_RequestEventConquestAreaFeverAttackOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventConquestAreaAttackRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserEventConquesClientSendInfo userEventConquestClientSendInfo;
            CommonPacket.Marshaler.Read(__msg, out userEventConquestClientSendInfo);
            List<ItemResultInfo> getItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventConquestAreaAttackRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventConquestAreaAttackRewardOK,
                    rmiName = RmiName_CG_RequestEventConquestAreaAttackRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventConquestAreaAttackRewardOK(remote, rmiContext, userEventConquestClientSendInfo, getItemResultInfoList, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventConquestAreaAttackRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventConquestAreaAttackRewardOK,
                    rmiName = RmiName_CG_RequestEventConquestAreaAttackRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventConquestMakeFeverItemOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserEventConquesClientSendInfo userEventConquestClientSendInfo;
            CommonPacket.Marshaler.Read(__msg, out userEventConquestClientSendInfo);
            List<ItemResultInfo> useItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfoList);
            List<ItemResultInfo> getItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventConquestMakeFeverItemOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventConquestMakeFeverItemOK,
                    rmiName = RmiName_CG_RequestEventConquestMakeFeverItemOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventConquestMakeFeverItemOK(remote, rmiContext, userEventConquestClientSendInfo, useItemResultInfoList, getItemResultInfoList, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventConquestMakeFeverItemOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventConquestMakeFeverItemOK,
                    rmiName = RmiName_CG_RequestEventConquestMakeFeverItemOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventConquestUpdateSceneIndexOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserEventConquesClientSendInfo userEventConquestClientSendInfo;
            CommonPacket.Marshaler.Read(__msg, out userEventConquestClientSendInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventConquestUpdateSceneIndexOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventConquestUpdateSceneIndexOK,
                    rmiName = RmiName_CG_RequestEventConquestUpdateSceneIndexOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventConquestUpdateSceneIndexOK(remote, rmiContext, userEventConquestClientSendInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventConquestUpdateSceneIndexOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventConquestUpdateSceneIndexOK,
                    rmiName = RmiName_CG_RequestEventConquestUpdateSceneIndexOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventConquestUpdateUnitPosOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserEventConquesClientSendInfo userEventConquestClientSendInfo;
            CommonPacket.Marshaler.Read(__msg, out userEventConquestClientSendInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventConquestUpdateUnitPosOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventConquestUpdateUnitPosOK,
                    rmiName = RmiName_CG_RequestEventConquestUpdateUnitPosOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventConquestUpdateUnitPosOK(remote, rmiContext, userEventConquestClientSendInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventConquestUpdateUnitPosOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventConquestUpdateUnitPosOK,
                    rmiName = RmiName_CG_RequestEventConquestUpdateUnitPosOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventRoadInfoOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserEventRoadInfo eventRoadInfo;
            CommonPacket.Marshaler.Read(__msg, out eventRoadInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventRoadInfoOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventRoadInfoOK,
                    rmiName = RmiName_CG_RequestEventRoadInfoOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventRoadInfoOK(remote, rmiContext, eventRoadInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventRoadInfoOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventRoadInfoOK,
                    rmiName = RmiName_CG_RequestEventRoadInfoOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventRoadWalkOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserEventRoadInfo eventRoadInfo;
            CommonPacket.Marshaler.Read(__msg, out eventRoadInfo);
            List<ItemResultInfo> useItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfoList);
            List<ItemResultInfo> getItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventRoadWalkOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventRoadWalkOK,
                    rmiName = RmiName_CG_RequestEventRoadWalkOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventRoadWalkOK(remote, rmiContext, eventRoadInfo, useItemResultInfoList, getItemResultInfoList, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventRoadWalkOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventRoadWalkOK,
                    rmiName = RmiName_CG_RequestEventRoadWalkOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventRoadRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserEventRoadInfo eventRoadInfo;
            CommonPacket.Marshaler.Read(__msg, out eventRoadInfo);
            List<ItemResultInfo> getItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventRoadRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventRoadRewardOK,
                    rmiName = RmiName_CG_RequestEventRoadRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventRoadRewardOK(remote, rmiContext, eventRoadInfo, getItemResultInfoList, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventRoadRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventRoadRewardOK,
                    rmiName = RmiName_CG_RequestEventRoadRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventRoadSelectOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserEventRoadInfo eventRoadInfo;
            CommonPacket.Marshaler.Read(__msg, out eventRoadInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventRoadSelectOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventRoadSelectOK,
                    rmiName = RmiName_CG_RequestEventRoadSelectOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventRoadSelectOK(remote, rmiContext, eventRoadInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventRoadSelectOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventRoadSelectOK,
                    rmiName = RmiName_CG_RequestEventRoadSelectOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventGambleBoxInfoOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserEventGambleBoxInfoToClientSend eventGambleBoxInfo;
            CommonPacket.Marshaler.Read(__msg, out eventGambleBoxInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventGambleBoxInfoOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventGambleBoxInfoOK,
                    rmiName = RmiName_CG_RequestEventGambleBoxInfoOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventGambleBoxInfoOK(remote, rmiContext, eventGambleBoxInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventGambleBoxInfoOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventGambleBoxInfoOK,
                    rmiName = RmiName_CG_RequestEventGambleBoxInfoOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventGambleBoxPickupOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserEventGambleBoxInfoToClientSend eventGambleBoxInfo;
            CommonPacket.Marshaler.Read(__msg, out eventGambleBoxInfo);
            List<ItemResultInfo> useItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfoList);
            List<ItemResultInfo> getItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfoList);
            List<UpgradeUserSkin> upgradeSkinList;
            CommonPacket.Marshaler.Read(__msg, out upgradeSkinList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventGambleBoxPickupOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventGambleBoxPickupOK,
                    rmiName = RmiName_CG_RequestEventGambleBoxPickupOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventGambleBoxPickupOK(remote, rmiContext, eventGambleBoxInfo, useItemResultInfoList, getItemResultInfoList, upgradeSkinList, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventGambleBoxPickupOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventGambleBoxPickupOK,
                    rmiName = RmiName_CG_RequestEventGambleBoxPickupOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventGambleBoxResetOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserEventGambleBoxInfoToClientSend eventGambleBoxInfo;
            CommonPacket.Marshaler.Read(__msg, out eventGambleBoxInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventGambleBoxResetOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventGambleBoxResetOK,
                    rmiName = RmiName_CG_RequestEventGambleBoxResetOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventGambleBoxResetOK(remote, rmiContext, eventGambleBoxInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventGambleBoxResetOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventGambleBoxResetOK,
                    rmiName = RmiName_CG_RequestEventGambleBoxResetOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventLuckyBoxInfoOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserEventLuckyBoxInfo userEventLuckyBoxInfo;
            CommonPacket.Marshaler.Read(__msg, out userEventLuckyBoxInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventLuckyBoxInfoOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventLuckyBoxInfoOK,
                    rmiName = RmiName_CG_RequestEventLuckyBoxInfoOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventLuckyBoxInfoOK(remote, rmiContext, userEventLuckyBoxInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventLuckyBoxInfoOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventLuckyBoxInfoOK,
                    rmiName = RmiName_CG_RequestEventLuckyBoxInfoOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventLuckyBoxRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserEventLuckyBoxInfo userEventLuckyBoxInfo;
            CommonPacket.Marshaler.Read(__msg, out userEventLuckyBoxInfo);
            ItemResultInfo useItemResultInfo;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfo);
            NeedItemInfo rewardItemInfo;
            CommonPacket.Marshaler.Read(__msg, out rewardItemInfo);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventLuckyBoxRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventLuckyBoxRewardOK,
                    rmiName = RmiName_CG_RequestEventLuckyBoxRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventLuckyBoxRewardOK(remote, rmiContext, userEventLuckyBoxInfo, useItemResultInfo, rewardItemInfo, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventLuckyBoxRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventLuckyBoxRewardOK,
                    rmiName = RmiName_CG_RequestEventLuckyBoxRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventMazeRefreshSelectablePassivesOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserMazeEventInfo userMazeEventInfo;
            CommonPacket.Marshaler.Read(__msg, out userMazeEventInfo);
            ItemResultInfo useItemResultInfo;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfo);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventMazeRefreshSelectablePassivesOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventMazeRefreshSelectablePassivesOK,
                    rmiName = RmiName_CG_RequestEventMazeRefreshSelectablePassivesOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventMazeRefreshSelectablePassivesOK(remote, rmiContext, userMazeEventInfo, useItemResultInfo, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventMazeRefreshSelectablePassivesOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventMazeRefreshSelectablePassivesOK,
                    rmiName = RmiName_CG_RequestEventMazeRefreshSelectablePassivesOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventMazeSaveTeamOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserMazeEventInfo userMazeEventInfo;
            CommonPacket.Marshaler.Read(__msg, out userMazeEventInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventMazeSaveTeamOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventMazeSaveTeamOK,
                    rmiName = RmiName_CG_RequestEventMazeSaveTeamOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventMazeSaveTeamOK(remote, rmiContext, userMazeEventInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventMazeSaveTeamOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventMazeSaveTeamOK,
                    rmiName = RmiName_CG_RequestEventMazeSaveTeamOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventMazeSelectClearBonusOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserMazeEventInfo userMazeEventInfo;
            CommonPacket.Marshaler.Read(__msg, out userMazeEventInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventMazeSelectClearBonusOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventMazeSelectClearBonusOK,
                    rmiName = RmiName_CG_RequestEventMazeSelectClearBonusOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventMazeSelectClearBonusOK(remote, rmiContext, userMazeEventInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventMazeSelectClearBonusOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventMazeSelectClearBonusOK,
                    rmiName = RmiName_CG_RequestEventMazeSelectClearBonusOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventMazeStartSavedTeamOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserMazeEventInfo userMazeEventInfo;
            CommonPacket.Marshaler.Read(__msg, out userMazeEventInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventMazeStartSavedTeamOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventMazeStartSavedTeamOK,
                    rmiName = RmiName_CG_RequestEventMazeStartSavedTeamOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventMazeStartSavedTeamOK(remote, rmiContext, userMazeEventInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventMazeStartSavedTeamOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventMazeStartSavedTeamOK,
                    rmiName = RmiName_CG_RequestEventMazeStartSavedTeamOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestGuildOrderMissioInfoOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            GuildOrderMissionInfoClientSend guildOrderMissionInfoClientSend;
            CommonPacket.Marshaler.Read(__msg, out guildOrderMissionInfoClientSend);
            List<UserGuildOrderMissionInfo> userGuildOrderMissionInfoClientSend;
            CommonPacket.Marshaler.Read(__msg, out userGuildOrderMissionInfoClientSend);
            int remainNextResetSec;
            CommonPacket.Marshaler.Read(__msg, out remainNextResetSec);
            GuildMemberInfo userGuildMemberInfo;
            CommonPacket.Marshaler.Read(__msg, out userGuildMemberInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildOrderMissioInfoOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestGuildOrderMissioInfoOK,
                    rmiName = RmiName_CG_RequestGuildOrderMissioInfoOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestGuildOrderMissioInfoOK(remote, rmiContext, guildOrderMissionInfoClientSend, userGuildOrderMissionInfoClientSend, remainNextResetSec, userGuildMemberInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildOrderMissioInfoOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestGuildOrderMissioInfoOK,
                    rmiName = RmiName_CG_RequestGuildOrderMissioInfoOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestGuildOrderMissionClearOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int missionID;
            CommonPacket.Marshaler.Read(__msg, out missionID);
            GuildOrderMissionInfoClientSend guildOrderMissionInfoClientSend;
            CommonPacket.Marshaler.Read(__msg, out guildOrderMissionInfoClientSend);
            List<UserGuildOrderMissionInfo> userGuildOrderMissionInfoClientSend;
            CommonPacket.Marshaler.Read(__msg, out userGuildOrderMissionInfoClientSend);
            List<ItemResultInfo> getItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfoList);
            int originalGetAPCount;
            CommonPacket.Marshaler.Read(__msg, out originalGetAPCount);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildOrderMissionClearOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestGuildOrderMissionClearOK,
                    rmiName = RmiName_CG_RequestGuildOrderMissionClearOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestGuildOrderMissionClearOK(remote, rmiContext, missionID, guildOrderMissionInfoClientSend, userGuildOrderMissionInfoClientSend, getItemResultInfoList, originalGetAPCount))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildOrderMissionClearOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestGuildOrderMissionClearOK,
                    rmiName = RmiName_CG_RequestGuildOrderMissionClearOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestGuildOrderMissionMileageBonusRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            GuildOrderMissionInfoClientSend guildOrderMissionInfoClientSend;
            CommonPacket.Marshaler.Read(__msg, out guildOrderMissionInfoClientSend);
            List<UserGuildOrderMissionInfo> userGuildOrderMissionInfoClientSend;
            CommonPacket.Marshaler.Read(__msg, out userGuildOrderMissionInfoClientSend);
            List<ItemResultInfo> getItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfoList);
            GuildMemberInfo userGuildMemberInfo;
            CommonPacket.Marshaler.Read(__msg, out userGuildMemberInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildOrderMissionMileageBonusRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestGuildOrderMissionMileageBonusRewardOK,
                    rmiName = RmiName_CG_RequestGuildOrderMissionMileageBonusRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestGuildOrderMissionMileageBonusRewardOK(remote, rmiContext, guildOrderMissionInfoClientSend, userGuildOrderMissionInfoClientSend, getItemResultInfoList, userGuildMemberInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildOrderMissionMileageBonusRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestGuildOrderMissionMileageBonusRewardOK,
                    rmiName = RmiName_CG_RequestGuildOrderMissionMileageBonusRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventConfirmGameInfoOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            ClientSendEventConfirmGameInfo confirmEventInfo;
            CommonPacket.Marshaler.Read(__msg, out confirmEventInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventConfirmGameInfoOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventConfirmGameInfoOK,
                    rmiName = RmiName_CG_RequestEventConfirmGameInfoOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventConfirmGameInfoOK(remote, rmiContext, confirmEventInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventConfirmGameInfoOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventConfirmGameInfoOK,
                    rmiName = RmiName_CG_RequestEventConfirmGameInfoOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventConfirmGameStartOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            ClientSendEventConfirmGameInfo confirmEventInfo;
            CommonPacket.Marshaler.Read(__msg, out confirmEventInfo);
            List<ItemResultInfo> useItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventConfirmGameStartOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventConfirmGameStartOK,
                    rmiName = RmiName_CG_RequestEventConfirmGameStartOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventConfirmGameStartOK(remote, rmiContext, confirmEventInfo, useItemResultInfoList, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventConfirmGameStartOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventConfirmGameStartOK,
                    rmiName = RmiName_CG_RequestEventConfirmGameStartOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventConfirmGameEndOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            ClientSendEventConfirmGameInfo confirmEventInfo;
            CommonPacket.Marshaler.Read(__msg, out confirmEventInfo);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventConfirmGameEndOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventConfirmGameEndOK,
                    rmiName = RmiName_CG_RequestEventConfirmGameEndOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventConfirmGameEndOK(remote, rmiContext, confirmEventInfo, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventConfirmGameEndOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventConfirmGameEndOK,
                    rmiName = RmiName_CG_RequestEventConfirmGameEndOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventConfirmGameRecordRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            ClientSendEventConfirmGameInfo confirmEventInfo;
            CommonPacket.Marshaler.Read(__msg, out confirmEventInfo);
            List<ItemResultInfo> rewardItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out rewardItemResultInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            int boxID;
            CommonPacket.Marshaler.Read(__msg, out boxID);
            int resultRewardOrder;
            CommonPacket.Marshaler.Read(__msg, out resultRewardOrder);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventConfirmGameRecordRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventConfirmGameRecordRewardOK,
                    rmiName = RmiName_CG_RequestEventConfirmGameRecordRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventConfirmGameRecordRewardOK(remote, rmiContext, confirmEventInfo, rewardItemResultInfoList, missionResult, boxID, resultRewardOrder))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventConfirmGameRecordRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventConfirmGameRecordRewardOK,
                    rmiName = RmiName_CG_RequestEventConfirmGameRecordRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventConfirmGameTotalRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            ClientSendEventConfirmGameInfo confirmEventInfo;
            CommonPacket.Marshaler.Read(__msg, out confirmEventInfo);
            List<ItemResultInfo> rewardItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out rewardItemResultInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventConfirmGameTotalRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventConfirmGameTotalRewardOK,
                    rmiName = RmiName_CG_RequestEventConfirmGameTotalRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventConfirmGameTotalRewardOK(remote, rmiContext, confirmEventInfo, rewardItemResultInfoList, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventConfirmGameTotalRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventConfirmGameTotalRewardOK,
                    rmiName = RmiName_CG_RequestEventConfirmGameTotalRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestHeroLeagueInfoOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            ClientSendHeroLeagueInfo heroLeagueInfo;
            CommonPacket.Marshaler.Read(__msg, out heroLeagueInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestHeroLeagueInfoOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestHeroLeagueInfoOK,
                    rmiName = RmiName_CG_RequestHeroLeagueInfoOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestHeroLeagueInfoOK(remote, rmiContext, heroLeagueInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestHeroLeagueInfoOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestHeroLeagueInfoOK,
                    rmiName = RmiName_CG_RequestHeroLeagueInfoOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestHeroLeagueSelectLeagueOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserHeroLeagueInfo userHeroLeagueInfo;
            CommonPacket.Marshaler.Read(__msg, out userHeroLeagueInfo);
            APInfo apInfo;
            CommonPacket.Marshaler.Read(__msg, out apInfo);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            List<UserTeam> userTeamList;
            CommonPacket.Marshaler.Read(__msg, out userTeamList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestHeroLeagueSelectLeagueOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestHeroLeagueSelectLeagueOK,
                    rmiName = RmiName_CG_RequestHeroLeagueSelectLeagueOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestHeroLeagueSelectLeagueOK(remote, rmiContext, userHeroLeagueInfo, apInfo, missionResult, userTeamList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestHeroLeagueSelectLeagueOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestHeroLeagueSelectLeagueOK,
                    rmiName = RmiName_CG_RequestHeroLeagueSelectLeagueOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestHeroLeagueInitializeOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            ClientSendHeroLeagueInfo heroLeagueInfo;
            CommonPacket.Marshaler.Read(__msg, out heroLeagueInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestHeroLeagueInitializeOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestHeroLeagueInitializeOK,
                    rmiName = RmiName_CG_RequestHeroLeagueInitializeOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestHeroLeagueInitializeOK(remote, rmiContext, heroLeagueInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestHeroLeagueInitializeOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestHeroLeagueInitializeOK,
                    rmiName = RmiName_CG_RequestHeroLeagueInitializeOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestHeroLeagueInitUserGroupOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            ClientSendHeroLeagueInfo heroLeagueInfo;
            CommonPacket.Marshaler.Read(__msg, out heroLeagueInfo);
            List<UserSkin> updateSkinList;
            CommonPacket.Marshaler.Read(__msg, out updateSkinList);
            APInfo apInfo;
            CommonPacket.Marshaler.Read(__msg, out apInfo);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestHeroLeagueInitUserGroupOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestHeroLeagueInitUserGroupOK,
                    rmiName = RmiName_CG_RequestHeroLeagueInitUserGroupOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestHeroLeagueInitUserGroupOK(remote, rmiContext, heroLeagueInfo, updateSkinList, apInfo, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestHeroLeagueInitUserGroupOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestHeroLeagueInitUserGroupOK,
                    rmiName = RmiName_CG_RequestHeroLeagueInitUserGroupOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestHeroLeagueGagueRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserHeroLeagueInfo userHeroLeagueInfo;
            CommonPacket.Marshaler.Read(__msg, out userHeroLeagueInfo);
            ItemResultInfo completeRewardItemResultInfo;
            CommonPacket.Marshaler.Read(__msg, out completeRewardItemResultInfo);
            ItemResultInfo battleRewardItemResultInfo;
            CommonPacket.Marshaler.Read(__msg, out battleRewardItemResultInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestHeroLeagueGagueRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestHeroLeagueGagueRewardOK,
                    rmiName = RmiName_CG_RequestHeroLeagueGagueRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestHeroLeagueGagueRewardOK(remote, rmiContext, userHeroLeagueInfo, completeRewardItemResultInfo, battleRewardItemResultInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestHeroLeagueGagueRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestHeroLeagueGagueRewardOK,
                    rmiName = RmiName_CG_RequestHeroLeagueGagueRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestHeroLeagueAttackTeamChangeOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserTeamChangeInfo userTeamChangeInfo;
            CommonPacket.Marshaler.Read(__msg, out userTeamChangeInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestHeroLeagueAttackTeamChangeOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestHeroLeagueAttackTeamChangeOK,
                    rmiName = RmiName_CG_RequestHeroLeagueAttackTeamChangeOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestHeroLeagueAttackTeamChangeOK(remote, rmiContext, userTeamChangeInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestHeroLeagueAttackTeamChangeOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestHeroLeagueAttackTeamChangeOK,
                    rmiName = RmiName_CG_RequestHeroLeagueAttackTeamChangeOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestHeroLeagueStageStartOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            StageStartResultInfo stageStartResultInfo;
            CommonPacket.Marshaler.Read(__msg, out stageStartResultInfo);
            List<HeroLeagueHero> defenceHeroLeagueHeroList;
            CommonPacket.Marshaler.Read(__msg, out defenceHeroLeagueHeroList);
            List<HeroLeagueHero> attackHeroLeagueHeroList;
            CommonPacket.Marshaler.Read(__msg, out attackHeroLeagueHeroList);
            List<int> seasonBuffIDList;
            CommonPacket.Marshaler.Read(__msg, out seasonBuffIDList);
            UserHeroLeagueInfo userHeroLeagueInfo;
            CommonPacket.Marshaler.Read(__msg, out userHeroLeagueInfo);
            List<UserSkin> updateSkinList;
            CommonPacket.Marshaler.Read(__msg, out updateSkinList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestHeroLeagueStageStartOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestHeroLeagueStageStartOK,
                    rmiName = RmiName_CG_RequestHeroLeagueStageStartOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestHeroLeagueStageStartOK(remote, rmiContext, stageStartResultInfo, defenceHeroLeagueHeroList, attackHeroLeagueHeroList, seasonBuffIDList, userHeroLeagueInfo, updateSkinList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestHeroLeagueStageStartOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestHeroLeagueStageStartOK,
                    rmiName = RmiName_CG_RequestHeroLeagueStageStartOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestHeroLeagueStageClearOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            StageClearResultInfo stageClearResultInfo;
            CommonPacket.Marshaler.Read(__msg, out stageClearResultInfo);
            byte winCount;
            CommonPacket.Marshaler.Read(__msg, out winCount);
            byte nextTeamNumber;
            CommonPacket.Marshaler.Read(__msg, out nextTeamNumber);
            bool isApply;
            CommonPacket.Marshaler.Read(__msg, out isApply);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestHeroLeagueStageClearOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestHeroLeagueStageClearOK,
                    rmiName = RmiName_CG_RequestHeroLeagueStageClearOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestHeroLeagueStageClearOK(remote, rmiContext, stageClearResultInfo, winCount, nextTeamNumber, isApply))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestHeroLeagueStageClearOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestHeroLeagueStageClearOK,
                    rmiName = RmiName_CG_RequestHeroLeagueStageClearOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestHeroLeagueStageRejoinOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<int> attackHeroIDList;
            CommonPacket.Marshaler.Read(__msg, out attackHeroIDList);
            List<int> defenceHeroIDList;
            CommonPacket.Marshaler.Read(__msg, out defenceHeroIDList);
            List<int> seasonBuffIDList;
            CommonPacket.Marshaler.Read(__msg, out seasonBuffIDList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestHeroLeagueStageRejoinOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestHeroLeagueStageRejoinOK,
                    rmiName = RmiName_CG_RequestHeroLeagueStageRejoinOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestHeroLeagueStageRejoinOK(remote, rmiContext, attackHeroIDList, defenceHeroIDList, seasonBuffIDList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestHeroLeagueStageRejoinOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestHeroLeagueStageRejoinOK,
                    rmiName = RmiName_CG_RequestHeroLeagueStageRejoinOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestHeroLeagueStageRejoinCancelOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestHeroLeagueStageRejoinCancelOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestHeroLeagueStageRejoinCancelOK,
                    rmiName = RmiName_CG_RequestHeroLeagueStageRejoinCancelOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestHeroLeagueStageRejoinCancelOK(remote, rmiContext))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestHeroLeagueStageRejoinCancelOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestHeroLeagueStageRejoinCancelOK,
                    rmiName = RmiName_CG_RequestHeroLeagueStageRejoinCancelOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestHeroLeagueScoreRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserHeroLeagueInfo userHeroLeagueInfo;
            CommonPacket.Marshaler.Read(__msg, out userHeroLeagueInfo);
            List<ItemResultInfo> getItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestHeroLeagueScoreRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestHeroLeagueScoreRewardOK,
                    rmiName = RmiName_CG_RequestHeroLeagueScoreRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestHeroLeagueScoreRewardOK(remote, rmiContext, userHeroLeagueInfo, getItemResultInfoList, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestHeroLeagueScoreRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestHeroLeagueScoreRewardOK,
                    rmiName = RmiName_CG_RequestHeroLeagueScoreRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventBalloonDartInfoOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserEventBalloonDartInfo eventBalloonDartInfo;
            CommonPacket.Marshaler.Read(__msg, out eventBalloonDartInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventBalloonDartInfoOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventBalloonDartInfoOK,
                    rmiName = RmiName_CG_RequestEventBalloonDartInfoOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventBalloonDartInfoOK(remote, rmiContext, eventBalloonDartInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventBalloonDartInfoOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventBalloonDartInfoOK,
                    rmiName = RmiName_CG_RequestEventBalloonDartInfoOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventBalloonDartThrowOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserEventBalloonDartInfo eventBalloonDartInfo;
            CommonPacket.Marshaler.Read(__msg, out eventBalloonDartInfo);
            List<ItemResultInfo> useItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfoList);
            List<ItemResultInfo> getItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventBalloonDartThrowOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventBalloonDartThrowOK,
                    rmiName = RmiName_CG_RequestEventBalloonDartThrowOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventBalloonDartThrowOK(remote, rmiContext, eventBalloonDartInfo, useItemResultInfoList, getItemResultInfoList, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventBalloonDartThrowOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventBalloonDartThrowOK,
                    rmiName = RmiName_CG_RequestEventBalloonDartThrowOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventBalloonDartChanceOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserEventBalloonDartInfo eventBalloonDartInfo;
            CommonPacket.Marshaler.Read(__msg, out eventBalloonDartInfo);
            List<ItemResultInfo> useItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out useItemResultInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventBalloonDartChanceOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventBalloonDartChanceOK,
                    rmiName = RmiName_CG_RequestEventBalloonDartChanceOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventBalloonDartChanceOK(remote, rmiContext, eventBalloonDartInfo, useItemResultInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventBalloonDartChanceOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventBalloonDartChanceOK,
                    rmiName = RmiName_CG_RequestEventBalloonDartChanceOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventBalloonDartStepUpOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserEventBalloonDartInfo eventBalloonDartInfo;
            CommonPacket.Marshaler.Read(__msg, out eventBalloonDartInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventBalloonDartStepUpOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventBalloonDartStepUpOK,
                    rmiName = RmiName_CG_RequestEventBalloonDartStepUpOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventBalloonDartStepUpOK(remote, rmiContext, eventBalloonDartInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventBalloonDartStepUpOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventBalloonDartStepUpOK,
                    rmiName = RmiName_CG_RequestEventBalloonDartStepUpOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventBalloonDartStepRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserEventBalloonDartInfo eventBalloonDartInfo;
            CommonPacket.Marshaler.Read(__msg, out eventBalloonDartInfo);
            List<ItemResultInfo> getItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventBalloonDartStepRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventBalloonDartStepRewardOK,
                    rmiName = RmiName_CG_RequestEventBalloonDartStepRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventBalloonDartStepRewardOK(remote, rmiContext, eventBalloonDartInfo, getItemResultInfoList, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventBalloonDartStepRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventBalloonDartStepRewardOK,
                    rmiName = RmiName_CG_RequestEventBalloonDartStepRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestEventBalloonDartTotalRewardOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            UserEventBalloonDartInfo eventBalloonDartInfo;
            CommonPacket.Marshaler.Read(__msg, out eventBalloonDartInfo);
            List<ItemResultInfo> getItemResultInfoList;
            CommonPacket.Marshaler.Read(__msg, out getItemResultInfoList);
            MissionResult missionResult;
            CommonPacket.Marshaler.Read(__msg, out missionResult);
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventBalloonDartTotalRewardOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestEventBalloonDartTotalRewardOK,
                    rmiName = RmiName_CG_RequestEventBalloonDartTotalRewardOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestEventBalloonDartTotalRewardOK(remote, rmiContext, eventBalloonDartInfo, getItemResultInfoList, missionResult))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventBalloonDartTotalRewardOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestEventBalloonDartTotalRewardOK,
                    rmiName = RmiName_CG_RequestEventBalloonDartTotalRewardOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestChatOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestChatOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestChatOK,
                    rmiName = RmiName_CG_RequestChatOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestChatOK(remote, rmiContext))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestChatOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestChatOK,
                    rmiName = RmiName_CG_RequestChatOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_CG_RequestChatChannelEnterOK(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            base.core.PostCheckReadMessage(__msg, RmiName_CG_RequestChatChannelEnterOK);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.CG_RequestChatChannelEnterOK,
                    rmiName = RmiName_CG_RequestChatChannelEnterOK,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.CG_RequestChatChannelEnterOK(remote, rmiContext))
                base.core.ShowNotImplementedRmiWarning(RmiName_CG_RequestChatChannelEnterOK);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.CG_RequestChatChannelEnterOK,
                    rmiName = RmiName_CG_RequestChatChannelEnterOK,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_GC_NotifyChat(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            ChatInfo chatInfo;
            CommonPacket.Marshaler.Read(__msg, out chatInfo);
            base.core.PostCheckReadMessage(__msg, RmiName_GC_NotifyChat);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.GC_NotifyChat,
                    rmiName = RmiName_GC_NotifyChat,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.GC_NotifyChat(remote, rmiContext, chatInfo))
                base.core.ShowNotImplementedRmiWarning(RmiName_GC_NotifyChat);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.GC_NotifyChat,
                    rmiName = RmiName_GC_NotifyChat,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_GC_NotifyChatLog(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            List<ChatInfo> chatInfoList;
            CommonPacket.Marshaler.Read(__msg, out chatInfoList);
            base.core.PostCheckReadMessage(__msg, RmiName_GC_NotifyChatLog);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.GC_NotifyChatLog,
                    rmiName = RmiName_GC_NotifyChatLog,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.GC_NotifyChatLog(remote, rmiContext, chatInfoList))
                base.core.ShowNotImplementedRmiWarning(RmiName_GC_NotifyChatLog);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.GC_NotifyChatLog,
                    rmiName = RmiName_GC_NotifyChatLog,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        private void ProcessReceivedMessage_GC_NotifyChatChannelEnter(Message __msg, ReceivedMessage pa, object hostTag, HostID remote)
        {
            RmiContext rmiContext = new RmiContext()
            {
                sentFrom = pa.RemoteHostID,
                relayed = pa.IsRelayed,
                hostTag = hostTag,
                encryptMode = pa.EncryptMode,
                compressMode = pa.CompressMode
            };
            int channelId;
            CommonPacket.Marshaler.Read(__msg, out channelId);
            base.core.PostCheckReadMessage(__msg, RmiName_GC_NotifyChatChannelEnter);
            if (this.enableStubProfiling)
            {
                BeforeRmiSummary beforeRmiSummary = new BeforeRmiSummary()
                {
                    rmiID = Common.GC_NotifyChatChannelEnter,
                    rmiName = RmiName_GC_NotifyChatChannelEnter,
                    hostID = remote,
                    hostTag = hostTag
                };
                this.BeforeRmiInvocation(beforeRmiSummary);
            }
            long timeMs = PreciseCurrentTime.GetTimeMs();
            if (!this.GC_NotifyChatChannelEnter(remote, rmiContext, channelId))
                base.core.ShowNotImplementedRmiWarning(RmiName_GC_NotifyChatChannelEnter);
            if (this.enableStubProfiling)
            {
                AfterRmiSummary afterRmiSummary = new AfterRmiSummary()
                {
                    rmiID = Common.GC_NotifyChatChannelEnter,
                    rmiName = RmiName_GC_NotifyChatChannelEnter,
                    hostID = remote,
                    hostTag = hostTag,
                    elapsedTime = PreciseCurrentTime.GetTimeMs() - timeMs
                };
                this.AfterRmiInvocation(afterRmiSummary);
            }
        }

        public override RmiID[] GetRmiIDList
        {
            get
            {
                return Common.RmiIDList;
            }
        }

        public RmiStub.AfterRmiInvocationDelegate AfterRmiInvocation = delegate (AfterRmiSummary summary)
        {
        };

        public RmiStub.BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate (BeforeRmiSummary summary)
        {
        };

        public Stub.CG_CommonCancelDelegate CG_CommonCancel = (HostID remote, RmiContext rmiContext, RmiID packetID, string packetName, PacketError error, InvalidRequestType invalidRequesttype, bool isSimpleMessageBox) => false;

        public Stub.GC_NotifyUserLevelUpDelegate GC_NotifyUserLevelUp = (HostID remote, RmiContext rmiContext, UserLevelUpResult levelUpResult, List<UserPackageMissionInfo> userPackageMissionInfoList) => false;

        public Stub.CG_FrozenAssetCancelDelegate CG_FrozenAssetCancel = (HostID remote, RmiContext rmiContext, RmiID packetID, string packetName, int frozenSEQ) => false;

        public Stub.CG_RequestChannelUserInfoOKDelegate CG_RequestChannelUserInfoOK = (HostID remote, RmiContext rmiContext, ChannelUserInfo channelUserInfo) => false;

        public Stub.CG_RequestHeartBeatOKDelegate CG_RequestHeartBeatOK = (HostID remote, RmiContext rmiContext, List<APInfo> apInfoList) => false;

        public Stub.CG_RequestChangeNicknameOKDelegate CG_RequestChangeNicknameOK = (HostID remote, RmiContext rmiContext, string nickname, int nicknameChangeCount, int changeAvailableDateRemainSec) => false;

        public Stub.CG_RequestChangeWantToSayOKDelegate CG_RequestChangeWantToSayOK = (HostID remote, RmiContext rmiContext, string wantToSay, MissionResult missionResult) => false;

        public Stub.CG_RequestTeamInfoOKDelegate CG_RequestTeamInfoOK = (HostID remote, RmiContext rmiContext, UserTeam userTeam) => false;

        public Stub.CG_RequestTeamSlotChangeOKDelegate CG_RequestTeamSlotChangeOK = (HostID remote, RmiContext rmiContext) => false;

        public Stub.CG_RequestTeamNameChangeOKDelegate CG_RequestTeamNameChangeOK = (HostID remote, RmiContext rmiContext) => false;

        public Stub.CG_RequestLobbyInfoOKDelegate CG_RequestLobbyInfoOK = (HostID remote, RmiContext rmiContext, LobbyInfo lobbyInfo, MissionResult missionResult, List<ItemResultInfo> remoteItemResultInfoList, PatrolInfo patrolInfo, LoginServiceInfo loginServiceInfo) => false;

        public Stub.CG_RequestBasePointInfoOKDelegate CG_RequestBasePointInfoOK = (HostID remote, RmiContext rmiContext, BasePointInfo basePointInfo, BasePointRefreshInfo basePointRefreshInfo, List<QuestProgressInfo> questProgressInfoList, List<ArenaRealTimePvpLastRankerStatueInfo> lastRankerStatueInfoList, PvpSeasonHistoryInfo pvpSeasonStatueInfo, int lowerLeagueTableID) => false;

        public Stub.CG_RequestChatStampUpdateBookmarkOKDelegate CG_RequestChatStampUpdateBookmarkOK = (HostID remote, RmiContext rmiContext) => false;

        public Stub.CG_RequestChatStampUpdateQuickMessageOKDelegate CG_RequestChatStampUpdateQuickMessageOK = (HostID remote, RmiContext rmiContext) => false;

        public Stub.CG_RequestMainSkinChangeOKDelegate CG_RequestMainSkinChangeOK = (HostID remote, RmiContext rmiContext, int targetSkinID) => false;

        public Stub.CG_RequestEventListOKDelegate CG_RequestEventListOK = (HostID remote, RmiContext rmiContext, EventPacketInfo eventPacketInfo) => false;

        public Stub.CG_RequestCheatEnterOKDelegate CG_RequestCheatEnterOK = (HostID remote, RmiContext rmiContext, CheatResult result) => false;

        public Stub.CG_RequestCheatStageClearOKDelegate CG_RequestCheatStageClearOK = (HostID remote, RmiContext rmiContext, StageClearResultInfo stageClearResultInfo) => false;

        public Stub.CG_RequestDllGetItemOKDelegate CG_RequestDllGetItemOK = (HostID remote, RmiContext rmiContext, List<ItemResultInfo> itemResultInfoList) => false;

        public Stub.CG_RequestRecommendFriendUSNListOKDelegate CG_RequestRecommendFriendUSNListOK = (HostID remote, RmiContext rmiContext, List<long> recommendFriendUSNList) => false;

        public Stub.CG_RequestDailyResetOKDelegate CG_RequestDailyResetOK = (HostID remote, RmiContext rmiContext, UserDailyReset dailyReset, int remainDailyResetTimeSEC, List<UserPackageMissionInfo> userPackageMissionInfoList, GambleTimeSwitchLobbyInfo gambleTimeSwitchLobbyInfo, bool isGuildBossInitialized) => false;

        public Stub.CG_NotifyMaintenanceDelegate CG_NotifyMaintenance = (HostID remote, RmiContext rmiContext, MaintenanceInfo maintenanceInfo) => false;

        public Stub.CG_RequestFrozenAssetRedeemOKDelegate CG_RequestFrozenAssetRedeemOK = (HostID remote, RmiContext rmiContext, int frozenSEQ, List<ItemResultInfo> useItemResultInfoList, PaybackEventResultInfo paybackEventresultInfo) => false;

        public Stub.CG_RequestDataTableReloadOKDelegate CG_RequestDataTableReloadOK = (HostID remote, RmiContext rmiContext, string result) => false;

        public Stub.CG_NotifyEmergencyNoticeDelegate CG_NotifyEmergencyNotice = (HostID remote, RmiContext rmiContext, EmergencyNoticeInfo emergencyNoticeInfo) => false;

        public Stub.CG_RequestRecommendHeroGrowthInfoOKDelegate CG_RequestRecommendHeroGrowthInfoOK = (HostID remote, RmiContext rmiContext, int heroId, RecommendHeroGrowthInfo recommendHeroGrowthInfo) => false;

        public Stub.CG_RequestServerVersionOKDelegate CG_RequestServerVersionOK = (HostID remote, RmiContext rmiContext, string serverVersionInfo) => false;

        public Stub.CG_RequestSkinOneStepEvolutionOKDelegate CG_RequestSkinOneStepEvolutionOK = (HostID remote, RmiContext rmiContext, SkinOneStepEvolutionResult skinOneStepEvolutionResult, ItemResultInfo useItemResultInfo) => false;

        public Stub.CG_RequestSecurityTokenOKDelegate CG_RequestSecurityTokenOK = (HostID remote, RmiContext rmiContext, string securityToken) => false;

        public Stub.CG_RequestNetmarbleAuthOKDelegate CG_RequestNetmarbleAuthOK = (HostID remote, RmiContext rmiContext, NetmarbleAccountInfo accountInfo) => false;

        public Stub.CG_RequestAuthenticateCreateOKDelegate CG_RequestAuthenticateCreateOK = (HostID remote, RmiContext rmiContext, NetmarbleAccountInfo accountInfo) => false;

        public Stub.CG_RequestEditorUserInfoByNickNameOKDelegate CG_RequestEditorUserInfoByNickNameOK = (HostID remote, RmiContext rmiContext, NetmarbleAccountInfo accountInfo) => false;

        public Stub.CG_RequestLoginOKDelegate CG_RequestLoginOK = (HostID remote, RmiContext rmiContext, LoginUserResultInfo userInfo, LoginServiceInfo loginServiceInfo) => false;

        public Stub.CG_RequestLoginInstantlyOKDelegate CG_RequestLoginInstantlyOK = (HostID remote, RmiContext rmiContext, UserDailyReset sendDailyReset, int sessionKey, LoginServiceInfo loginServiceInfo) => false;

        public Stub.CG_RequestForceLogoutOKDelegate CG_RequestForceLogoutOK = (HostID remote, RmiContext rmiContext, PacketError error) => false;

        public Stub.CG_RetryRequestOKDelegate CG_RetryRequestOK = (HostID remote, RmiContext rmiContext) => false;

        public Stub.CG_RequestAccountWithdrawOKDelegate CG_RequestAccountWithdrawOK = (HostID remote, RmiContext rmiContext) => false;

        public Stub.CG_RequestAccountWithdrawCancelOKDelegate CG_RequestAccountWithdrawCancelOK = (HostID remote, RmiContext rmiContext) => false;

        public Stub.GC_NotifyCookieDelegate GC_NotifyCookie = (HostID remote, RmiContext rmiContext, ByteArrayInfo cookie) => false;

        public Stub.CG_RequestCookieOKDelegate CG_RequestCookieOK = (HostID remote, RmiContext rmiContext) => false;

        public Stub.CG_RequestVerifySecurityCertValueOKDelegate CG_RequestVerifySecurityCertValueOK = (HostID remote, RmiContext rmiContext) => false;

        public Stub.GC_NotifySecurityDelegate GC_NotifySecurity = (HostID remote, RmiContext rmiContext, string securityToken) => false;

        public Stub.CG_RequestBillingInitializeOKDelegate CG_RequestBillingInitializeOK = (HostID remote, RmiContext rmiContext, BillingInitializeResultInfo initResultInfo) => false;

        public Stub.CG_RequestBillingVerifyPUOKDelegate CG_RequestBillingVerifyPUOK = (HostID remote, RmiContext rmiContext, BillingVerifyResultInfo verifyResultInfo, bool isDBError, List<UserPackageInfo> userPackageInfoList, List<ItemResultInfo> getItemResultInfoList, int shopMoneyID, bool isFirstBilling, bool isFirstVIP, List<UserDiaBuyEventInfo> userDiaBuyEventInfoList, List<ClientSeasonPassRankRewardInfo> seasonPassClientSendList, PacketError errorMsg, List<UserPackageMissionInfo> userPackageMissionInfoList, int firstDiaBuyItemID, UserBuffInfo userBuffInfo) => false;

        public Stub.CG_RequestBillingRemainTROKDelegate CG_RequestBillingRemainTROK = (HostID remote, RmiContext rmiContext, BillingRemainTRResultInfo remainTRResultInfo, List<UserPackageInfo> userPackageInfoList, List<ItemResultInfo> getItemResultInfoList, List<int> shopMoneyIDList, bool isFirstBilling, bool isFirstVIP, List<UserDiaBuyEventInfo> userDiaBuyEventInfoList, List<UserPackageMissionInfo> userPackageMissionInfoList, int firstDiaBuyItemID, UserBuffInfo userBuffInfo) => false;

        public Stub.CG_RequestBillingCouponVerifyOKDelegate CG_RequestBillingCouponVerifyOK = (HostID remote, RmiContext rmiContext, BillingVerifyResultInfo verifyResultInfo, string netmarble_reward_id) => false;

        public Stub.CG_RequestBillingCrossPromotionOKDelegate CG_RequestBillingCrossPromotionOK = (HostID remote, RmiContext rmiContext, BillingVerifyResultInfo verifyResultInfo) => false;

        public Stub.CG_RequestBillingPackageShopOKDelegate CG_RequestBillingPackageShopOK = (HostID remote, RmiContext rmiContext) => false;

        public Stub.CG_RequestAgeInputOKDelegate CG_RequestAgeInputOK = (HostID remote, RmiContext rmiContext, byte ageLevel) => false;

        public Stub.CG_Notify_WolverineOKDelegate CG_Notify_WolverineOK = (HostID remote, RmiContext rmiContext, PacketError dbError, bool rePayFlag, ItemResultInfo buyDiaItemResultInfo) => false;

        public Stub.CG_RequestSDKInfoChangeOKDelegate CG_RequestSDKInfoChangeOK = (HostID remote, RmiContext rmiContext) => false;

        public Stub.CG_RequestPCBillingInitializeOKDelegate CG_RequestPCBillingInitializeOK = (HostID remote, RmiContext rmiContext, BillingInitializeResultInfo initResultInfo) => false;

        public Stub.CG_RequestPCBillingRemainItemsOKDelegate CG_RequestPCBillingRemainItemsOK = (HostID remote, RmiContext rmiContext, List<UserPackageInfo> userPackageInfoList, List<ItemResultInfo> getItemResultInfoList, int shopMoneyID, bool isFirstBilling, bool isFirstVIP, List<UserDiaBuyEventInfo> userDiaBuyEventInfoList, List<ClientSeasonPassRankRewardInfo> seasonPassClientSendList, PacketError errorMsg, List<UserPackageMissionInfo> userPackageMissionInfoList, int firstDiaBuyItemID, UserBuffInfo userBuffInfo) => false;

        public Stub.CG_RequestSkinLevelUpBySkinMaterialOKDelegate CG_RequestSkinLevelUpBySkinMaterialOK = (HostID remote, RmiContext rmiContext, UserSkin targetSkin, List<NeedItemInfo> skinMaterialIDList, List<ItemResultInfo> itemResultInfoList, List<SuccessInfo> successInfoList, MissionResult missionResult, List<QuestProgressInfo> questProgressInfoList, PaybackEventResultInfo paybackEventresultInfo, List<UserPackageMissionInfo> userPackageMissionInfoList) => false;

        public Stub.CG_RequestSkinResearchOKDelegate CG_RequestSkinResearchOK = (HostID remote, RmiContext rmiContext, UserSkin targetSkin, int researchID, List<ItemResultInfo> itemResultInfoList, PaybackEventResultInfo paybackEventresultInfo) => false;

        public Stub.CG_RequestSkinResearchInitOKDelegate CG_RequestSkinResearchInitOK = (HostID remote, RmiContext rmiContext, UserSkin targetSkin, List<ItemResultInfo> useItemResultInfoList, PaybackEventResultInfo paybackEventresultInfo) => false;

        public Stub.CG_RequestSkinMaterialGrindOKDelegate CG_RequestSkinMaterialGrindOK = (HostID remote, RmiContext rmiContext, List<ItemResultInfo> itemResultInfoList, MissionResult missionResult) => false;

        public Stub.CG_RequestSkinAwakenOKDelegate CG_RequestSkinAwakenOK = (HostID remote, RmiContext rmiContext, UserSkin targetSkin, List<ItemResultInfo> itemResultInfoList, MissionResult missionResult, List<QuestProgressInfo> questProgressInfoList, PaybackEventResultInfo paybackEventresultInfo, List<UserPackageMissionInfo> userPackageMissionInfoList, int growthPoint) => false;

        public Stub.CG_RequestSkinHeadStyleChangeOKDelegate CG_RequestSkinHeadStyleChangeOK = (HostID remote, RmiContext rmiContext, UserSkin targetSkin) => false;

        public Stub.CG_RequestSkinEvolutionOKDelegate CG_RequestSkinEvolutionOK = (HostID remote, RmiContext rmiContext, SkinEvolutionResult evolutionResult, bool isFirstEvolution, bool isFirstURGet, PaybackEventResultInfo paybackEventresultInfo, List<UserPackageMissionInfo> userPackageMissionInfoList) => false;

        public Stub.CG_RequestSkinSkillLevelUpOKDelegate CG_RequestSkinSkillLevelUpOK = (HostID remote, RmiContext rmiContext, SkinSkillLevelUpResult skillLevelUpResult, PaybackEventResultInfo paybackEventresultInfo, int growthPoint) => false;

        public Stub.CG_RequestSkinGiveFellowshipExpOKDelegate CG_RequestSkinGiveFellowshipExpOK = (HostID remote, RmiContext rmiContext, SkinGiveFellowResult fellowResult, UserADViewInfo updateUserADViewInfo) => false;

        public Stub.CG_RequestSkinFellowshipLevelUpRewardOKDelegate CG_RequestSkinFellowshipLevelUpRewardOK = (HostID remote, RmiContext rmiContext, byte lastRewardIndex, ItemResultInfo getItemResultInfo, MissionResult missionResult) => false;

        public Stub.CG_RequestCostumeEquipOKDelegate CG_RequestCostumeEquipOK = (HostID remote, RmiContext rmiContext, UserSkin userSkin) => false;

        public Stub.CG_RequestCostumeUnEquipOKDelegate CG_RequestCostumeUnEquipOK = (HostID remote, RmiContext rmiContext, UserSkin userSkin) => false;

        public Stub.CG_RequestCostumeUnLockOKDelegate CG_RequestCostumeUnLockOK = (HostID remote, RmiContext rmiContext, List<ItemResultInfo> itemResultInfoList, List<UserSkin> updateSkinList, List<UserSkin> equipSkinList, MissionResult missionResult) => false;

        public Stub.CG_RequestSkinOverEvolutionOKDelegate CG_RequestSkinOverEvolutionOK = (HostID remote, RmiContext rmiContext, SkinEvolutionBreakResult evolutionBreakResult, PaybackEventResultInfo paybackEventresultInfo, int growthPoint) => false;

        public Stub.CG_RequestSkinMaxAwakenRewardOKDelegate CG_RequestSkinMaxAwakenRewardOK = (HostID remote, RmiContext rmiContext, UserSkin userSkin, List<ItemResultInfo> itemResultInfoList) => false;

        public Stub.CG_RequestCostumeRegisterOKDelegate CG_RequestCostumeRegisterOK = (HostID remote, RmiContext rmiContext, UserSkin userSkin) => false;

        public Stub.CG_RequestSkinLoveRewardOKDelegate CG_RequestSkinLoveRewardOK = (HostID remote, RmiContext rmiContext, ItemResultInfo rewardItemInfo, byte rewardSeq, MissionResult missionResult) => false;

        public Stub.CG_RequestCostumeAutoRegisterOKDelegate CG_RequestCostumeAutoRegisterOK = (HostID remote, RmiContext rmiContext, List<UserSkin> userSkinList) => false;

        public Stub.CG_RequestStoryCostumeOKDelegate CG_RequestStoryCostumeOK = (HostID remote, RmiContext rmiContext, List<ItemResultInfo> getItemResultInfoList, List<UserCommonItem> userStoryCostumeItemList) => false;

        public Stub.CG_RequestCostumeLevelUpOKDelegate CG_RequestCostumeLevelUpOK = (HostID remote, RmiContext rmiContext, CostumeResultInfo costumeResultInfo, List<ItemResultInfo> useItemResultInfoList, MissionResult missionResult, List<QuestProgressInfo> questProgressInfoList, PaybackEventResultInfo paybackEventresultInfo, List<UserPlayCountEventInfo> userPlayCountEventInfoList, List<UserPackageMissionInfo> userPackageMissionInfoList, int afterGrowthPoint) => false;

        public Stub.CG_RequestSkinMaxAwakenOKDelegate CG_RequestSkinMaxAwakenOK = (HostID remote, RmiContext rmiContext, UserSkin targetSkin, List<ItemResultInfo> itemResultInfoList, MissionResult missionResult, List<QuestProgressInfo> questProgressInfoList, List<UserPackageMissionInfo> userPackageMissionInfoList, int growthPoint) => false;

        public Stub.CG_RequestBattlePointRegisterOKDelegate CG_RequestBattlePointRegisterOK = (HostID remote, RmiContext rmiContext, int battlePoint, MissionResult missionResult, List<UserPackageMissionInfo> userPackageMissionInfoList) => false;

        public Stub.CG_RequestSkinTranscendOKDelegate CG_RequestSkinTranscendOK = (HostID remote, RmiContext rmiContext, UserSkin targetSkin, List<ItemResultInfo> itemResultInfoList, PaybackEventResultInfo paybackEventresultInfo, int growthPoint, MissionResult missionResult, List<QuestProgressInfo> questProgressInfoList) => false;

        public Stub.CG_RequestSkinTranscendResetOKDelegate CG_RequestSkinTranscendResetOK = (HostID remote, RmiContext rmiContext, UserSkin targetSkin, List<ItemResultInfo> itemResultInfoList, PaybackEventResultInfo paybackEventresultInfo) => false;

        public Stub.CG_RequestCostumeCraftOKDelegate CG_RequestCostumeCraftOK = (HostID remote, RmiContext rmiContext, List<ItemResultInfo> useItemResultInfoList, ItemResultInfo getImteResultInfo, MissionResult missionResult, PaybackEventResultInfo paybackEventresultInfo) => false;

        public Stub.CG_RequestLimitedCostumeCheckOKDelegate CG_RequestLimitedCostumeCheckOK = (HostID remote, RmiContext rmiContext, LimitedCostumeInfo removeLimitedCostumeInfo) => false;

        public Stub.CG_RequestGetExclusiveSkillOKDelegate CG_RequestGetExclusiveSkillOK = (HostID remote, RmiContext rmiContext, UserSkin userSkin) => false;

        public Stub.CG_RequestSkinOverEvolutionStraightOKDelegate CG_RequestSkinOverEvolutionStraightOK = (HostID remote, RmiContext rmiContext, SkinEvolutionBreakResult evolutionBreakResult, PaybackEventResultInfo paybackEventresultInfo, int growthPoint) => false;

        public Stub.CG_RequestSkinLegendEvolutionOKDelegate CG_RequestSkinLegendEvolutionOK = (HostID remote, RmiContext rmiContext, SkinEvolutionResult evolutionResult, PaybackEventResultInfo paybackEventresultInfo, int growthPoint) => false;

        public Stub.CG_RequestCostumeCraftUpgradeOKDelegate CG_RequestCostumeCraftUpgradeOK = (HostID remote, RmiContext rmiContext, UserCostumeCraftUpgradeInfo userCostumeCraftUpgradeInfo, List<ItemResultInfo> useItemResultInfoList, PaybackEventResultInfo paybackEventresultInfo) => false;

        public Stub.CG_RequestSkinLevelupBonusOKDelegate CG_RequestSkinLevelupBonusOK = (HostID remote, RmiContext rmiContext, UserSkin targetSkin, ItemResultInfo rewardItemResultInfo, MissionResult missionResult) => false;

        public Stub.CG_RequestSkinExceedOKDelegate CG_RequestSkinExceedOK = (HostID remote, RmiContext rmiContext, UserSkin targetSkin, List<ItemResultInfo> useItemResultInfoList, int growthPoint, MissionResult missionResult) => false;

        public Stub.CG_RequestMailListOKDelegate CG_RequestMailListOK = (HostID remote, RmiContext rmiContext, List<MailInfo> mailList, List<NoticeMailInfo> noticeMailInfoList, List<NoticeMailInfo> refoundMailInfoList, List<NoticeMailInfo> systemMailInfoList) => false;

        public Stub.CG_RequestMailConfirmOKDelegate CG_RequestMailConfirmOK = (HostID remote, RmiContext rmiContext, int mailSN, MailHistoryInfo mailHistoryInfo, ItemResultInfo itemResultInfo, ApRewardInfo apRewardInfo, MissionResult missionResult) => false;

        public Stub.CG_RequestMailConfirmAllOKDelegate CG_RequestMailConfirmAllOK = (HostID remote, RmiContext rmiContext, List<int> mailSNList, List<ItemResultInfo> itemResultInfoList, List<ApRewardInfo> apRewardInfoList, MissionResult missionResult) => false;

        public Stub.CG_RequestMailHistoryListOKDelegate CG_RequestMailHistoryListOK = (HostID remote, RmiContext rmiContext, List<MailHistoryInfo> mailHistoryList) => false;

        public Stub.CG_RequestMailRecentlyHistoryListOKDelegate CG_RequestMailRecentlyHistoryListOK = (HostID remote, RmiContext rmiContext, List<MailHistoryInfo> mailHistoryList) => false;

        public Stub.CG_RequestFriendMailListOKDelegate CG_RequestFriendMailListOK = (HostID remote, RmiContext rmiContext, List<MailInfo> mailList) => false;

        public Stub.CG_RequestFriendMailConfirmOKDelegate CG_RequestFriendMailConfirmOK = (HostID remote, RmiContext rmiContext, int mailSN, ItemResultInfo itemResultInfo) => false;

        public Stub.CG_RequestFriendMailConfirmAllOKDelegate CG_RequestFriendMailConfirmAllOK = (HostID remote, RmiContext rmiContext, List<int> confirmMailSNList, ItemResultInfo itemResultInfo) => false;

        public Stub.CG_RequestNoticeMailRewardOKDelegate CG_RequestNoticeMailRewardOK = (HostID remote, RmiContext rmiContext, int noticeMailSEQ, List<ItemResultInfo> getItemResultInfoList, List<ApRewardInfo> apRewardInfoList, NoticeMailType noticeMailType) => false;

        public Stub.CG_RequestPackageMailListOKDelegate CG_RequestPackageMailListOK = (HostID remote, RmiContext rmiContext, List<PackageMailInfo> packageMailInfoList) => false;

        public Stub.CG_RequestPackageMailGetOKDelegate CG_RequestPackageMailGetOK = (HostID remote, RmiContext rmiContext, int mailSerial, int packageID, List<ItemResultInfo> getItemResultInfoList, List<ApRewardInfo> apRewardInfoList, MissionResult missionResult, List<UpgradeUserSkin> upgradeSkinResultInfoList) => false;

        public Stub.CG_RequestPackageMailHistoryListOKDelegate CG_RequestPackageMailHistoryListOK = (HostID remote, RmiContext rmiContext, List<PackageMailHistoryInfo> packageMailHistoryInfoList) => false;

        public Stub.CG_RequestLevelUpPackageRewardOKDelegate CG_RequestLevelUpPackageRewardOK = (HostID remote, RmiContext rmiContext, UserPackageInfo packageInfo, List<ItemResultInfo> getItemInfoList, List<ApRewardInfo> apRewardInfoList) => false;

        public Stub.CG_RequestLevelUpPackageRewardAllOKDelegate CG_RequestLevelUpPackageRewardAllOK = (HostID remote, RmiContext rmiContext, UserPackageInfo packageInfo, List<ItemResultInfo> getItemInfoList, List<ApRewardInfo> apRewardInfoList) => false;

        public Stub.CG_RequestAttendancePackageRewardOKDelegate CG_RequestAttendancePackageRewardOK = (HostID remote, RmiContext rmiContext, UserPackageInfo packageInfo, List<ItemResultInfo> getItemInfoList, List<ApRewardInfo> apRewardInfoList) => false;

        public Stub.CG_RequestAttendancePackageRewardAllOKDelegate CG_RequestAttendancePackageRewardAllOK = (HostID remote, RmiContext rmiContext, UserPackageInfo packageInfo, List<ItemResultInfo> getItemInfoList, List<ApRewardInfo> apRewardInfoList) => false;

        public Stub.CG_RequestMailADRewardOKDelegate CG_RequestMailADRewardOK = (HostID remote, RmiContext rmiContext, List<ItemResultInfo> getItemResultInfoList, MissionResult missionResult, UserADViewInfo updateUserADViewInfo) => false;

        public Stub.CG_RequestMissionProgressOKDelegate CG_RequestMissionProgressOK = (HostID remote, RmiContext rmiContext, MissionResult missionResult) => false;

        public Stub.CG_RequestMissionClearOKDelegate CG_RequestMissionClearOK = (HostID remote, RmiContext rmiContext, MissionClearResultInfo missionClearResultInfo) => false;

        public Stub.CG_RequestMissionEventClearOKDelegate CG_RequestMissionEventClearOK = (HostID remote, RmiContext rmiContext, MissionClearResultInfo missionClearResultInfo, List<EventMissionClearRequestInfo> missionClearList, List<UpgradeUserSkin> upgradeSkinResultInfoList) => false;

        public Stub.CG_RequestMissionGetAchievePointRewardOKDelegate CG_RequestMissionGetAchievePointRewardOK = (HostID remote, RmiContext rmiContext, short rewardOrder, ItemResultInfo achievePointItemInfo, ItemResultInfo rewardItemInfo, MissionResult missionResult) => false;

        public Stub.CG_RequestQuestStartOKDelegate CG_RequestQuestStartOK = (HostID remote, RmiContext rmiContext, QuestProgressInfo startedQuestProgressInfo, ItemResultInfo questItemInfo, List<QuestProgressInfo> questProgressInfoList) => false;

        public Stub.CG_RequestQuestProgressOKDelegate CG_RequestQuestProgressOK = (HostID remote, RmiContext rmiContext, QuestProgressInfo progressInfo, List<ItemResultInfo> getItemInfoList, MissionResult missionResult) => false;

        public Stub.CG_RequestQuestClearOKDelegate CG_RequestQuestClearOK = (HostID remote, RmiContext rmiContext, QuestClearResultInfo clearResultInfo, List<UserPackageMissionInfo> userPackageMissionInfoList) => false;

        public Stub.CG_RequestQuestRemoveOKDelegate CG_RequestQuestRemoveOK = (HostID remote, RmiContext rmiContext, int removedQuestID, ItemResultInfo removeItemResultInfo, BasePointInfo basepointInfo) => false;

        public Stub.CG_RequestDirectSelectorRewardOKDelegate CG_RequestDirectSelectorRewardOK = (HostID remote, RmiContext rmiContext, int id, int heroID, int getFellowshipExp, int totalFellowshipExp, ItemResultInfo resultItemInfo) => false;

        public Stub.CG_RequestQuestChapterClearOKDelegate CG_RequestQuestChapterClearOK = (HostID remote, RmiContext rmiContext, QuestChapterClearInfo resultChapterClearInfo, List<ItemResultInfo> rewardItemInfoList, MissionResult missionResult) => false;

        public Stub.CG_RequestEventQuestClearOKDelegate CG_RequestEventQuestClearOK = (HostID remote, RmiContext rmiContext, EventQuestClearResultInfo clearResultInfo) => false;

        public Stub.CG_RequestAnotherQuestClearOKDelegate CG_RequestAnotherQuestClearOK = (HostID remote, RmiContext rmiContext, AnotherQuestClearResultInfo clearResultInfo) => false;

        public Stub.CG_RequestNorthQuestClearOKDelegate CG_RequestNorthQuestClearOK = (HostID remote, RmiContext rmiContext, NorthQuestClearResultInfo clearResultInfo) => false;

        public Stub.CG_RequestQuestGuideListAllClearRewardOKDelegate CG_RequestQuestGuideListAllClearRewardOK = (HostID remote, RmiContext rmiContext, ItemResultInfo rewardItemInfo, MissionResult missionResult) => false;

        public Stub.CG_RequestQuestGuideListStepStartOKDelegate CG_RequestQuestGuideListStepStartOK = (HostID remote, RmiContext rmiContext, bool isGuideListRewarded, short guideListStep, List<QuestProgressInfo> questProgressInfoList) => false;

        public Stub.CG_RequestQuestGuideListStepClearOKDelegate CG_RequestQuestGuideListStepClearOK = (HostID remote, RmiContext rmiContext, bool isGuideListRewarded, List<ItemResultInfo> rewardItemInfoList, MissionResult missionResult, List<UpgradeUserSkin> upgradeSkinResultInfoList) => false;

        public Stub.CG_RequestDisasterQuestClearOKDelegate CG_RequestDisasterQuestClearOK = (HostID remote, RmiContext rmiContext, DisasterQuestClearResultInfo clearResultInfo) => false;

        public Stub.CG_RequestLobbyVRSearchOKDelegate CG_RequestLobbyVRSearchOK = (HostID remote, RmiContext rmiContext, int interactiveVRID, ItemResultInfo itemResultinfoList) => false;

        public Stub.CG_RequestLobbyVRHelbramOKDelegate CG_RequestLobbyVRHelbramOK = (HostID remote, RmiContext rmiContext, ApRewardInfo apUpdateInfo, byte lobbyHelbramDailyCount) => false;

        public Stub.CG_RequestLobbyNpcSkinOKDelegate CG_RequestLobbyNpcSkinOK = (HostID remote, RmiContext rmiContext, UserNpc userNpcInfo, MissionResult missionResult) => false;

        public Stub.CG_RequestLobbyNpcGiftOKDelegate CG_RequestLobbyNpcGiftOK = (HostID remote, RmiContext rmiContext, NpcGiftResult giftResult) => false;

        public Stub.CG_RequestLobbyKingAmberOKDelegate CG_RequestLobbyKingAmberOK = (HostID remote, RmiContext rmiContext, ItemResultInfo useItemResultInfo, ItemResultInfo itemResultInfo, MissionResult missionResult, List<QuestProgressInfo> questProgressInfoList) => false;

        public Stub.CG_RequestLobbyDropInteractiveOpenOKDelegate CG_RequestLobbyDropInteractiveOpenOK = (HostID remote, RmiContext rmiContext, int npcID, List<ItemResultInfo> getItemResultInfoList, MissionResult missionResult) => false;

        public Stub.CG_RequestLobbyUniqueInteractiveOpenOKDelegate CG_RequestLobbyUniqueInteractiveOpenOK = (HostID remote, RmiContext rmiContext, int npcID, ItemResultInfo getItemResultInfo, MissionResult missionResult) => false;

        public Stub.CG_RequestLobbyNpcTalkInfoOKDelegate CG_RequestLobbyNpcTalkInfoOK = (HostID remote, RmiContext rmiContext, int guestID, int interactiveQuestionID, MissionResult missionResult) => false;

        public Stub.CG_RequestLobbyNpcTalkChoiceOKDelegate CG_RequestLobbyNpcTalkChoiceOK = (HostID remote, RmiContext rmiContext, NpcTalkResult talkResult) => false;

        public Stub.CG_RequestLobbyBarrelOKDelegate CG_RequestLobbyBarrelOK = (HostID remote, RmiContext rmiContext, byte barrelCount, byte barrelFellowCount, List<ItemResultInfo> getItemResultInfoList, UserNpcResult npcResult, MissionResult missionResult) => false;

        public Stub.CG_RequestLobbyBarrelRefillOKDelegate CG_RequestLobbyBarrelRefillOK = (HostID remote, RmiContext rmiContext, byte barrelCount, ItemResultInfo useItemResultInfo) => false;

        public Stub.CG_RequestLobbyCleanTableOKDelegate CG_RequestLobbyCleanTableOK = (HostID remote, RmiContext rmiContext, byte dailyCleanCount, ItemResultInfo getItemInfo, UserNpcResult npcResult, MissionResult missionResult) => false;

        public Stub.CG_RequestLobbyServeBeerOKDelegate CG_RequestLobbyServeBeerOK = (HostID remote, RmiContext rmiContext, byte dailyServeCount, ItemResultInfo getItemInfo, UserNpcResult npcResult, MissionResult missionResult) => false;

        public Stub.CG_RequestLobbyPlayJukeboxOKDelegate CG_RequestLobbyPlayJukeboxOK = (HostID remote, RmiContext rmiContext, byte dailyPlayCount, ItemResultInfo getItemInfo, UserNpcResult npcResult, MissionResult missionResult, int playMusicID, byte musicInstrument) => false;

        public Stub.CG_RequestLobbyElizabethTouchOKDelegate CG_RequestLobbyElizabethTouchOK = (HostID remote, RmiContext rmiContext, byte dailyTouchCount, ItemResultInfo getItemInfo, UserNpcResult npcResult, MissionResult missionResult) => false;

        public Stub.CG_RequestLobbyHawkAngerOKDelegate CG_RequestLobbyHawkAngerOK = (HostID remote, RmiContext rmiContext, byte dailyAngerCount, UserNpcResult npcResult) => false;

        public Stub.CG_RequestAttendanceRewardOKDelegate CG_RequestAttendanceRewardOK = (HostID remote, RmiContext rmiContext, AttendanceResult attendanceResult, List<UserPackageMissionInfo> userPackageMissionInfoList) => false;

        public Stub.CG_RequestAttendanceEventRewardOKDelegate CG_RequestAttendanceEventRewardOK = (HostID remote, RmiContext rmiContext, EventAttendanceResult eventAttendanceResult) => false;

        public Stub.CG_RequestCookingStartOKDelegate CG_RequestCookingStartOK = (HostID remote, RmiContext rmiContext, CookingResult cookingResult) => false;

        public Stub.CG_RequestRecipeActiveOKDelegate CG_RequestRecipeActiveOK = (HostID remote, RmiContext rmiContext, UserRecipeInfo userRecipeInfo, ItemResultInfo useItemResultInfo, MissionResult missionResult, List<QuestProgressInfo> questProgressInfoList) => false;

        public Stub.CG_RequestCookingRecipeOrderInfoOKDelegate CG_RequestCookingRecipeOrderInfoOK = (HostID remote, RmiContext rmiContext, List<RecipeOrderInfo> recipeOrderInfoList) => false;

        public Stub.CG_RequestCookingRecipeOrderOKDelegate CG_RequestCookingRecipeOrderOK = (HostID remote, RmiContext rmiContext, RecipeOrderInfo recipeOrderInfo, MissionResult missionResult, List<QuestProgressInfo> questProgressInfoList) => false;

        public Stub.CG_RequestCookingRecipeDisorderOKDelegate CG_RequestCookingRecipeDisorderOK = (HostID remote, RmiContext rmiContext, byte SlotIndex) => false;

        public Stub.CG_RequestCookingRecipeCollectOKDelegate CG_RequestCookingRecipeCollectOK = (HostID remote, RmiContext rmiContext, LobbyCollectResult collectResult) => false;

        public Stub.CG_RequestCookingRecipeCollectOneSlotOKDelegate CG_RequestCookingRecipeCollectOneSlotOK = (HostID remote, RmiContext rmiContext, RecipeOrderInfo recipeOrderInfo, LobbyCollectResult collectResult) => false;

        public Stub.CG_RequestCookingUseCookingBuffOKDelegate CG_RequestCookingUseCookingBuffOK = (HostID remote, RmiContext rmiContext, FoodBuffInfo foodBuffInfo, ItemResultInfo itemResultInfo, MissionResult missionResult, List<QuestProgressInfo> questProgressInfoList) => false;

        public Stub.CG_RequestGuestInfoOKDelegate CG_RequestGuestInfoOK = (HostID remote, RmiContext rmiContext, LobbyGuestInfo lobbyGuestInfo, UserNpc currentNpcInfo) => false;

        public Stub.CG_RequestGuestChangeOKDelegate CG_RequestGuestChangeOK = (HostID remote, RmiContext rmiContext, int guestSlotIndex, List<int> guestHeroList, List<ItemResultInfo> useItemResultInfoList, PaybackEventResultInfo paybackEventResultInfo) => false;

        public Stub.CG_RequestGuestChangeTargetOKDelegate CG_RequestGuestChangeTargetOK = (HostID remote, RmiContext rmiContext, int guestSlotIndex, int GuestID, byte inviteSpecialGuestCount, List<ItemResultInfo> useItemResultInfoList, PaybackEventResultInfo paybackEventResultInfo) => false;

        public Stub.CG_RequestGuestTalkOKDelegate CG_RequestGuestTalkOK = (HostID remote, RmiContext rmiContext, NpcTalkResult talkResult) => false;

        public Stub.CG_RequestGuestGiftOKDelegate CG_RequestGuestGiftOK = (HostID remote, RmiContext rmiContext, NpcGiftResult giftResult) => false;

        public Stub.CG_RequestBirthdayNpcInfoOKDelegate CG_RequestBirthdayNpcInfoOK = (HostID remote, RmiContext rmiContext, UserNpc userNpcInfo) => false;

        public Stub.CG_RequestRestRewardOKDelegate CG_RequestRestRewardOK = (HostID remote, RmiContext rmiContext, ItemResultInfo useItemResultInfo) => false;

        public Stub.CG_RequestAttendanceFortuneEventRewardOKDelegate CG_RequestAttendanceFortuneEventRewardOK = (HostID remote, RmiContext rmiContext, short rewardIndex, EventAttendanceResult eventAttendanceResult) => false;

        public Stub.CG_RequestEventCookingStartOKDelegate CG_RequestEventCookingStartOK = (HostID remote, RmiContext rmiContext, EventCookingResult cookingResult) => false;

        public Stub.CG_RequestEventRecipeActiveOKDelegate CG_RequestEventRecipeActiveOK = (HostID remote, RmiContext rmiContext, UserEventRecipeInfo eventRecipeInfo) => false;

        public Stub.CG_RequestLobbySetVisualTypeOKDelegate CG_RequestLobbySetVisualTypeOK = (HostID remote, RmiContext rmiContext, LobbyVisualType lobbyVisualType) => false;

        public Stub.CG_RequestLobbySetAttendanceHeroOKDelegate CG_RequestLobbySetAttendanceHeroOK = (HostID remote, RmiContext rmiContext, int attendanceHeroID, int activeAttendanceHeroID) => false;

        public Stub.CG_RequestBasePointGoldDonationOKDelegate CG_RequestBasePointGoldDonationOK = (HostID remote, RmiContext rmiContext, BasePointInfo basePointInfo, ItemResultInfo goldResultInfo, List<ItemResultInfo> rewardResultInfoList, UserBuffInfo userBuffInfo, MissionResult missionResult, List<QuestProgressInfo> questProgressInfoList, PaybackEventResultInfo paybackEventresultInfo) => false;

        public Stub.CG_RequestBasePointSetTriggerOKDelegate CG_RequestBasePointSetTriggerOK = (HostID remote, RmiContext rmiContext, int triggerID, MissionResult missionResult) => false;

        public Stub.CG_RequestBasePointDropInteractiveOpenOKDelegate CG_RequestBasePointDropInteractiveOpenOK = (HostID remote, RmiContext rmiContext, int npcID, List<ItemResultInfo> getItemResultInfoList, MissionResult missionResult) => false;

        public Stub.CG_RequestBasePointUniqueInteractiveOpenOKDelegate CG_RequestBasePointUniqueInteractiveOpenOK = (HostID remote, RmiContext rmiContext, int npcID, ItemResultInfo getItemResultInfo, MissionResult missionResult) => false;

        public Stub.CG_RequestBasePointDailyRewardOKDelegate CG_RequestBasePointDailyRewardOK = (HostID remote, RmiContext rmiContext, int basepointAreaIndex, int basepointDailyRewardValue, List<ItemResultInfo> getItemResultInfoList) => false;

        public Stub.CG_RequestBasePointDonationEventRewardOKDelegate CG_RequestBasePointDonationEventRewardOK = (HostID remote, RmiContext rmiContext, List<ItemResultInfo> rewardItemInfoList, UserDonationEventInfo donationEventInfo, MissionResult missionResult) => false;

        public Stub.CG_RequestBasePointDonationInfoOKDelegate CG_RequestBasePointDonationInfoOK = (HostID remote, RmiContext rmiContext, int basepointID, int overDonationValue, UserDonationEventInfo userDonationEventInfo) => false;

        public Stub.CG_RequestBasePointEventGoldDonationOKDelegate CG_RequestBasePointEventGoldDonationOK = (HostID remote, RmiContext rmiContext, BasePointInfo basePointInfo, ItemResultInfo goldResultInfo, List<ItemResultInfo> rewardResultInfoList, UserBuffInfo userBuffInfo, UserDonationEventInfo donationEventInfo, MissionResult missionResult, List<QuestProgressInfo> questProgressInfoList, PaybackEventResultInfo paybackEventresultInfo) => false;

        public Stub.CG_RequestEventBasepointInfoOKDelegate CG_RequestEventBasepointInfoOK = (HostID remote, RmiContext rmiContext, EventBasepointInfo eventBasepointInfo, BasePointRefreshInfo basePointRefreshInfo, List<QuestProgressInfo> questProgressInfoList) => false;

        public Stub.GC_NotifyDestroyInviteDelegate GC_NotifyDestroyInvite = (HostID remote, RmiContext rmiContext, UserProfileInfo hostInfo, DestroyClientSendRoomInfo invitedRoomInfo) => false;

        public Stub.CG_RequestDestroySetInviteOptionOKDelegate CG_RequestDestroySetInviteOptionOK = (HostID remote, RmiContext rmiContext, DestroyInviteOption option) => false;

        public Stub.CG_RequestDestroyGetUserLoginListOKDelegate CG_RequestDestroyGetUserLoginListOK = (HostID remote, RmiContext rmiContext, List<DestroyUserProfileInfo> userProfileInfoList) => false;

        public Stub.CG_RequestDestroyGetFriendLoginListOKDelegate CG_RequestDestroyGetFriendLoginListOK = (HostID remote, RmiContext rmiContext, List<DestroyUserProfileInfo> friendProfileInfoList) => false;

        public Stub.CG_RequestDestroyGetGuildLoginListOKDelegate CG_RequestDestroyGetGuildLoginListOK = (HostID remote, RmiContext rmiContext, List<DestroyUserProfileInfo> guildMemberProfileInfoList) => false;

        public Stub.CG_RequestDestroyGetReceivedInvitationListOKDelegate CG_RequestDestroyGetReceivedInvitationListOK = (HostID remote, RmiContext rmiContext, List<DestroyClientSendRoomInfo> invitedRoomInfoList) => false;

        public Stub.CG_RequestDestroyInviteOKDelegate CG_RequestDestroyInviteOK = (HostID remote, RmiContext rmiContext, List<long> invitedUSNList) => false;

        public Stub.CG_RequestDestroyRemoveInvitationOKDelegate CG_RequestDestroyRemoveInvitationOK = (HostID remote, RmiContext rmiContext, int roomSN) => false;

        public Stub.CG_RequestDestroyRemoveJoinInfoOKDelegate CG_RequestDestroyRemoveJoinInfoOK = (HostID remote, RmiContext rmiContext) => false;

        public Stub.CG_RequestDestroyCreateOKDelegate CG_RequestDestroyCreateOK = (HostID remote, RmiContext rmiContext, DestroyCreateResult createResult, byte multiBossCount, List<int> stageIdList) => false;

        public Stub.CG_RequestDestroyStartOKDelegate CG_RequestDestroyStartOK = (HostID remote, RmiContext rmiContext) => false;

        public Stub.CG_RequestDestroyBattleStartOKDelegate CG_RequestDestroyBattleStartOK = (HostID remote, RmiContext rmiContext, DestroyBattleStartResult battleStartResult, PaybackEventResultInfo paybackEventresultInfo) => false;

        public Stub.CG_RequestDestroyJoinOKDelegate CG_RequestDestroyJoinOK = (HostID remote, RmiContext rmiContext, DestroyJoinResult joinResult, byte multiBossCount) => false;

        public Stub.CG_RequestDestroyClearOKDelegate CG_RequestDestroyClearOK = (HostID remote, RmiContext rmiContext, List<DestroyClearResult> clearResultList, List<UserPackageMissionInfo> userPackageMissionInfoList) => false;

        public Stub.CG_RequestDestroyReJoinOKDelegate CG_RequestDestroyReJoinOK = (HostID remote, RmiContext rmiContext, DestroyReJoinResult joinResult, byte multiBossCount) => false;

        public Stub.CG_RequestDestroyRemoveOKDelegate CG_RequestDestroyRemoveOK = (HostID remote, RmiContext rmiContext, DestroyDiscoverInfo destroyDiscoverInfo, ItemResultInfo rewardItemInfo, MissionResult missionResult) => false;

        public Stub.CG_RequestDestroyBattleEndOKDelegate CG_RequestDestroyBattleEndOK = (HostID remote, RmiContext rmiContext, MissionResult missionResult, List<UserPackageMissionInfo> userPackageMissionInfoList) => false;

        public Stub.CG_RequestDestroyInviteAIOKDelegate CG_RequestDestroyInviteAIOK = (HostID remote, RmiContext rmiContext, OtherPlayerTeamInfo otherPlayerTeamInfo, DestroyUserProfileInfo destroyUserProfileInfo) => false;

        public Stub.CG_RequestDestroyKickOutAIOKDelegate CG_RequestDestroyKickOutAIOK = (HostID remote, RmiContext rmiContext) => false;

        public Stub.CG_RequestEventDestroyCreateOKDelegate CG_RequestEventDestroyCreateOK = (HostID remote, RmiContext rmiContext, DestroyCreateResult createResult) => false;

        public Stub.CG_RequestEventDestroyClearOKDelegate CG_RequestEventDestroyClearOK = (HostID remote, RmiContext rmiContext, DestroyClearResult clearResult) => false;

        public Stub.CG_RequestEventDestroyStartOKDelegate CG_RequestEventDestroyStartOK = (HostID remote, RmiContext rmiContext) => false;

        public Stub.CG_RequestEventDestroyRemoveOKDelegate CG_RequestEventDestroyRemoveOK = (HostID remote, RmiContext rmiContext, DestroyDiscoverInfo destroyDiscoverInfo, ItemResultInfo rewardItemInfo, MissionResult missionResult) => false;

        public Stub.CG_RequestEventChallengeDestroyCreateOKDelegate CG_RequestEventChallengeDestroyCreateOK = (HostID remote, RmiContext rmiContext, DestroyCreateResult createResult) => false;

        public Stub.CG_RequestEventChallengeDestroyStartOKDelegate CG_RequestEventChallengeDestroyStartOK = (HostID remote, RmiContext rmiContext) => false;

        public Stub.CG_RequestEventChallengeDestroyClearOKDelegate CG_RequestEventChallengeDestroyClearOK = (HostID remote, RmiContext rmiContext, DestroyClearResult clearResult, UserChallengeDestroyEventInfo userChallengeDestroyEventInfo, long worldTotalPoint) => false;

        public Stub.CG_RequestEventChallengeDestroyPointRefreshOKDelegate CG_RequestEventChallengeDestroyPointRefreshOK = (HostID remote, RmiContext rmiContext, int eventSEQ, long worldTotalPoint) => false;

        public Stub.CG_RequestEventChallengeDestroyUserRewardOKDelegate CG_RequestEventChallengeDestroyUserRewardOK = (HostID remote, RmiContext rmiContext, UserChallengeDestroyEventInfo userChallengeDestroyEventInfo, List<ItemResultInfo> getItemResultInfoList, MissionResult missionResult) => false;

        public Stub.CG_RequestEventChallengeDestroyWorldRewardOKDelegate CG_RequestEventChallengeDestroyWorldRewardOK = (HostID remote, RmiContext rmiContext, UserChallengeDestroyEventInfo userChallengeDestroyEventInfo, List<ItemResultInfo> getItemResultInfoList, MissionResult missionResult) => false;

        public Stub.CG_RequestDisasterDestroyCreateOKDelegate CG_RequestDisasterDestroyCreateOK = (HostID remote, RmiContext rmiContext, DestroyCreateResult createResult) => false;

        public Stub.CG_RequestDisasterDestroyStartOKDelegate CG_RequestDisasterDestroyStartOK = (HostID remote, RmiContext rmiContext) => false;

        public Stub.CG_RequestDisasterDestroyClearOKDelegate CG_RequestDisasterDestroyClearOK = (HostID remote, RmiContext rmiContext, DestroyClearResult clearResult) => false;

        public Stub.CG_RequestEventDisasterDestroyCreateOKDelegate CG_RequestEventDisasterDestroyCreateOK = (HostID remote, RmiContext rmiContext, DestroyCreateResult createResult, int remainSec) => false;

        public Stub.CG_RequestEventDisasterDestroyStartOKDelegate CG_RequestEventDisasterDestroyStartOK = (HostID remote, RmiContext rmiContext) => false;

        public Stub.CG_RequestEventDisasterDestroyClearOKDelegate CG_RequestEventDisasterDestroyClearOK = (HostID remote, RmiContext rmiContext, DestroyClearResult clearResult) => false;

        public Stub.CG_RequestEventDisasterDestroyLeaveOKDelegate CG_RequestEventDisasterDestroyLeaveOK = (HostID remote, RmiContext rmiContext) => false;

        public Stub.CG_RequestDestroyOtherPlayerTeamInfoOKDelegate CG_RequestDestroyOtherPlayerTeamInfoOK = (HostID remote, RmiContext rmiContext, long targetUSN, List<DestroyOtherPlayerTeamInfo> destroyOtherPlayerTeamInfoList) => false;

        public Stub.CG_RequestDestroyLiveJoinRegisterOKDelegate CG_RequestDestroyLiveJoinRegisterOK = (HostID remote, RmiContext rmiContext, int bossID, byte difficulty) => false;

        public Stub.CG_RequestDestroyLiveJoinUnregisterOKDelegate CG_RequestDestroyLiveJoinUnregisterOK = (HostID remote, RmiContext rmiContext, int bossID, byte difficulty) => false;

        public Stub.CG_RequestDestroyLiveJoinListOKDelegate CG_RequestDestroyLiveJoinListOK = (HostID remote, RmiContext rmiContext, List<DestroyLiveJoinUserInfo> destroyLiveJoinUserList) => false;

        public Stub.CG_RequestDestroyLiveJoinInviteOKDelegate CG_RequestDestroyLiveJoinInviteOK = (HostID remote, RmiContext rmiContext, long invitedUSN) => false;

        public Stub.CG_RequestDestroyLiveJoinAbortInvitationOKDelegate CG_RequestDestroyLiveJoinAbortInvitationOK = (HostID remote, RmiContext rmiContext, long invitedUSN) => false;

        public Stub.CG_RequestDestroyLiveJoinRejectInvitationOKDelegate CG_RequestDestroyLiveJoinRejectInvitationOK = (HostID remote, RmiContext rmiContext, int roomSN) => false;

        public Stub.GC_NotifyDestroyLiveJoinInviteDelegate GC_NotifyDestroyLiveJoinInvite = (HostID remote, RmiContext rmiContext, DestroyLiveJoinInvitation liveJoinInvitation) => false;

        public Stub.GC_NotifyDestroyLiveJoinAbortInvitationDelegate GC_NotifyDestroyLiveJoinAbortInvitation = (HostID remote, RmiContext rmiContext, int roomSN) => false;

        public Stub.GC_NotifyDestroyLiveJoinRejectInvitationDelegate GC_NotifyDestroyLiveJoinRejectInvitation = (HostID remote, RmiContext rmiContext, long invitedUSN) => false;

        public Stub.CG_RequestDestroyRoomInfoOKDelegate CG_RequestDestroyRoomInfoOK = (HostID remote, RmiContext rmiContext, int multiBossCount, List<int> stageIdList) => false;

        public Stub.CG_RequestFriendListOKDelegate CG_RequestFriendListOK = (HostID remote, RmiContext rmiContext, List<FriendInfo> friendList, MissionResult missionResult, List<FriendInfo> randomRecommendfriendList) => false;

        public Stub.CG_RequestFriendGuildInfoOKDelegate CG_RequestFriendGuildInfoOK = (HostID remote, RmiContext rmiContext, FriendGuildInfo friendGuildInfo) => false;

        public Stub.CG_RequestFriendApplySendListOKDelegate CG_RequestFriendApplySendListOK = (HostID remote, RmiContext rmiContext, List<FriendInfo> applySendList) => false;

        public Stub.CG_RequestFriendApplyReceiveListOKDelegate CG_RequestFriendApplyReceiveListOK = (HostID remote, RmiContext rmiContext, List<FriendInfo> applyReceiveList) => false;

        public Stub.CG_RequestFriendApplySendOKDelegate CG_RequestFriendApplySendOK = (HostID remote, RmiContext rmiContext, long targetUSN) => false;

        public Stub.CG_RequestFriendApplyRejectOKDelegate CG_RequestFriendApplyRejectOK = (HostID remote, RmiContext rmiContext, long targetUSN) => false;

        public Stub.CG_RequestFriendApplyReceiveAcceptOKDelegate CG_RequestFriendApplyReceiveAcceptOK = (HostID remote, RmiContext rmiContext, long targetUSN, MissionResult missionResult) => false;

        public Stub.CG_RequestFriendApplyReceiveAcceptListOKDelegate CG_RequestFriendApplyReceiveAcceptListOK = (HostID remote, RmiContext rmiContext, List<long> targetUSNList, MissionResult missionResult) => false;

        public Stub.CG_RequestFriendApplyReceiveRefuseOKDelegate CG_RequestFriendApplyReceiveRefuseOK = (HostID remote, RmiContext rmiContext, long targetUSN) => false;

        public Stub.CG_RequestFriendApplyReceiveRefuseListOKDelegate CG_RequestFriendApplyReceiveRefuseListOK = (HostID remote, RmiContext rmiContext, List<long> targetUSNList) => false;

        public Stub.CG_RequestFriendRemoveOKDelegate CG_RequestFriendRemoveOK = (HostID remote, RmiContext rmiContext, long targetUSN) => false;

        public Stub.CG_RequestFriendSearchOKDelegate CG_RequestFriendSearchOK = (HostID remote, RmiContext rmiContext, FriendInfo searchUserInfo) => false;

        public Stub.CG_RequestFriendVisitOKDelegate CG_RequestFriendVisitOK = (HostID remote, RmiContext rmiContext, FriendInfo friendInfo) => false;

        public Stub.CG_RequestFriendPointSendOKDelegate CG_RequestFriendPointSendOK = (HostID remote, RmiContext rmiContext, FriendInfo friendInfo, List<QuestProgressInfo> questProgressList, MissionResult missionResult) => false;

        public Stub.CG_RequestFriendPointSendAllOKDelegate CG_RequestFriendPointSendAllOK = (HostID remote, RmiContext rmiContext, List<FriendInfo> friendInfoList, List<QuestProgressInfo> questProgressList, MissionResult missionResult) => false;

        public Stub.CG_RequestFriendLobbyInfoOKDelegate CG_RequestFriendLobbyInfoOK = (HostID remote, RmiContext rmiContext, FriendLobbyInfo friendLobbyInfo) => false;

        public Stub.CG_RequestFriendCookingRecipeInfoOKDelegate CG_RequestFriendCookingRecipeInfoOK = (HostID remote, RmiContext rmiContext, bool friendCookingEatable, List<FriendRecipeOrderInfo> friendRecipeOrderInfoList) => false;

        public Stub.CG_RequestFriendCookingEatOKDelegate CG_RequestFriendCookingEatOK = (HostID remote, RmiContext rmiContext, FriendCookingEatResult friendCookingEatResult) => false;

        public Stub.CG_RequestFriendCookingEatFriendListOKDelegate CG_RequestFriendCookingEatFriendListOK = (HostID remote, RmiContext rmiContext, List<FriendInfo> friendInfoList) => false;

        public Stub.CG_RequestRefreshRecommendFriendListOKDelegate CG_RequestRefreshRecommendFriendListOK = (HostID remote, RmiContext rmiContext, List<FriendInfo> recommendFriendList) => false;

        public Stub.CG_RequestAPRechargeByUseItemOKDelegate CG_RequestAPRechargeByUseItemOK = (HostID remote, RmiContext rmiContext, ItemResultInfo useItemResultInfo, APInfo apInfo, UserADViewInfo updateUserADViewInfo) => false;

        public Stub.CG_RequestFoodBuffAutoUseOnOffOKDelegate CG_RequestFoodBuffAutoUseOnOffOK = (HostID remote, RmiContext rmiContext, FoodBuffInfo foodBuffInfo) => false;

        public Stub.CG_RequestItemUseRankExpOKDelegate CG_RequestItemUseRankExpOK = (HostID remote, RmiContext rmiContext, ItemResultInfo useItemResultInfo, int getRankExp, MissionResult missionResult) => false;

        public Stub.CG_RequestItemUseBoxOpenOKDelegate CG_RequestItemUseBoxOpenOK = (HostID remote, RmiContext rmiContext, ItemUseResult itemUseResult) => false;

        public Stub.CG_RequestItemUseRecipeExpOKDelegate CG_RequestItemUseRecipeExpOK = (HostID remote, RmiContext rmiContext, ItemResultInfo useItemResultInfo, int recipeID, int recipeResultExp, MissionResult missionResult) => false;

        public Stub.CG_RequestItemUseWeeklyKeyBoxOKDelegate CG_RequestItemUseWeeklyKeyBoxOK = (HostID remote, RmiContext rmiContext, ItemResultInfo useItemResultInfo, List<ItemResultInfo> getItemResultInfoList) => false;

        public Stub.CG_RequestItemUseWeaponTicketOKDelegate CG_RequestItemUseWeaponTicketOK = (HostID remote, RmiContext rmiContext, ItemResultInfo useItemResultInfo, List<ItemResultInfo> getItemResultInfoList, MissionResult missionResult) => false;

        public Stub.CG_RequestItemUseMusicOKDelegate CG_RequestItemUseMusicOK = (HostID remote, RmiContext rmiContext, ItemResultInfo useItemResultInfo, List<ItemResultInfo> getItemResultInfoList, MissionResult missionResult) => false;

        public Stub.CG_RequestItemUseBuffOKDelegate CG_RequestItemUseBuffOK = (HostID remote, RmiContext rmiContext, ItemResultInfo useItemResultInfo, UserBuffInfo userBuffInfo) => false;

        public Stub.CG_RequestTutorialAddStepOKDelegate CG_RequestTutorialAddStepOK = (HostID remote, RmiContext rmiContext, UserTutorialInfo tutorialInfo, List<ItemResultInfo> itemResultInfoList, MissionResult missionResult) => false;

        public Stub.CG_RequestTutorialSetFlagOKDelegate CG_RequestTutorialSetFlagOK = (HostID remote, RmiContext rmiContext, UserTutorialInfo tutorialInfo, List<ItemResultInfo> itemResultInfoList, MissionResult missionResult) => false;

        public Stub.CG_RequestTutorialHeroFlagOKDelegate CG_RequestTutorialHeroFlagOK = (HostID remote, RmiContext rmiContext, UserTutorialInfo tutorialInfo, MissionResult missionResult) => false;

        public Stub.CG_RequestTutorialGambleShopBuyOKDelegate CG_RequestTutorialGambleShopBuyOK = (HostID remote, RmiContext rmiContext, UserTutorialInfo tutorialInfo, List<ItemResultInfo> useItemResultInfoList, List<ItemResultInfo> gambleItemResultInfoList, MissionResult missionResult, UserBingoGachaEventInfo userBingoGachaEventInfo, PaybackEventResultInfo paybackEventresultInfo, List<UpgradeUserSkin> upgradeSkinResultInfoList) => false;

        public Stub.CG_RequestBattleTutorialInfoOKDelegate CG_RequestBattleTutorialInfoOK = (HostID remote, RmiContext rmiContext, byte battleTutorialSeq) => false;

        public Stub.CG_RequestBattleTutorialSetOKDelegate CG_RequestBattleTutorialSetOK = (HostID remote, RmiContext rmiContext, byte battleTutorialSeq) => false;

        public Stub.CG_RequestFriendlyMatchCreateOKDelegate CG_RequestFriendlyMatchCreateOK = (HostID remote, RmiContext rmiContext, FriendlyMatchCreateResult friendlyMatchCreateResult) => false;

        public Stub.CG_RequestFriendlyMatchFriendListOKDelegate CG_RequestFriendlyMatchFriendListOK = (HostID remote, RmiContext rmiContext, List<FriendlyMatchUserProfileInfo> fmUserProfileInfoList) => false;

        public Stub.CG_RequestFriendlyMatchInviteOKDelegate CG_RequestFriendlyMatchInviteOK = (HostID remote, RmiContext rmiContext, List<long> resultInvitedUSNList) => false;

        public Stub.CG_RequestFriendlyMatchReceivedInviteListOKDelegate CG_RequestFriendlyMatchReceivedInviteListOK = (HostID remote, RmiContext rmiContext, List<FriendlyMatchClientSendRoomInfo> invitedRoomInfoList) => false;

        public Stub.CG_RequestFriendlyMatchInviteAcceptOKDelegate CG_RequestFriendlyMatchInviteAcceptOK = (HostID remote, RmiContext rmiContext, FriendlyMatchJoinResult joinResult) => false;

        public Stub.CG_RequestFriendlyMatchInviteRejectOKDelegate CG_RequestFriendlyMatchInviteRejectOK = (HostID remote, RmiContext rmiContext, int roomSN) => false;

        public Stub.CG_RequestFriendlyMatchStartOKDelegate CG_RequestFriendlyMatchStartOK = (HostID remote, RmiContext rmiContext) => false;

        public Stub.CG_RequestFriendlyMatchBattleStartOKDelegate CG_RequestFriendlyMatchBattleStartOK = (HostID remote, RmiContext rmiContext, FriendlyMatchBattleStartResult battleStartResult) => false;

        public Stub.CG_RequestFriendlyMatchClearOKDelegate CG_RequestFriendlyMatchClearOK = (HostID remote, RmiContext rmiContext, FriendlyMatchClearResult clearResult) => false;

        public Stub.CG_RequestFriendlyMatchExitOKDelegate CG_RequestFriendlyMatchExitOK = (HostID remote, RmiContext rmiContext, bool isRelayServerStatus) => false;

        public Stub.GC_NotifyFriendlyMatchInviteDelegate GC_NotifyFriendlyMatchInvite = (HostID remote, RmiContext rmiContext, FriendlyMatchClientSendRoomInfo inviteRoomInfo) => false;

        public Stub.CG_RequestFriendlyMatchSetInviteOptionOKDelegate CG_RequestFriendlyMatchSetInviteOptionOK = (HostID remote, RmiContext rmiContext, FriendlyMatchInviteOption option) => false;

        public Stub.CG_RequestEventMissionGetAchievePointRewardOKDelegate CG_RequestEventMissionGetAchievePointRewardOK = (HostID remote, RmiContext rmiContext, short rewardOrder, ItemResultInfo achievePointItemInfo, ItemResultInfo rewardItemInfo, MissionResult missionResult) => false;

        public Stub.CG_RequestEventMissionCompleteRewardOKDelegate CG_RequestEventMissionCompleteRewardOK = (HostID remote, RmiContext rmiContext, int eventSeq, ItemResultInfo rewardItemInfo, MissionResult missionResult, UpgradeUserSkin upgradeSkinResultInfo) => false;

        public Stub.CG_RequestEventMissionInfoOKDelegate CG_RequestEventMissionInfoOK = (HostID remote, RmiContext rmiContext, List<ClientSendEventMissionInfo> userMissionEventInfoList) => false;

        public Stub.CG_RequestLobbyFurnitureRegistOKDelegate CG_RequestLobbyFurnitureRegistOK = (HostID remote, RmiContext rmiContext, List<UserFurniture> registUserFurnitureList, APInfo apInfo, bool hawkCollectAble, MissionResult missionResult) => false;

        public Stub.CG_RequestUserMusicEditOKDelegate CG_RequestUserMusicEditOK = (HostID remote, RmiContext rmiContext, UserMusic editUserMusic, MissionResult missionResult) => false;

        public Stub.CG_RequestEventSeasonPassInfoOKDelegate CG_RequestEventSeasonPassInfoOK = (HostID remote, RmiContext rmiContext, List<ClientSeasonPassRankRewardInfo> seasonPassRankRewardInfoList, UserCommonItem rankPointItemInfo, byte currentServerSeasonPassWeek, byte currentClientSeasonPassWeek, byte seasonPassRewardStackCount, byte seasonPassBuyStackCount) => false;

        public Stub.CG_RequestEventSeasonPassRankUpRewardOKDelegate CG_RequestEventSeasonPassRankUpRewardOK = (HostID remote, RmiContext rmiContext, List<ItemResultInfo> getItemResultInfoList, List<ApRewardInfo> apRewardInfoList, List<ClientSeasonPassRankRewardInfo> resultInfoList) => false;

        public Stub.CG_RequestEventSeasonPassRankUpRewardAllOKDelegate CG_RequestEventSeasonPassRankUpRewardAllOK = (HostID remote, RmiContext rmiContext, List<ItemResultInfo> getItemResultInfoList, List<ApRewardInfo> apRewardInfoList, List<ClientSeasonPassRankRewardInfo> resultInfoList) => false;

        public Stub.CG_RequestEventSeasonPassRankBuyOKDelegate CG_RequestEventSeasonPassRankBuyOK = (HostID remote, RmiContext rmiContext, List<ItemResultInfo> getItemResultInfoList, List<ItemResultInfo> useItemResultInfoList, PaybackEventResultInfo paybackEventresultInfo, MissionResult missionResult) => false;

        public Stub.CG_RequestEventExchangeOKDelegate CG_RequestEventExchangeOK = (HostID remote, RmiContext rmiContext, UserExchangeEventInfo userExchangeInfo, List<ItemResultInfo> materialItemResultInfoList, ItemResultInfo getItemResultInfo, MissionResult missionResult, PaybackEventResultInfo paybackEventresultInfo) => false;

        public Stub.CG_RequestEventPlayCountRewardOKDelegate CG_RequestEventPlayCountRewardOK = (HostID remote, RmiContext rmiContext, int eventSEQ, UserPlayCountEventInfo userPlayCountEventInfo, List<ItemResultInfo> getItemResultInfoList, MissionResult missionResult, List<UserPackageMissionInfo> userPackageMissionInfoList) => false;

        public Stub.CG_RequestWestSideServerInfo_RandomOKDelegate CG_RequestWestSideServerInfo_RandomOK = (HostID remote, RmiContext rmiContext) => false;

        public Stub.CG_RequestWestSideServerInfo_FixedOKDelegate CG_RequestWestSideServerInfo_FixedOK = (HostID remote, RmiContext rmiContext) => false;

        public Stub.CG_RequestWestSideServerInfo_RecommandOKDelegate CG_RequestWestSideServerInfo_RecommandOK = (HostID remote, RmiContext rmiContext, int channelID, int maxChannelNumber, WestRoomType selectRoomType) => false;

        public Stub.CG_RequestWestSide_PlayerInfoOKDelegate CG_RequestWestSide_PlayerInfoOK = (HostID remote, RmiContext rmiContext, WestSideUserSimpleInfo westSideUserSimpleInfo) => false;

        public Stub.CG_RequestWestSide_PlayerteamInfoOKDelegate CG_RequestWestSide_PlayerteamInfoOK = (HostID remote, RmiContext rmiContext, OtherPlayerTeamInfo otherPlayerTeamInfo) => false;

        public Stub.CG_RequestWestSide_PlayerGuildInfoOKDelegate CG_RequestWestSide_PlayerGuildInfoOK = (HostID remote, RmiContext rmiContext, GuildInfo guildInfo, List<GuildMemberInfo> memberInfoList) => false;

        public Stub.CG_RequestWorldChattingChannelOKDelegate CG_RequestWorldChattingChannelOK = (HostID remote, RmiContext rmiContext, int targetChannelId) => false;

        public Stub.CG_RequestWestSideServerInfo_RandomNotifyDelegate CG_RequestWestSideServerInfo_RandomNotify = (HostID remote, RmiContext rmiContext, WestSideServerInfo westSideServerInfo, int maxChannelNumber) => false;

        public Stub.CG_RequestWestSideServerInfo_FixedNotifyDelegate CG_RequestWestSideServerInfo_FixedNotify = (HostID remote, RmiContext rmiContext, WestSideServerInfo westSideServerInfo, int maxChannelNumber, bool isChangeRandom) => false;

        public Stub.CG_RequestEventExchangeInfoOKDelegate CG_RequestEventExchangeInfoOK = (HostID remote, RmiContext rmiContext, bool isActive, DateTime serverTime) => false;

        public Stub.CG_RequestEventExchangeBoxGachaInfoOKDelegate CG_RequestEventExchangeBoxGachaInfoOK = (HostID remote, RmiContext rmiContext, int eventSEQ, byte resetCount, int groupIndex, List<UserExchangeEventInfo> userExchangeBoxGachaList) => false;

        public Stub.CG_RequestEventExchangeBoxGachaPickupOKDelegate CG_RequestEventExchangeBoxGachaPickupOK = (HostID remote, RmiContext rmiContext, byte resetCount, int groupIndex, List<UserExchangeEventInfo> userExchangeBoxGachaList, List<ItemResultInfo> getItemResultInfoList, List<ItemResultInfo> useItemResultInfoList, MissionResult missionResult, PaybackEventResultInfo paybackEventResultInfo) => false;

        public Stub.CG_RequestEventExchangeBoxGachaResetOKDelegate CG_RequestEventExchangeBoxGachaResetOK = (HostID remote, RmiContext rmiContext, byte resetCount, int groupIndex, List<UserExchangeEventInfo> userExchangeBoxGachaList) => false;

        public Stub.CG_RequestEventPaybackRewardOKDelegate CG_RequestEventPaybackRewardOK = (HostID remote, RmiContext rmiContext, UserPaybackEventInfo userPaybackEventInfo, ItemResultInfo getItemResultInfo, MissionResult missionResult) => false;

        public Stub.CG_RequestEventSnsShareProgressOKDelegate CG_RequestEventSnsShareProgressOK = (HostID remote, RmiContext rmiContext, int eventSEQ, UserSnsShareEventInfo userSnsShareEventInfo, MissionResult missionResult) => false;

        public Stub.CG_RequestEventSnsShareRewardOKDelegate CG_RequestEventSnsShareRewardOK = (HostID remote, RmiContext rmiContext, int eventSEQ, UserSnsShareEventInfo userSnsShareEventInfo, List<ApRewardInfo> apRewardInfoList, List<ItemResultInfo> getItemResultInfoList, MissionResult missionResult) => false;

        public Stub.CG_RequestGagueEventInfoOKDelegate CG_RequestGagueEventInfoOK = (HostID remote, RmiContext rmiContext, UserGagueEventInfo userGagueEventInfo, int remainFreeChargeSEC, int remainFreeChargeEndSEC, bool freeChargeAble, int todayChargePoint) => false;

        public Stub.CG_RequestGagueEventChargeOKDelegate CG_RequestGagueEventChargeOK = (HostID remote, RmiContext rmiContext, int chargePoint, UserGagueEventInfo userGagueEventInfo, ItemResultInfo useItemResultInfo) => false;

        public Stub.CG_RequestGagueEventRewardOKDelegate CG_RequestGagueEventRewardOK = (HostID remote, RmiContext rmiContext, UserGagueEventInfo userGagueEventInfo, ItemResultInfo getItemResultInfo) => false;

        public Stub.CG_RequestGagueEventResetOKDelegate CG_RequestGagueEventResetOK = (HostID remote, RmiContext rmiContext, UserGagueEventInfo userGagueEventInfo, List<ItemResultInfo> useItemResultInfoList, PaybackEventResultInfo m_paybackEventResultInfo) => false;

        public Stub.CG_RequestEventLadderRewardOKDelegate CG_RequestEventLadderRewardOK = (HostID remote, RmiContext rmiContext, EventLadderResult eventLadderResult, byte eventLadderPlayCount, List<ItemResultInfo> useItemResultInfoList, List<ItemResultInfo> getItemResultInfoList, MissionResult missionResult, PaybackEventResultInfo paybackEventresultInfo) => false;

        public Stub.CG_RequestEventLobbyGiftRewardOKDelegate CG_RequestEventLobbyGiftRewardOK = (HostID remote, RmiContext rmiContext, EventLobbyGiftResult eventLobbyGiftResult) => false;

        public Stub.CG_RequestEventTimeMissionInfoOKDelegate CG_RequestEventTimeMissionInfoOK = (HostID remote, RmiContext rmiContext, int currentSeverTimeMissionDays, int currentClientTimeMissionDays, ClientSendTimeMissionEventInfo clientSendTimeMissionEventInfo) => false;

        public Stub.CG_RequestEventTimeMissionStartOKDelegate CG_RequestEventTimeMissionStartOK = (HostID remote, RmiContext rmiContext, ClientSendTimeMissionEventInfo updateUserTimeMissionEventInfo) => false;

        public Stub.CG_RequestEventLobbyDecorationRewardOKDelegate CG_RequestEventLobbyDecorationRewardOK = (HostID remote, RmiContext rmiContext, int eventSEQ, UserEventLobbyDecorationInfo userEventLobbyDecorationInfo, List<ItemResultInfo> getItemResultInfoList, List<ItemResultInfo> useItemResultInfoList) => false;

        public Stub.CG_RequestEventPvpWinCountRewardOKDelegate CG_RequestEventPvpWinCountRewardOK = (HostID remote, RmiContext rmiContext, UserPVPWinCountEventInfo pvpWinCountEventInfo, List<ItemResultInfo> getItemResultInfoList) => false;

        public Stub.CG_RequestEventChapterClearRewardOKDelegate CG_RequestEventChapterClearRewardOK = (HostID remote, RmiContext rmiContext, UserChapterClearEventInfo chapterClearEventInfo, List<ItemResultInfo> getItemResultInfoList, MissionResult missionResult) => false;

        public Stub.CG_RequestRegistPlayTitleOKDelegate CG_RequestRegistPlayTitleOK = (HostID remote, RmiContext rmiContext, int playTitleID) => false;

        public Stub.CG_RequestPlayTitleMissionRewardOKDelegate CG_RequestPlayTitleMissionRewardOK = (HostID remote, RmiContext rmiContext, List<int> userPlayTitleList) => false;

        public Stub.CG_RequestPlayTitleInfoOKDelegate CG_RequestPlayTitleInfoOK = (HostID remote, RmiContext rmiContext, List<int> userPlayTitleList, MissionResult missionResult, List<PlayTitleGroupActiveInfo> playTitleGroupActiveInfoList) => false;

        public Stub.CG_RequestEventBingoInfoOKDelegate CG_RequestEventBingoInfoOK = (HostID remote, RmiContext rmiContext, UserEventBingoInfo bingoInfo) => false;

        public Stub.CG_RequestEventBingoRandomNumberOKDelegate CG_RequestEventBingoRandomNumberOK = (HostID remote, RmiContext rmiContext, EventBingoRandomNumberResult result, MissionResult missionResult) => false;

        public Stub.CG_RequestEventBingoExchangeNumberOKDelegate CG_RequestEventBingoExchangeNumberOK = (HostID remote, RmiContext rmiContext, EventBingoExchangeResult result, MissionResult missionResult) => false;

        public Stub.CG_RequestEventBingoResetOKDelegate CG_RequestEventBingoResetOK = (HostID remote, RmiContext rmiContext, UserEventBingoInfo bingoInfo, List<NeedItemInfo> normalRewardItemInfoList, NeedItemInfo allClearRewardItemInfo, List<ItemResultInfo> itemResultInfoList, MissionResult missionResult) => false;

        public Stub.CG_RequestSubdueCreateOKDelegate CG_RequestSubdueCreateOK = (HostID remote, RmiContext rmiContext, RelayServerInfo relayServerInfo) => false;

        public Stub.CG_RequestSubdueJoinOKDelegate CG_RequestSubdueJoinOK = (HostID remote, RmiContext rmiContext, BossWarJoinResult joinResult, RelayServerInfo relayServerInfo) => false;

        public Stub.CG_RequestSubdueOwnerGameStartOKDelegate CG_RequestSubdueOwnerGameStartOK = (HostID remote, RmiContext rmiContext, BossWarBattleStartResult battleStartResult) => false;

        public Stub.CG_RequestSubdueLoadingCompleteOKDelegate CG_RequestSubdueLoadingCompleteOK = (HostID remote, RmiContext rmiContext, SubdueBossPlayInfo subdueBossPlayInfo, bool isReturnToLobby, ItemResultInfo useItemResultInfo, MissionResult missionResult, bool isBuffUsed, FoodBuffInfo clientFoodBuffInfo, List<int> usedEventLobbyBuffIdList) => false;

        public Stub.CG_RequestSubdueOnlineFriendListOKDelegate CG_RequestSubdueOnlineFriendListOK = (HostID remote, RmiContext rmiContext, List<BossWarUserProfileInfo> friendProfileInfoList) => false;

        public Stub.CG_RequestSubdueOnlineGuildMemberListOKDelegate CG_RequestSubdueOnlineGuildMemberListOK = (HostID remote, RmiContext rmiContext, List<BossWarUserProfileInfo> guildMemberProfileInfoList) => false;

        public Stub.CG_RequestSubdueOnlineUserRankRangeListOKDelegate CG_RequestSubdueOnlineUserRankRangeListOK = (HostID remote, RmiContext rmiContext, List<BossWarUserProfileInfo> userProfileInfoList) => false;

        public Stub.CG_RequestSubdueInvitationReceiveListOKDelegate CG_RequestSubdueInvitationReceiveListOK = (HostID remote, RmiContext rmiContext, List<BossWarClientSendGameInfo> invitedGameInfoList) => false;

        public Stub.CG_RequestSubdueRemoveInvitationOKDelegate CG_RequestSubdueRemoveInvitationOK = (HostID remote, RmiContext rmiContext, int gameSN) => false;

        public Stub.CG_RequestSubdueInviteOKDelegate CG_RequestSubdueInviteOK = (HostID remote, RmiContext rmiContext, List<long> invitedUSNList) => false;

        public Stub.CG_RequestSubdueRewardOKDelegate CG_RequestSubdueRewardOK = (HostID remote, RmiContext rmiContext, SubdueBossRewardResult rewardResult) => false;

        public Stub.CG_NotifySubdueInviteOKDelegate CG_NotifySubdueInviteOK = (HostID remote, RmiContext rmiContext, UserProfileInfo hostInfo, BossWarClientSendGameInfo invitedGameInfo) => false;

        public Stub.CG_RequestPatrolMissionInfoOKDelegate CG_RequestPatrolMissionInfoOK = (HostID remote, RmiContext rmiContext, PatrolInfo patrolInfo) => false;

        public Stub.CG_RequestPatrolMissionStartOKDelegate CG_RequestPatrolMissionStartOK = (HostID remote, RmiContext rmiContext, PatrolMissionInfo missionInfo, List<UserHeroPassiveGroupInfo> heroPassiveGroupList, MissionResult missionResult) => false;

        public Stub.CG_RequestPatrolMissionCancelOKDelegate CG_RequestPatrolMissionCancelOK = (HostID remote, RmiContext rmiContext, int patrolId, PatrolMissionInfo newMIssionInfo, MissionResult missionResult) => false;

        public Stub.CG_RequestPatrolMissionRewardOKDelegate CG_RequestPatrolMissionRewardOK = (HostID remote, RmiContext rmiContext, List<PatrolMissionInfo> patrolMissionInfoList, List<ItemResultInfo> itemResultInfoList, List<ItemResultInfo> passiveItemResultInfoList, MissionResult missionResult) => false;

        public Stub.CG_RequestPatrolMissionTimeRewardOKDelegate CG_RequestPatrolMissionTimeRewardOK = (HostID remote, RmiContext rmiContext, ItemResultInfo itemResultInfo, MissionResult missionResult, byte rotationId) => false;

        public Stub.CG_RequestEventExchangeCardInfoOKDelegate CG_RequestEventExchangeCardInfoOK = (HostID remote, RmiContext rmiContext, EventExchangeCardInfo eventExchangeCardInfo) => false;

        public Stub.CG_RequestEventExchangeCardSetupOKDelegate CG_RequestEventExchangeCardSetupOK = (HostID remote, RmiContext rmiContext, EventExchangeCardInfo eventExchangeCardInfo) => false;

        public Stub.CG_RequestEventExchangeCardChoiceManualOKDelegate CG_RequestEventExchangeCardChoiceManualOK = (HostID remote, RmiContext rmiContext, EventExchangeCardInfo eventExchangeCardInfo, List<ItemResultInfo> getItemResultInfoList, List<ItemResultInfo> useItemResultInfoList, MissionResult missionResult) => false;

        public Stub.CG_RequestEventExchangeCardChoiceAutoOKDelegate CG_RequestEventExchangeCardChoiceAutoOK = (HostID remote, RmiContext rmiContext, EventExchangeCardInfo eventExchangeCardInfo, List<ItemResultInfo> getItemResultInfoList, List<ItemResultInfo> useItemResultInfoList) => false;

        public Stub.CG_RequestEventExchangeCardResetOKDelegate CG_RequestEventExchangeCardResetOK = (HostID remote, RmiContext rmiContext, EventExchangeCardInfo eventExchangeCardInfo) => false;

        public Stub.CG_RequestEventCraftExchangeOKDelegate CG_RequestEventCraftExchangeOK = (HostID remote, RmiContext rmiContext, ItemResultInfo craftItemInfo, List<ItemResultInfo> useItemResultInfoList, MissionResult missionResult) => false;

        public Stub.CG_RequestEventProvisionProvideOKDelegate CG_RequestEventProvisionProvideOK = (HostID remote, RmiContext rmiContext, UserProvisionEventSectionInfo sectionInfo, List<ItemResultInfo> useItemResultInfoList, List<ItemResultInfo> provisionRewardItemInfoList, ItemResultInfo sectionRewardItemInfo, MissionResult missionResult) => false;

        public Stub.CG_RequestEventProvisionGetFinalRewardOKDelegate CG_RequestEventProvisionGetFinalRewardOK = (HostID remote, RmiContext rmiContext, UserProvisionEventInfo provisionEventInfo, ItemResultInfo finalRewardItemInfo, MissionResult missionResult) => false;

        public Stub.CG_RequestEventExchangeKingAmberOKDelegate CG_RequestEventExchangeKingAmberOK = (HostID remote, RmiContext rmiContext, UserExchangeEventInfo userExchangeEventInfo, ItemResultInfo useItemResultInfo, ItemResultInfo getItemResultInfo, MissionResult missionResult, List<QuestProgressInfo> questProgressInfoList) => false;

        public Stub.CG_RequestEventTreasureHuntInfoOKDelegate CG_RequestEventTreasureHuntInfoOK = (HostID remote, RmiContext rmiContext, UserTreasureHuntEventInfo userTreasureHuntEventInfo) => false;

        public Stub.CG_RequestEventTreasureHuntStartOKDelegate CG_RequestEventTreasureHuntStartOK = (HostID remote, RmiContext rmiContext, UserTreasureHuntEventInfo userTreasureHuntEventInfo) => false;

        public Stub.CG_RequestEventTreasureHuntMoveDiceOKDelegate CG_RequestEventTreasureHuntMoveDiceOK = (HostID remote, RmiContext rmiContext, UserTreasureHuntEventInfo userTreasureHuntEventInfo, List<ItemResultInfo> useItemResultInfoList, List<ItemResultInfo> rewardItemResultInfoList, MissionResult missionResult) => false;

        public Stub.CG_RequestEventTreasureHuntMoveChoosePointOKDelegate CG_RequestEventTreasureHuntMoveChoosePointOK = (HostID remote, RmiContext rmiContext, UserTreasureHuntEventInfo userTreasureHuntEventInfo, List<ItemResultInfo> rewardItemResultInfoList) => false;

        public Stub.CG_RequestEventTreasureHuntChooseRewardOKDelegate CG_RequestEventTreasureHuntChooseRewardOK = (HostID remote, RmiContext rmiContext, UserTreasureHuntEventInfo userTreasureHuntEventInfo, List<ItemResultInfo> rewardItemResultInfoList) => false;

        public Stub.CG_RequestEventTreasureHuntCompleteOKDelegate CG_RequestEventTreasureHuntCompleteOK = (HostID remote, RmiContext rmiContext, UserTreasureHuntEventInfo userTreasureHuntEventInfo, List<ItemResultInfo> useItemResultInfoList) => false;

        public Stub.CG_RequestEventTreasureHuntCompleteRewardOKDelegate CG_RequestEventTreasureHuntCompleteRewardOK = (HostID remote, RmiContext rmiContext, UserTreasureHuntEventInfo userTreasureHuntEventInfo, List<ItemResultInfo> rewardItemResultInfoList) => false;

        public Stub.CG_RequestEventTreasureHuntMissionOKDelegate CG_RequestEventTreasureHuntMissionOK = (HostID remote, RmiContext rmiContext, UserTreasureHuntEventInfo userTreasureHuntEventInfo, List<ItemResultInfo> useItemResultInfoList, List<ItemResultInfo> rewardItemResultInfoList) => false;

        public Stub.CG_RequestNMFunTalkKitLoginOKDelegate CG_RequestNMFunTalkKitLoginOK = (HostID remote, RmiContext rmiContext) => false;

        public Stub.CG_RequestNMFunTalkKitCreateRoomOKDelegate CG_RequestNMFunTalkKitCreateRoomOK = (HostID remote, RmiContext rmiContext, int errorCode) => false;

        public Stub.CG_RequestNMFunTalkKitPasswordOKDelegate CG_RequestNMFunTalkKitPasswordOK = (HostID remote, RmiContext rmiContext, string pwd, string guildChatRoomPrefix, int guildSN) => false;

        public Stub.GC_NotifyNMFunTalkKitGuildRoomJoinDelegate GC_NotifyNMFunTalkKitGuildRoomJoin = (HostID remote, RmiContext rmiContext, int errorCode, string guildChatRoomPrefix, int guildSN) => false;

        public Stub.GC_NotifyNMFunTalkKitGuildRoomLeaveDelegate GC_NotifyNMFunTalkKitGuildRoomLeave = (HostID remote, RmiContext rmiContext) => false;

        public Stub.GC_NotifyChatInfoDelegate GC_NotifyChatInfo = (HostID remote, RmiContext rmiContext, ChatInfo chatInfo) => false;

        public Stub.CG_RequestEventGamblePaybackRewardOKDelegate CG_RequestEventGamblePaybackRewardOK = (HostID remote, RmiContext rmiContext, UserPaybackEventInfo userGamblePaybackEventInfo, List<ItemResultInfo> getItemResultInfoList, MissionResult missionResult) => false;

        public Stub.CG_RequestEventRandomBoxInfoOKDelegate CG_RequestEventRandomBoxInfoOK = (HostID remote, RmiContext rmiContext, UserRandomBoxEventInfo userRandomBoxEventInfo) => false;

        public Stub.CG_RequestEventRandomBoxCreateOKDelegate CG_RequestEventRandomBoxCreateOK = (HostID remote, RmiContext rmiContext, UserRandomBoxEventInfo userRandomBoxEventInfo, ItemResultInfo itemResultInfo, MissionResult missionResult) => false;

        public Stub.CG_RequestEventRandomBoxRewardOKDelegate CG_RequestEventRandomBoxRewardOK = (HostID remote, RmiContext rmiContext, byte slot, EventRandomBoxInfo boxInfo, EventRandomBoxChangeType changeType, int mileage, ItemResultInfo itemResultInfo, MissionResult missionResult) => false;

        public Stub.CG_RequestSeasonpassShopInfoOKDelegate CG_RequestSeasonpassShopInfoOK = (HostID remote, RmiContext rmiContext, int eventSEQ, List<SeasonPassShopBuyInfo> shopBuyInfoList) => false;

        public Stub.CG_RequestSeasonpassShopBuyOKDelegate CG_RequestSeasonpassShopBuyOK = (HostID remote, RmiContext rmiContext, List<ItemResultInfo> useItemResultInfoList, List<ItemResultInfo> getItemResultInfoList, int eventSEQ, ShopBuyInfo shopBuyInfo, MissionResult missionResult, PaybackEventResultInfo paybackEventresultInfo) => false;

        public Stub.CG_Request_EventPredict_User_InfoOKDelegate CG_Request_EventPredict_User_InfoOK = (HostID remote, RmiContext rmiContext, int eventSEQ, EventPredictInfo userPredictInfo) => false;

        public Stub.CG_Request_EventPredict_StartOKDelegate CG_Request_EventPredict_StartOK = (HostID remote, RmiContext rmiContext, int eventSEQ, List<HawkStepInfo> hawkStepList, List<ItemResultInfo> resultItemInfoList, int getScore, EventPredictInfo userPredictInfo, ItemResultInfo useItemResultInfo, MissionResult missionResult) => false;

        public Stub.CG_Request_EventPredict_Special_RewardOKDelegate CG_Request_EventPredict_Special_RewardOK = (HostID remote, RmiContext rmiContext, int eventSEQ, byte specialRewardIndex, List<ItemResultInfo> resultItemInfoList, MissionResult missionResult) => false;

        public Stub.CG_Request_EventAuto_OnOKDelegate CG_Request_EventAuto_OnOK = (HostID remote, RmiContext rmiContext, EventAutoInfo userEventAutoInfo) => false;

        public Stub.CG_Request_EventAuto_ResultOKDelegate CG_Request_EventAuto_ResultOK = (HostID remote, RmiContext rmiContext, EventAutoInfo userEventAutoInfo, int normalKillCount, int bossKillCount) => false;

        public Stub.CG_Request_EventAuto_Battle_EndOKDelegate CG_Request_EventAuto_Battle_EndOK = (HostID remote, RmiContext rmiContext, EventAutoInfo userEventAutoInfo) => false;

        public Stub.CG_Request_EventAuto_HawkUpgradeOKDelegate CG_Request_EventAuto_HawkUpgradeOK = (HostID remote, RmiContext rmiContext, EventAutoInfo userEventAutoInfo, List<ItemResultInfo> useItemResultInfoList, MissionResult missionResult) => false;

        public Stub.CG_Request_EventAuto_RewardOKDelegate CG_Request_EventAuto_RewardOK = (HostID remote, RmiContext rmiContext, EventAutoInfo userEventAutoInfo, List<ItemResultInfo> rewardItemInfoList, MissionResult missionResult) => false;

        public Stub.CG_Request_EventAuto_Box_Slot_UpgradeOKDelegate CG_Request_EventAuto_Box_Slot_UpgradeOK = (HostID remote, RmiContext rmiContext, EventAutoInfo userEventAutoInfo, List<ItemResultInfo> useItemResultInfoList) => false;

        public Stub.CG_Request_EventAuto_SpecialRewardOKDelegate CG_Request_EventAuto_SpecialRewardOK = (HostID remote, RmiContext rmiContext, EventAutoInfo userEventAutoInfo, List<ItemResultInfo> rewardItemInfoList, MissionResult missionResult) => false;

        public Stub.CG_RequestArtifactCardPackOpenOKDelegate CG_RequestArtifactCardPackOpenOK = (HostID remote, RmiContext rmiContext, ItemResultInfo useItemResultInfo, List<ItemResultInfo> getItemResultInfoList, MissionResult missionResult) => false;

        public Stub.CG_RequestArtifactUnionUpgradeOKDelegate CG_RequestArtifactUnionUpgradeOK = (HostID remote, RmiContext rmiContext, UserArtifactUnionInfo unionInfo, List<ItemResultInfo> useItemResultInfoList, MissionResult missionResult, PaybackEventResultInfo paybackEventresultInfo) => false;

        public Stub.CG_RequestArtifactTeamChangeOKDelegate CG_RequestArtifactTeamChangeOK = (HostID remote, RmiContext rmiContext) => false;

        public Stub.CG_RequestArtifactDescentBossTeamChangeOKDelegate CG_RequestArtifactDescentBossTeamChangeOK = (HostID remote, RmiContext rmiContext) => false;

        public Stub.CG_RequestArtifactTeamInfoAllOKDelegate CG_RequestArtifactTeamInfoAllOK = (HostID remote, RmiContext rmiContext, List<UserArtifactTeamInfo> userArtifactTeamInfoList) => false;

        public Stub.CG_RequestEventArtifactWishSaveOKDelegate CG_RequestEventArtifactWishSaveOK = (HostID remote, RmiContext rmiContext, UserArtifactWishEventInfo userArtifactWishEventInfo) => false;

        public Stub.CG_RequestEventArtifactWishCardPackOpenOKDelegate CG_RequestEventArtifactWishCardPackOpenOK = (HostID remote, RmiContext rmiContext, UserArtifactWishEventInfo userArtifactWishEventInfo, ItemResultInfo useItemResultInfo, List<ItemResultInfo> getItemResultInfoList, MissionResult missionResult, int getWishSlotIndex) => false;

        public Stub.CG_RequestArtifactDemonLordTeamChangeOKDelegate CG_RequestArtifactDemonLordTeamChangeOK = (HostID remote, RmiContext rmiContext) => false;

        public Stub.CG_RequestNorthGrimBookRewardOKDelegate CG_RequestNorthGrimBookRewardOK = (HostID remote, RmiContext rmiContext, int grimContentID, NorthGrimBookCategoryInfo grimCategoryInfo, ItemResultInfo rewardItemInfo, MissionResult missionResult) => false;

        public Stub.CG_RequestEventCheerGroupOKDelegate CG_RequestEventCheerGroupOK = (HostID remote, RmiContext rmiContext, UserCheerEventInfo userCheerEventInfo, List<ItemResultInfo> useItemResultInfoList, List<ItemResultInfo> rewardItemResultInfoList, MissionResult missionResult) => false;

        public Stub.CG_RequestEventCheerGaugeRewardOKDelegate CG_RequestEventCheerGaugeRewardOK = (HostID remote, RmiContext rmiContext, UserCheerEventInfo userCheerEventInfo, List<ItemResultInfo> rewardItemResultInfoList, MissionResult missionResult) => false;

        public Stub.CG_RequestEventCheerFinishRewardOKDelegate CG_RequestEventCheerFinishRewardOK = (HostID remote, RmiContext rmiContext, UserCheerEventInfo userCheerEventInfo, List<ItemResultInfo> rewardItemResultInfoList, MissionResult missionResult) => false;

        public Stub.CG_RequestEventDiceInfoOKDelegate CG_RequestEventDiceInfoOK = (HostID remote, RmiContext rmiContext, ClientSendEventDiceInfo clientEventDiceInfo) => false;

        public Stub.CG_RequestEventDiceRollOKDelegate CG_RequestEventDiceRollOK = (HostID remote, RmiContext rmiContext, ClientSendEventDiceInfo clientEventDiceInfo, MissionResult missionResult) => false;

        public Stub.CG_RequestEventDiceRollEventHandleOKDelegate CG_RequestEventDiceRollEventHandleOK = (HostID remote, RmiContext rmiContext, int resultIndex, ClientSendEventDiceInfo clientEventDiceInfo, ItemResultInfo getItemResultInfo) => false;

        public Stub.CG_RequestEventDiceRaceRewardOKDelegate CG_RequestEventDiceRaceRewardOK = (HostID remote, RmiContext rmiContext, ClientSendEventDiceInfo clientEventDiceInfo, ItemResultInfo getItemResultInfo) => false;

        public Stub.CG_RequestConstellationStoneOpenOKDelegate CG_RequestConstellationStoneOpenOK = (HostID remote, RmiContext rmiContext, byte group, List<ConstellationStoneInfo> stoneInfoList, MissionResult missionResult, int growthPoint) => false;

        public Stub.CG_RequestConstellationStoneOptionValueChangeOKDelegate CG_RequestConstellationStoneOptionValueChangeOK = (HostID remote, RmiContext rmiContext, byte group, List<ConstellationStoneInfo> stoneInfoList, List<ItemResultInfo> useItemInfoResultList) => false;

        public Stub.CG_RequestConstellationStoneOptionValueChangeApplyOKDelegate CG_RequestConstellationStoneOptionValueChangeApplyOK = (HostID remote, RmiContext rmiContext, byte group, List<ConstellationStoneInfo> stoneInfoList) => false;

        public Stub.CG_RequestMaterialFusionOKDelegate CG_RequestMaterialFusionOK = (HostID remote, RmiContext rmiContext, int userMaterialFusionPoint, ItemResultInfo rewardItemResultInfo, List<ItemResultInfo> materialItemResultInfoList, MissionResult missionResult) => false;

        public Stub.CG_RequestEventSkinOneStepEvolutionOKDelegate CG_RequestEventSkinOneStepEvolutionOK = (HostID remote, RmiContext rmiContext, UserSkinOneStepEvolutionEventInfo userSkinOneStepEvolutionEventInfo, ItemResultInfo useItemResultInfo, SkinOneStepEvolutionResult skinOneStepEvolutionResult) => false;

        public Stub.CG_RequestEventPuzzleInfoOKDelegate CG_RequestEventPuzzleInfoOK = (HostID remote, RmiContext rmiContext, ClientSendEventPuzzleInfo puzzleEventInfo) => false;

        public Stub.CG_RequestEventPuzzleInfoStartOKDelegate CG_RequestEventPuzzleInfoStartOK = (HostID remote, RmiContext rmiContext, ClientSendEventPuzzleInfo puzzleEventInfo, List<int> usedEventLobbyBuffIdList) => false;

        public Stub.CG_RequestEventPuzzleInfoEndOKDelegate CG_RequestEventPuzzleInfoEndOK = (HostID remote, RmiContext rmiContext, ClientSendEventPuzzleInfo puzzleEventInfo, List<ItemResultInfo> rewardItemResultInfoList, MissionResult missionResult, List<int> usedEventLobbyBuffIdList) => false;

        public Stub.CG_RequestEventPuzzleInfoBlockRewardOKDelegate CG_RequestEventPuzzleInfoBlockRewardOK = (HostID remote, RmiContext rmiContext, ClientSendEventPuzzleInfo puzzleEventInfo, ItemResultInfo rewardItemResultInfo, MissionResult missionResult, int blockID, int resultRewardOrder) => false;

        public Stub.CG_RequestEventPuzzleInfoTotalRewardOKDelegate CG_RequestEventPuzzleInfoTotalRewardOK = (HostID remote, RmiContext rmiContext, ClientSendEventPuzzleInfo puzzleEventInfo, ItemResultInfo rewardItemResultInfo, MissionResult missionResult) => false;

        public Stub.CG_RequestRandomLuckybagInfoOKDelegate CG_RequestRandomLuckybagInfoOK = (HostID remote, RmiContext rmiContext, UserRandomLuckybagInfo userEventLuckybagInfo) => false;

        public Stub.CG_RequestRandomLuckybagOpenOKDelegate CG_RequestRandomLuckybagOpenOK = (HostID remote, RmiContext rmiContext, UserRandomLuckybagInfo userLuckybagInfo, ItemResultInfo priceItemResultInfo, List<ItemResultInfo> rewardItemResultInfoList, MissionResult missionResult) => false;

        public Stub.CG_RequestRandomLuckybagLastRewardOKDelegate CG_RequestRandomLuckybagLastRewardOK = (HostID remote, RmiContext rmiContext, UserRandomLuckybagInfo userLuckybagInfo, List<ItemResultInfo> rewardItemResultInfoList, MissionResult missionResult) => false;

        public Stub.CG_RequestEventStepupMissionStartOKDelegate CG_RequestEventStepupMissionStartOK = (HostID remote, RmiContext rmiContext, UserStepupMissionEventInfo userStepupMissionEventInfo, List<QuestProgressInfo> questProgressInfoList, MissionResult missionResult) => false;

        public Stub.CG_RequestEventStepupMissionGroupClearOKDelegate CG_RequestEventStepupMissionGroupClearOK = (HostID remote, RmiContext rmiContext, UserStepupMissionEventInfo userStepupMissionEventInfo, List<ItemResultInfo> rewardItemResultInfoList, List<QuestProgressInfo> questProgressInfoList, MissionResult missionResult, List<int> removedQuestIDList) => false;

        public Stub.CG_RequestFriendlyMatchObserveCreateOKDelegate CG_RequestFriendlyMatchObserveCreateOK = (HostID remote, RmiContext rmiContext, FriendlyMatchCreateResult friendlyMatchCreateResult) => false;

        public Stub.CG_RequestFriendlyMatchObserveFriendListOKDelegate CG_RequestFriendlyMatchObserveFriendListOK = (HostID remote, RmiContext rmiContext, List<FriendlyMatchUserProfileInfo> fmUserProfileInfoList) => false;

        public Stub.CG_RequestFriendlyMatchObserveInviteOKDelegate CG_RequestFriendlyMatchObserveInviteOK = (HostID remote, RmiContext rmiContext, List<long> resultInvitedUSNList) => false;

        public Stub.CG_RequestFriendlyMatchObserveReceivedInviteListOKDelegate CG_RequestFriendlyMatchObserveReceivedInviteListOK = (HostID remote, RmiContext rmiContext, List<FriendlyMatchClientSendRoomInfo> invitedRoomInfoList) => false;

        public Stub.CG_RequestFriendlyMatchObserveInviteAcceptOKDelegate CG_RequestFriendlyMatchObserveInviteAcceptOK = (HostID remote, RmiContext rmiContext, FriendlyMatchJoinResult joinResult) => false;

        public Stub.CG_RequestFriendlyMatchObserveInviteRejectOKDelegate CG_RequestFriendlyMatchObserveInviteRejectOK = (HostID remote, RmiContext rmiContext, int roomSN) => false;

        public Stub.CG_RequestFriendlyMatchObserveStartOKDelegate CG_RequestFriendlyMatchObserveStartOK = (HostID remote, RmiContext rmiContext) => false;

        public Stub.CG_RequestFriendlyMatchObserveBattleStartOKDelegate CG_RequestFriendlyMatchObserveBattleStartOK = (HostID remote, RmiContext rmiContext, FriendlyMatchBattleStartResult battleStartResult) => false;

        public Stub.CG_RequestFriendlyMatchObserveClearOKDelegate CG_RequestFriendlyMatchObserveClearOK = (HostID remote, RmiContext rmiContext, FriendlyMatchClearResult clearResult) => false;

        public Stub.CG_RequestFriendlyMatchObserveExitOKDelegate CG_RequestFriendlyMatchObserveExitOK = (HostID remote, RmiContext rmiContext, bool isRelayServerStatus) => false;

        public Stub.GC_NotifyFriendlyMatchObserveInviteDelegate GC_NotifyFriendlyMatchObserveInvite = (HostID remote, RmiContext rmiContext, FriendlyMatchClientSendRoomInfo inviteRoomInfo) => false;

        public Stub.CG_RequestFriendlyMatchObserveSetInviteOptionOKDelegate CG_RequestFriendlyMatchObserveSetInviteOptionOK = (HostID remote, RmiContext rmiContext, FriendlyMatchInviteOption option) => false;

        public Stub.CG_RequestEventGambleWishSaveOKDelegate CG_RequestEventGambleWishSaveOK = (HostID remote, RmiContext rmiContext, UserEventGachaWishInfo userEventGachaWishInfo) => false;

        public Stub.CG_RequestEventMazeInfoOKDelegate CG_RequestEventMazeInfoOK = (HostID remote, RmiContext rmiContext, UserMazeEventInfo userMazeEventInfo) => false;

        public Stub.CG_RequestEventMazeStartOKDelegate CG_RequestEventMazeStartOK = (HostID remote, RmiContext rmiContext, UserMazeEventInfo userMazeEventInfo, List<ItemResultInfo> useItemResultInfoList, APInfo apInfo, ItemResultInfo getItemResultInfo, MissionResult missionResult) => false;

        public Stub.CG_RequestEventMazeSelectStartHeroesOKDelegate CG_RequestEventMazeSelectStartHeroesOK = (HostID remote, RmiContext rmiContext, UserMazeEventInfo userMazeEventInfo) => false;

        public Stub.CG_RequestEventMazeInitializeOKDelegate CG_RequestEventMazeInitializeOK = (HostID remote, RmiContext rmiContext, UserMazeEventInfo userMazeEventInfo, ItemResultInfo useItemResultInfo) => false;

        public Stub.CG_RequestEventMazeMoveOKDelegate CG_RequestEventMazeMoveOK = (HostID remote, RmiContext rmiContext, UserMazeEventInfo userMazeEventInfo, MissionResult missionResult) => false;

        public Stub.CG_RequestEventMazePassiveSelectOKDelegate CG_RequestEventMazePassiveSelectOK = (HostID remote, RmiContext rmiContext, UserMazeEventInfo userMazeEventInfo, int passiveID) => false;

        public Stub.CG_RequestEventMazeSeasonRewardOKDelegate CG_RequestEventMazeSeasonRewardOK = (HostID remote, RmiContext rmiContext, UserMazeEventInfo userMazeEventInfo, List<ItemResultInfo> getItemResultInfoList, MissionResult missionResult) => false;

        public Stub.CG_RequestEventMazeChangeSlotOKDelegate CG_RequestEventMazeChangeSlotOK = (HostID remote, RmiContext rmiContext, UserMazeEventInfo userMazeEventInfo) => false;

        public Stub.CG_RequestEventMazeRefreshSelectableHeroesOKDelegate CG_RequestEventMazeRefreshSelectableHeroesOK = (HostID remote, RmiContext rmiContext, UserMazeEventInfo userMazeEventInfo, ItemResultInfo useItemResultInfo, MissionResult missionResult) => false;

        public Stub.CG_RequestEventMazeShopBuyOKDelegate CG_RequestEventMazeShopBuyOK = (HostID remote, RmiContext rmiContext, UserMazeEventInfo userMazeEventInfo, ItemResultInfo useItemResultInfo, MissionResult missionResult) => false;

        public Stub.CG_RequestEventMazeShopBuffBuyOKDelegate CG_RequestEventMazeShopBuffBuyOK = (HostID remote, RmiContext rmiContext, UserMazeEventInfo userMazeEventInfo, ItemResultInfo useItemResultInfo, MissionResult missionResult) => false;

        public Stub.CG_RequestEventMoleGameInfoOKDelegate CG_RequestEventMoleGameInfoOK = (HostID remote, RmiContext rmiContext, ClientSendEventMoleGameInfo clientSendEventMoleGameInfo) => false;

        public Stub.CG_RequestEventMoleGameStartOKDelegate CG_RequestEventMoleGameStartOK = (HostID remote, RmiContext rmiContext, ClientSendEventMoleGameInfo clientSendMoleGameInfo, ItemResultInfo useItemResultInfo, MissionResult missionResult) => false;

        public Stub.CG_RequestEventMoleGameEndOKDelegate CG_RequestEventMoleGameEndOK = (HostID remote, RmiContext rmiContext, ClientSendEventMoleGameInfo clientSendMoleGameInfo, List<ItemResultInfo> rewardItemResultInfoList, MissionResult missionResult) => false;

        public Stub.CG_RequestEventMoleGameRecordRewardOKDelegate CG_RequestEventMoleGameRecordRewardOK = (HostID remote, RmiContext rmiContext, ClientSendEventMoleGameInfo clientSendMoleGameInfo, int recordType, int resultRewardOrder, ItemResultInfo rewardItemResultInfo, MissionResult missionResult) => false;

        public Stub.CG_RequestEventMoleGameTotalRewardOKDelegate CG_RequestEventMoleGameTotalRewardOK = (HostID remote, RmiContext rmiContext, ClientSendEventMoleGameInfo clientSendMoleGameInfo, int resultRewardOrder, ItemResultInfo rewardItemResultInfo, MissionResult missionResult) => false;

        public Stub.CG_RequestEventMoleGameRankInfoOKDelegate CG_RequestEventMoleGameRankInfoOK = (HostID remote, RmiContext rmiContext, int eventSEQ, List<EventMoleGameRankInfo> rankInfoList) => false;

        public Stub.CG_RequestEventLobbyBuffInfoOKDelegate CG_RequestEventLobbyBuffInfoOK = (HostID remote, RmiContext rmiContext, UserEventLobbyBuffInfo userEventLobbyBuffInfo) => false;

        public Stub.CG_RequestEventLobbyBuffBuyOKDelegate CG_RequestEventLobbyBuffBuyOK = (HostID remote, RmiContext rmiContext, UserEventLobbyBuffInfo userEventLobbyBuffInfo, MissionResult missionResult) => false;

        public Stub.GC_NotifyEventLobbyBuffInfoDelegate GC_NotifyEventLobbyBuffInfo = (HostID remote, RmiContext rmiContext, UserEventLobbyBuffInfo userEventLobbyBuffInfo) => false;

        public Stub.CG_RequestEventBoxWishInfoOKDelegate CG_RequestEventBoxWishInfoOK = (HostID remote, RmiContext rmiContext, int eventSEQ, int wishStep, int wishId, List<UserExchangeEventInfo> exchangeEventInfoList) => false;

        public Stub.CG_RequestEventBoxWishSetOKDelegate CG_RequestEventBoxWishSetOK = (HostID remote, RmiContext rmiContext, int eventSEQ, int wishId) => false;

        public Stub.CG_RequestEventBoxWishPickUpOKDelegate CG_RequestEventBoxWishPickUpOK = (HostID remote, RmiContext rmiContext, int eventSEQ, byte pickCount, byte pickUpCount, List<UserExchangeEventInfo> exchangeEventInfoList, List<ItemResultInfo> getItemResultInfoList, List<UpgradeUserSkin> upgradeSkinList, List<ItemResultInfo> useItemResultInfoList, MissionResult missionResult) => false;

        public Stub.CG_RequestEventBoxWishResetOKDelegate CG_RequestEventBoxWishResetOK = (HostID remote, RmiContext rmiContext, int eventSEQ, int wishStep, int wishId) => false;

        public Stub.CG_RequestConstellationStoneLockOKDelegate CG_RequestConstellationStoneLockOK = (HostID remote, RmiContext rmiContext, int stoneId, bool isLock) => false;

        public Stub.CG_RequestEventConquestInfoOKDelegate CG_RequestEventConquestInfoOK = (HostID remote, RmiContext rmiContext, UserEventConquesClientSendInfo userEventConquestClientSendInfo, bool isEventFirstEnter) => false;

        public Stub.CG_RequestEventConquestProductionDepotCompleteRewardOKDelegate CG_RequestEventConquestProductionDepotCompleteRewardOK = (HostID remote, RmiContext rmiContext, UserEventConquesClientSendInfo userEventConquestClientSendInfo, List<ItemResultInfo> getItemResultInfoList, MissionResult missionResult) => false;

        public Stub.CG_RequestEventConquestProductionDepotUpgradeOKDelegate CG_RequestEventConquestProductionDepotUpgradeOK = (HostID remote, RmiContext rmiContext, UserEventConquesClientSendInfo userEventConquestClientSendInfo, List<ItemResultInfo> useItemResultInfoList, MissionResult missionResult) => false;

        public Stub.CG_RequestEventConquestProductionDepotUpgradeRewardOKDelegate CG_RequestEventConquestProductionDepotUpgradeRewardOK = (HostID remote, RmiContext rmiContext, UserEventConquesClientSendInfo userEventConquestClientSendInfo, List<ItemResultInfo> getItemResultInfoList, MissionResult missionResult) => false;

        public Stub.CG_RequestEventConquestAreaAttackOKDelegate CG_RequestEventConquestAreaAttackOK = (HostID remote, RmiContext rmiContext, UserEventConquesClientSendInfo userEventConquestClientSendInfo, int attackAreaID, List<ItemResultInfo> useItemResultInfoList, MissionResult missionResult) => false;

        public Stub.CG_RequestEventConquestAreaFeverAttackOKDelegate CG_RequestEventConquestAreaFeverAttackOK = (HostID remote, RmiContext rmiContext, UserEventConquesClientSendInfo userEventConquestClientSendInfo, int attackAreaID, List<ItemResultInfo> useItemResultInfoList, MissionResult missionResult) => false;

        public Stub.CG_RequestEventConquestAreaAttackRewardOKDelegate CG_RequestEventConquestAreaAttackRewardOK = (HostID remote, RmiContext rmiContext, UserEventConquesClientSendInfo userEventConquestClientSendInfo, List<ItemResultInfo> getItemResultInfoList, MissionResult missionResult) => false;

        public Stub.CG_RequestEventConquestMakeFeverItemOKDelegate CG_RequestEventConquestMakeFeverItemOK = (HostID remote, RmiContext rmiContext, UserEventConquesClientSendInfo userEventConquestClientSendInfo, List<ItemResultInfo> useItemResultInfoList, List<ItemResultInfo> getItemResultInfoList, MissionResult missionResult) => false;

        public Stub.CG_RequestEventConquestUpdateSceneIndexOKDelegate CG_RequestEventConquestUpdateSceneIndexOK = (HostID remote, RmiContext rmiContext, UserEventConquesClientSendInfo userEventConquestClientSendInfo) => false;

        public Stub.CG_RequestEventConquestUpdateUnitPosOKDelegate CG_RequestEventConquestUpdateUnitPosOK = (HostID remote, RmiContext rmiContext, UserEventConquesClientSendInfo userEventConquestClientSendInfo) => false;

        public Stub.CG_RequestEventRoadInfoOKDelegate CG_RequestEventRoadInfoOK = (HostID remote, RmiContext rmiContext, UserEventRoadInfo eventRoadInfo) => false;

        public Stub.CG_RequestEventRoadWalkOKDelegate CG_RequestEventRoadWalkOK = (HostID remote, RmiContext rmiContext, UserEventRoadInfo eventRoadInfo, List<ItemResultInfo> useItemResultInfoList, List<ItemResultInfo> getItemResultInfoList, MissionResult missionResult) => false;

        public Stub.CG_RequestEventRoadRewardOKDelegate CG_RequestEventRoadRewardOK = (HostID remote, RmiContext rmiContext, UserEventRoadInfo eventRoadInfo, List<ItemResultInfo> getItemResultInfoList, MissionResult missionResult) => false;

        public Stub.CG_RequestEventRoadSelectOKDelegate CG_RequestEventRoadSelectOK = (HostID remote, RmiContext rmiContext, UserEventRoadInfo eventRoadInfo) => false;

        public Stub.CG_RequestEventGambleBoxInfoOKDelegate CG_RequestEventGambleBoxInfoOK = (HostID remote, RmiContext rmiContext, UserEventGambleBoxInfoToClientSend eventGambleBoxInfo) => false;

        public Stub.CG_RequestEventGambleBoxPickupOKDelegate CG_RequestEventGambleBoxPickupOK = (HostID remote, RmiContext rmiContext, UserEventGambleBoxInfoToClientSend eventGambleBoxInfo, List<ItemResultInfo> useItemResultInfoList, List<ItemResultInfo> getItemResultInfoList, List<UpgradeUserSkin> upgradeSkinList, MissionResult missionResult) => false;

        public Stub.CG_RequestEventGambleBoxResetOKDelegate CG_RequestEventGambleBoxResetOK = (HostID remote, RmiContext rmiContext, UserEventGambleBoxInfoToClientSend eventGambleBoxInfo) => false;

        public Stub.CG_RequestEventLuckyBoxInfoOKDelegate CG_RequestEventLuckyBoxInfoOK = (HostID remote, RmiContext rmiContext, UserEventLuckyBoxInfo userEventLuckyBoxInfo) => false;

        public Stub.CG_RequestEventLuckyBoxRewardOKDelegate CG_RequestEventLuckyBoxRewardOK = (HostID remote, RmiContext rmiContext, UserEventLuckyBoxInfo userEventLuckyBoxInfo, ItemResultInfo useItemResultInfo, NeedItemInfo rewardItemInfo, MissionResult missionResult) => false;

        public Stub.CG_RequestEventMazeRefreshSelectablePassivesOKDelegate CG_RequestEventMazeRefreshSelectablePassivesOK = (HostID remote, RmiContext rmiContext, UserMazeEventInfo userMazeEventInfo, ItemResultInfo useItemResultInfo, MissionResult missionResult) => false;

        public Stub.CG_RequestEventMazeSaveTeamOKDelegate CG_RequestEventMazeSaveTeamOK = (HostID remote, RmiContext rmiContext, UserMazeEventInfo userMazeEventInfo) => false;

        public Stub.CG_RequestEventMazeSelectClearBonusOKDelegate CG_RequestEventMazeSelectClearBonusOK = (HostID remote, RmiContext rmiContext, UserMazeEventInfo userMazeEventInfo) => false;

        public Stub.CG_RequestEventMazeStartSavedTeamOKDelegate CG_RequestEventMazeStartSavedTeamOK = (HostID remote, RmiContext rmiContext, UserMazeEventInfo userMazeEventInfo) => false;

        public Stub.CG_RequestGuildOrderMissioInfoOKDelegate CG_RequestGuildOrderMissioInfoOK = (HostID remote, RmiContext rmiContext, GuildOrderMissionInfoClientSend guildOrderMissionInfoClientSend, List<UserGuildOrderMissionInfo> userGuildOrderMissionInfoClientSend, int remainNextResetSec, GuildMemberInfo userGuildMemberInfo) => false;

        public Stub.CG_RequestGuildOrderMissionClearOKDelegate CG_RequestGuildOrderMissionClearOK = (HostID remote, RmiContext rmiContext, int missionID, GuildOrderMissionInfoClientSend guildOrderMissionInfoClientSend, List<UserGuildOrderMissionInfo> userGuildOrderMissionInfoClientSend, List<ItemResultInfo> getItemResultInfoList, int originalGetAPCount) => false;

        public Stub.CG_RequestGuildOrderMissionMileageBonusRewardOKDelegate CG_RequestGuildOrderMissionMileageBonusRewardOK = (HostID remote, RmiContext rmiContext, GuildOrderMissionInfoClientSend guildOrderMissionInfoClientSend, List<UserGuildOrderMissionInfo> userGuildOrderMissionInfoClientSend, List<ItemResultInfo> getItemResultInfoList, GuildMemberInfo userGuildMemberInfo) => false;

        public Stub.CG_RequestEventConfirmGameInfoOKDelegate CG_RequestEventConfirmGameInfoOK = (HostID remote, RmiContext rmiContext, ClientSendEventConfirmGameInfo confirmEventInfo) => false;

        public Stub.CG_RequestEventConfirmGameStartOKDelegate CG_RequestEventConfirmGameStartOK = (HostID remote, RmiContext rmiContext, ClientSendEventConfirmGameInfo confirmEventInfo, List<ItemResultInfo> useItemResultInfoList, MissionResult missionResult) => false;

        public Stub.CG_RequestEventConfirmGameEndOKDelegate CG_RequestEventConfirmGameEndOK = (HostID remote, RmiContext rmiContext, ClientSendEventConfirmGameInfo confirmEventInfo, MissionResult missionResult) => false;

        public Stub.CG_RequestEventConfirmGameRecordRewardOKDelegate CG_RequestEventConfirmGameRecordRewardOK = (HostID remote, RmiContext rmiContext, ClientSendEventConfirmGameInfo confirmEventInfo, List<ItemResultInfo> rewardItemResultInfoList, MissionResult missionResult, int boxID, int resultRewardOrder) => false;

        public Stub.CG_RequestEventConfirmGameTotalRewardOKDelegate CG_RequestEventConfirmGameTotalRewardOK = (HostID remote, RmiContext rmiContext, ClientSendEventConfirmGameInfo confirmEventInfo, List<ItemResultInfo> rewardItemResultInfoList, MissionResult missionResult) => false;

        public Stub.CG_RequestHeroLeagueInfoOKDelegate CG_RequestHeroLeagueInfoOK = (HostID remote, RmiContext rmiContext, ClientSendHeroLeagueInfo heroLeagueInfo) => false;

        public Stub.CG_RequestHeroLeagueSelectLeagueOKDelegate CG_RequestHeroLeagueSelectLeagueOK = (HostID remote, RmiContext rmiContext, UserHeroLeagueInfo userHeroLeagueInfo, APInfo apInfo, MissionResult missionResult, List<UserTeam> userTeamList) => false;

        public Stub.CG_RequestHeroLeagueInitializeOKDelegate CG_RequestHeroLeagueInitializeOK = (HostID remote, RmiContext rmiContext, ClientSendHeroLeagueInfo heroLeagueInfo) => false;

        public Stub.CG_RequestHeroLeagueInitUserGroupOKDelegate CG_RequestHeroLeagueInitUserGroupOK = (HostID remote, RmiContext rmiContext, ClientSendHeroLeagueInfo heroLeagueInfo, List<UserSkin> updateSkinList, APInfo apInfo, MissionResult missionResult) => false;

        public Stub.CG_RequestHeroLeagueGagueRewardOKDelegate CG_RequestHeroLeagueGagueRewardOK = (HostID remote, RmiContext rmiContext, UserHeroLeagueInfo userHeroLeagueInfo, ItemResultInfo completeRewardItemResultInfo, ItemResultInfo battleRewardItemResultInfo) => false;

        public Stub.CG_RequestHeroLeagueAttackTeamChangeOKDelegate CG_RequestHeroLeagueAttackTeamChangeOK = (HostID remote, RmiContext rmiContext, UserTeamChangeInfo userTeamChangeInfo) => false;

        public Stub.CG_RequestHeroLeagueStageStartOKDelegate CG_RequestHeroLeagueStageStartOK = (HostID remote, RmiContext rmiContext, StageStartResultInfo stageStartResultInfo, List<HeroLeagueHero> defenceHeroLeagueHeroList, List<HeroLeagueHero> attackHeroLeagueHeroList, List<int> seasonBuffIDList, UserHeroLeagueInfo userHeroLeagueInfo, List<UserSkin> updateSkinList) => false;

        public Stub.CG_RequestHeroLeagueStageClearOKDelegate CG_RequestHeroLeagueStageClearOK = (HostID remote, RmiContext rmiContext, StageClearResultInfo stageClearResultInfo, byte winCount, byte nextTeamNumber, bool isApply) => false;

        public Stub.CG_RequestHeroLeagueStageRejoinOKDelegate CG_RequestHeroLeagueStageRejoinOK = (HostID remote, RmiContext rmiContext, List<int> attackHeroIDList, List<int> defenceHeroIDList, List<int> seasonBuffIDList) => false;

        public Stub.CG_RequestHeroLeagueStageRejoinCancelOKDelegate CG_RequestHeroLeagueStageRejoinCancelOK = (HostID remote, RmiContext rmiContext) => false;

        public Stub.CG_RequestHeroLeagueScoreRewardOKDelegate CG_RequestHeroLeagueScoreRewardOK = (HostID remote, RmiContext rmiContext, UserHeroLeagueInfo userHeroLeagueInfo, List<ItemResultInfo> getItemResultInfoList, MissionResult missionResult) => false;

        public Stub.CG_RequestEventBalloonDartInfoOKDelegate CG_RequestEventBalloonDartInfoOK = (HostID remote, RmiContext rmiContext, UserEventBalloonDartInfo eventBalloonDartInfo) => false;

        public Stub.CG_RequestEventBalloonDartThrowOKDelegate CG_RequestEventBalloonDartThrowOK = (HostID remote, RmiContext rmiContext, UserEventBalloonDartInfo eventBalloonDartInfo, List<ItemResultInfo> useItemResultInfoList, List<ItemResultInfo> getItemResultInfoList, MissionResult missionResult) => false;

        public Stub.CG_RequestEventBalloonDartChanceOKDelegate CG_RequestEventBalloonDartChanceOK = (HostID remote, RmiContext rmiContext, UserEventBalloonDartInfo eventBalloonDartInfo, List<ItemResultInfo> useItemResultInfoList) => false;

        public Stub.CG_RequestEventBalloonDartStepUpOKDelegate CG_RequestEventBalloonDartStepUpOK = (HostID remote, RmiContext rmiContext, UserEventBalloonDartInfo eventBalloonDartInfo) => false;

        public Stub.CG_RequestEventBalloonDartStepRewardOKDelegate CG_RequestEventBalloonDartStepRewardOK = (HostID remote, RmiContext rmiContext, UserEventBalloonDartInfo eventBalloonDartInfo, List<ItemResultInfo> getItemResultInfoList, MissionResult missionResult) => false;

        public Stub.CG_RequestEventBalloonDartTotalRewardOKDelegate CG_RequestEventBalloonDartTotalRewardOK = (HostID remote, RmiContext rmiContext, UserEventBalloonDartInfo eventBalloonDartInfo, List<ItemResultInfo> getItemResultInfoList, MissionResult missionResult) => false;

        public Stub.CG_RequestChatOKDelegate CG_RequestChatOK = (HostID remote, RmiContext rmiContext) => false;

        public Stub.CG_RequestChatChannelEnterOKDelegate CG_RequestChatChannelEnterOK = (HostID remote, RmiContext rmiContext) => false;

        public Stub.GC_NotifyChatDelegate GC_NotifyChat = (HostID remote, RmiContext rmiContext, ChatInfo chatInfo) => false;

        public Stub.GC_NotifyChatLogDelegate GC_NotifyChatLog = (HostID remote, RmiContext rmiContext, List<ChatInfo> chatInfoList) => false;

        public Stub.GC_NotifyChatChannelEnterDelegate GC_NotifyChatChannelEnter = (HostID remote, RmiContext rmiContext, int channelI) => false;

        public const string RmiName_CG_CommonCancel = "CG_CommonCancel";

        public const string RmiName_GC_NotifyUserLevelUp = "GC_NotifyUserLevelUp";

        public const string RmiName_CG_FrozenAssetCancel = "CG_FrozenAssetCancel";

        public const string RmiName_CG_RequestChannelUserInfoOK = "CG_RequestChannelUserInfoOK";

        public const string RmiName_CG_RequestHeartBeatOK = "CG_RequestHeartBeatOK";

        public const string RmiName_CG_RequestChangeNicknameOK = "CG_RequestChangeNicknameOK";

        public const string RmiName_CG_RequestChangeWantToSayOK = "CG_RequestChangeWantToSayOK";

        public const string RmiName_CG_RequestTeamInfoOK = "CG_RequestTeamInfoOK";

        public const string RmiName_CG_RequestTeamSlotChangeOK = "CG_RequestTeamSlotChangeOK";

        public const string RmiName_CG_RequestTeamNameChangeOK = "CG_RequestTeamNameChangeOK";

        public const string RmiName_CG_RequestLobbyInfoOK = "CG_RequestLobbyInfoOK";

        public const string RmiName_CG_RequestBasePointInfoOK = "CG_RequestBasePointInfoOK";

        public const string RmiName_CG_RequestChatStampUpdateBookmarkOK = "CG_RequestChatStampUpdateBookmarkOK";

        public const string RmiName_CG_RequestChatStampUpdateQuickMessageOK = "CG_RequestChatStampUpdateQuickMessageOK";

        public const string RmiName_CG_RequestMainSkinChangeOK = "CG_RequestMainSkinChangeOK";

        public const string RmiName_CG_RequestEventListOK = "CG_RequestEventListOK";

        public const string RmiName_CG_RequestCheatEnterOK = "CG_RequestCheatEnterOK";

        public const string RmiName_CG_RequestCheatStageClearOK = "CG_RequestCheatStageClearOK";

        public const string RmiName_CG_RequestDllGetItemOK = "CG_RequestDllGetItemOK";

        public const string RmiName_CG_RequestRecommendFriendUSNListOK = "CG_RequestRecommendFriendUSNListOK";

        public const string RmiName_CG_RequestDailyResetOK = "CG_RequestDailyResetOK";

        public const string RmiName_CG_NotifyMaintenance = "CG_NotifyMaintenance";

        public const string RmiName_CG_RequestFrozenAssetRedeemOK = "CG_RequestFrozenAssetRedeemOK";

        public const string RmiName_CG_RequestDataTableReloadOK = "CG_RequestDataTableReloadOK";

        public const string RmiName_CG_NotifyEmergencyNotice = "CG_NotifyEmergencyNotice";

        public const string RmiName_CG_RequestRecommendHeroGrowthInfoOK = "CG_RequestRecommendHeroGrowthInfoOK";

        public const string RmiName_CG_RequestServerVersionOK = "CG_RequestServerVersionOK";

        public const string RmiName_CG_RequestSkinOneStepEvolutionOK = "CG_RequestSkinOneStepEvolutionOK";

        public const string RmiName_CG_RequestSecurityTokenOK = "CG_RequestSecurityTokenOK";

        public const string RmiName_CG_RequestNetmarbleAuthOK = "CG_RequestNetmarbleAuthOK";

        public const string RmiName_CG_RequestAuthenticateCreateOK = "CG_RequestAuthenticateCreateOK";

        public const string RmiName_CG_RequestEditorUserInfoByNickNameOK = "CG_RequestEditorUserInfoByNickNameOK";

        public const string RmiName_CG_RequestLoginOK = "CG_RequestLoginOK";

        public const string RmiName_CG_RequestLoginInstantlyOK = "CG_RequestLoginInstantlyOK";

        public const string RmiName_CG_RequestForceLogoutOK = "CG_RequestForceLogoutOK";

        public const string RmiName_CG_RetryRequestOK = "CG_RetryRequestOK";

        public const string RmiName_CG_RequestAccountWithdrawOK = "CG_RequestAccountWithdrawOK";

        public const string RmiName_CG_RequestAccountWithdrawCancelOK = "CG_RequestAccountWithdrawCancelOK";

        public const string RmiName_GC_NotifyCookie = "GC_NotifyCookie";

        public const string RmiName_CG_RequestCookieOK = "CG_RequestCookieOK";

        public const string RmiName_CG_RequestVerifySecurityCertValueOK = "CG_RequestVerifySecurityCertValueOK";

        public const string RmiName_GC_NotifySecurity = "GC_NotifySecurity";

        public const string RmiName_CG_RequestBillingInitializeOK = "CG_RequestBillingInitializeOK";

        public const string RmiName_CG_RequestBillingVerifyPUOK = "CG_RequestBillingVerifyPUOK";

        public const string RmiName_CG_RequestBillingRemainTROK = "CG_RequestBillingRemainTROK";

        public const string RmiName_CG_RequestBillingCouponVerifyOK = "CG_RequestBillingCouponVerifyOK";

        public const string RmiName_CG_RequestBillingCrossPromotionOK = "CG_RequestBillingCrossPromotionOK";

        public const string RmiName_CG_RequestBillingPackageShopOK = "CG_RequestBillingPackageShopOK";

        public const string RmiName_CG_RequestAgeInputOK = "CG_RequestAgeInputOK";

        public const string RmiName_CG_Notify_WolverineOK = "CG_Notify_WolverineOK";

        public const string RmiName_CG_RequestSDKInfoChangeOK = "CG_RequestSDKInfoChangeOK";

        public const string RmiName_CG_RequestPCBillingInitializeOK = "CG_RequestPCBillingInitializeOK";

        public const string RmiName_CG_RequestPCBillingRemainItemsOK = "CG_RequestPCBillingRemainItemsOK";

        public const string RmiName_CG_RequestSkinLevelUpBySkinMaterialOK = "CG_RequestSkinLevelUpBySkinMaterialOK";

        public const string RmiName_CG_RequestSkinResearchOK = "CG_RequestSkinResearchOK";

        public const string RmiName_CG_RequestSkinResearchInitOK = "CG_RequestSkinResearchInitOK";

        public const string RmiName_CG_RequestSkinMaterialGrindOK = "CG_RequestSkinMaterialGrindOK";

        public const string RmiName_CG_RequestSkinAwakenOK = "CG_RequestSkinAwakenOK";

        public const string RmiName_CG_RequestSkinHeadStyleChangeOK = "CG_RequestSkinHeadStyleChangeOK";

        public const string RmiName_CG_RequestSkinEvolutionOK = "CG_RequestSkinEvolutionOK";

        public const string RmiName_CG_RequestSkinSkillLevelUpOK = "CG_RequestSkinSkillLevelUpOK";

        public const string RmiName_CG_RequestSkinGiveFellowshipExpOK = "CG_RequestSkinGiveFellowshipExpOK";

        public const string RmiName_CG_RequestSkinFellowshipLevelUpRewardOK = "CG_RequestSkinFellowshipLevelUpRewardOK";

        public const string RmiName_CG_RequestCostumeEquipOK = "CG_RequestCostumeEquipOK";

        public const string RmiName_CG_RequestCostumeUnEquipOK = "CG_RequestCostumeUnEquipOK";

        public const string RmiName_CG_RequestCostumeUnLockOK = "CG_RequestCostumeUnLockOK";

        public const string RmiName_CG_RequestSkinOverEvolutionOK = "CG_RequestSkinOverEvolutionOK";

        public const string RmiName_CG_RequestSkinMaxAwakenRewardOK = "CG_RequestSkinMaxAwakenRewardOK";

        public const string RmiName_CG_RequestCostumeRegisterOK = "CG_RequestCostumeRegisterOK";

        public const string RmiName_CG_RequestSkinLoveRewardOK = "CG_RequestSkinLoveRewardOK";

        public const string RmiName_CG_RequestCostumeAutoRegisterOK = "CG_RequestCostumeAutoRegisterOK";

        public const string RmiName_CG_RequestStoryCostumeOK = "CG_RequestStoryCostumeOK";

        public const string RmiName_CG_RequestCostumeLevelUpOK = "CG_RequestCostumeLevelUpOK";

        public const string RmiName_CG_RequestSkinMaxAwakenOK = "CG_RequestSkinMaxAwakenOK";

        public const string RmiName_CG_RequestBattlePointRegisterOK = "CG_RequestBattlePointRegisterOK";

        public const string RmiName_CG_RequestSkinTranscendOK = "CG_RequestSkinTranscendOK";

        public const string RmiName_CG_RequestSkinTranscendResetOK = "CG_RequestSkinTranscendResetOK";

        public const string RmiName_CG_RequestCostumeCraftOK = "CG_RequestCostumeCraftOK";

        public const string RmiName_CG_RequestLimitedCostumeCheckOK = "CG_RequestLimitedCostumeCheckOK";

        public const string RmiName_CG_RequestGetExclusiveSkillOK = "CG_RequestGetExclusiveSkillOK";

        public const string RmiName_CG_RequestSkinOverEvolutionStraightOK = "CG_RequestSkinOverEvolutionStraightOK";

        public const string RmiName_CG_RequestSkinLegendEvolutionOK = "CG_RequestSkinLegendEvolutionOK";

        public const string RmiName_CG_RequestCostumeCraftUpgradeOK = "CG_RequestCostumeCraftUpgradeOK";

        public const string RmiName_CG_RequestSkinLevelupBonusOK = "CG_RequestSkinLevelupBonusOK";

        public const string RmiName_CG_RequestSkinExceedOK = "CG_RequestSkinExceedOK";

        public const string RmiName_CG_RequestMailListOK = "CG_RequestMailListOK";

        public const string RmiName_CG_RequestMailConfirmOK = "CG_RequestMailConfirmOK";

        public const string RmiName_CG_RequestMailConfirmAllOK = "CG_RequestMailConfirmAllOK";

        public const string RmiName_CG_RequestMailHistoryListOK = "CG_RequestMailHistoryListOK";

        public const string RmiName_CG_RequestMailRecentlyHistoryListOK = "CG_RequestMailRecentlyHistoryListOK";

        public const string RmiName_CG_RequestFriendMailListOK = "CG_RequestFriendMailListOK";

        public const string RmiName_CG_RequestFriendMailConfirmOK = "CG_RequestFriendMailConfirmOK";

        public const string RmiName_CG_RequestFriendMailConfirmAllOK = "CG_RequestFriendMailConfirmAllOK";

        public const string RmiName_CG_RequestNoticeMailRewardOK = "CG_RequestNoticeMailRewardOK";

        public const string RmiName_CG_RequestPackageMailListOK = "CG_RequestPackageMailListOK";

        public const string RmiName_CG_RequestPackageMailGetOK = "CG_RequestPackageMailGetOK";

        public const string RmiName_CG_RequestPackageMailHistoryListOK = "CG_RequestPackageMailHistoryListOK";

        public const string RmiName_CG_RequestLevelUpPackageRewardOK = "CG_RequestLevelUpPackageRewardOK";

        public const string RmiName_CG_RequestLevelUpPackageRewardAllOK = "CG_RequestLevelUpPackageRewardAllOK";

        public const string RmiName_CG_RequestAttendancePackageRewardOK = "CG_RequestAttendancePackageRewardOK";

        public const string RmiName_CG_RequestAttendancePackageRewardAllOK = "CG_RequestAttendancePackageRewardAllOK";

        public const string RmiName_CG_RequestMailADRewardOK = "CG_RequestMailADRewardOK";

        public const string RmiName_CG_RequestMissionProgressOK = "CG_RequestMissionProgressOK";

        public const string RmiName_CG_RequestMissionClearOK = "CG_RequestMissionClearOK";

        public const string RmiName_CG_RequestMissionEventClearOK = "CG_RequestMissionEventClearOK";

        public const string RmiName_CG_RequestMissionGetAchievePointRewardOK = "CG_RequestMissionGetAchievePointRewardOK";

        public const string RmiName_CG_RequestQuestStartOK = "CG_RequestQuestStartOK";

        public const string RmiName_CG_RequestQuestProgressOK = "CG_RequestQuestProgressOK";

        public const string RmiName_CG_RequestQuestClearOK = "CG_RequestQuestClearOK";

        public const string RmiName_CG_RequestQuestRemoveOK = "CG_RequestQuestRemoveOK";

        public const string RmiName_CG_RequestDirectSelectorRewardOK = "CG_RequestDirectSelectorRewardOK";

        public const string RmiName_CG_RequestQuestChapterClearOK = "CG_RequestQuestChapterClearOK";

        public const string RmiName_CG_RequestEventQuestClearOK = "CG_RequestEventQuestClearOK";

        public const string RmiName_CG_RequestAnotherQuestClearOK = "CG_RequestAnotherQuestClearOK";

        public const string RmiName_CG_RequestNorthQuestClearOK = "CG_RequestNorthQuestClearOK";

        public const string RmiName_CG_RequestQuestGuideListAllClearRewardOK = "CG_RequestQuestGuideListAllClearRewardOK";

        public const string RmiName_CG_RequestQuestGuideListStepStartOK = "CG_RequestQuestGuideListStepStartOK";

        public const string RmiName_CG_RequestQuestGuideListStepClearOK = "CG_RequestQuestGuideListStepClearOK";

        public const string RmiName_CG_RequestDisasterQuestClearOK = "CG_RequestDisasterQuestClearOK";

        public const string RmiName_CG_RequestLobbyVRSearchOK = "CG_RequestLobbyVRSearchOK";

        public const string RmiName_CG_RequestLobbyVRHelbramOK = "CG_RequestLobbyVRHelbramOK";

        public const string RmiName_CG_RequestLobbyNpcSkinOK = "CG_RequestLobbyNpcSkinOK";

        public const string RmiName_CG_RequestLobbyNpcGiftOK = "CG_RequestLobbyNpcGiftOK";

        public const string RmiName_CG_RequestLobbyKingAmberOK = "CG_RequestLobbyKingAmberOK";

        public const string RmiName_CG_RequestLobbyDropInteractiveOpenOK = "CG_RequestLobbyDropInteractiveOpenOK";

        public const string RmiName_CG_RequestLobbyUniqueInteractiveOpenOK = "CG_RequestLobbyUniqueInteractiveOpenOK";

        public const string RmiName_CG_RequestLobbyNpcTalkInfoOK = "CG_RequestLobbyNpcTalkInfoOK";

        public const string RmiName_CG_RequestLobbyNpcTalkChoiceOK = "CG_RequestLobbyNpcTalkChoiceOK";

        public const string RmiName_CG_RequestLobbyBarrelOK = "CG_RequestLobbyBarrelOK";

        public const string RmiName_CG_RequestLobbyBarrelRefillOK = "CG_RequestLobbyBarrelRefillOK";

        public const string RmiName_CG_RequestLobbyCleanTableOK = "CG_RequestLobbyCleanTableOK";

        public const string RmiName_CG_RequestLobbyServeBeerOK = "CG_RequestLobbyServeBeerOK";

        public const string RmiName_CG_RequestLobbyPlayJukeboxOK = "CG_RequestLobbyPlayJukeboxOK";

        public const string RmiName_CG_RequestLobbyElizabethTouchOK = "CG_RequestLobbyElizabethTouchOK";

        public const string RmiName_CG_RequestLobbyHawkAngerOK = "CG_RequestLobbyHawkAngerOK";

        public const string RmiName_CG_RequestAttendanceRewardOK = "CG_RequestAttendanceRewardOK";

        public const string RmiName_CG_RequestAttendanceEventRewardOK = "CG_RequestAttendanceEventRewardOK";

        public const string RmiName_CG_RequestCookingStartOK = "CG_RequestCookingStartOK";

        public const string RmiName_CG_RequestRecipeActiveOK = "CG_RequestRecipeActiveOK";

        public const string RmiName_CG_RequestCookingRecipeOrderInfoOK = "CG_RequestCookingRecipeOrderInfoOK";

        public const string RmiName_CG_RequestCookingRecipeOrderOK = "CG_RequestCookingRecipeOrderOK";

        public const string RmiName_CG_RequestCookingRecipeDisorderOK = "CG_RequestCookingRecipeDisorderOK";

        public const string RmiName_CG_RequestCookingRecipeCollectOK = "CG_RequestCookingRecipeCollectOK";

        public const string RmiName_CG_RequestCookingRecipeCollectOneSlotOK = "CG_RequestCookingRecipeCollectOneSlotOK";

        public const string RmiName_CG_RequestCookingUseCookingBuffOK = "CG_RequestCookingUseCookingBuffOK";

        public const string RmiName_CG_RequestGuestInfoOK = "CG_RequestGuestInfoOK";

        public const string RmiName_CG_RequestGuestChangeOK = "CG_RequestGuestChangeOK";

        public const string RmiName_CG_RequestGuestChangeTargetOK = "CG_RequestGuestChangeTargetOK";

        public const string RmiName_CG_RequestGuestTalkOK = "CG_RequestGuestTalkOK";

        public const string RmiName_CG_RequestGuestGiftOK = "CG_RequestGuestGiftOK";

        public const string RmiName_CG_RequestBirthdayNpcInfoOK = "CG_RequestBirthdayNpcInfoOK";

        public const string RmiName_CG_RequestRestRewardOK = "CG_RequestRestRewardOK";

        public const string RmiName_CG_RequestAttendanceFortuneEventRewardOK = "CG_RequestAttendanceFortuneEventRewardOK";

        public const string RmiName_CG_RequestEventCookingStartOK = "CG_RequestEventCookingStartOK";

        public const string RmiName_CG_RequestEventRecipeActiveOK = "CG_RequestEventRecipeActiveOK";

        public const string RmiName_CG_RequestLobbySetVisualTypeOK = "CG_RequestLobbySetVisualTypeOK";

        public const string RmiName_CG_RequestLobbySetAttendanceHeroOK = "CG_RequestLobbySetAttendanceHeroOK";

        public const string RmiName_CG_RequestBasePointGoldDonationOK = "CG_RequestBasePointGoldDonationOK";

        public const string RmiName_CG_RequestBasePointSetTriggerOK = "CG_RequestBasePointSetTriggerOK";

        public const string RmiName_CG_RequestBasePointDropInteractiveOpenOK = "CG_RequestBasePointDropInteractiveOpenOK";

        public const string RmiName_CG_RequestBasePointUniqueInteractiveOpenOK = "CG_RequestBasePointUniqueInteractiveOpenOK";

        public const string RmiName_CG_RequestBasePointDailyRewardOK = "CG_RequestBasePointDailyRewardOK";

        public const string RmiName_CG_RequestBasePointDonationEventRewardOK = "CG_RequestBasePointDonationEventRewardOK";

        public const string RmiName_CG_RequestBasePointDonationInfoOK = "CG_RequestBasePointDonationInfoOK";

        public const string RmiName_CG_RequestBasePointEventGoldDonationOK = "CG_RequestBasePointEventGoldDonationOK";

        public const string RmiName_CG_RequestEventBasepointInfoOK = "CG_RequestEventBasepointInfoOK";

        public const string RmiName_GC_NotifyDestroyInvite = "GC_NotifyDestroyInvite";

        public const string RmiName_CG_RequestDestroySetInviteOptionOK = "CG_RequestDestroySetInviteOptionOK";

        public const string RmiName_CG_RequestDestroyGetUserLoginListOK = "CG_RequestDestroyGetUserLoginListOK";

        public const string RmiName_CG_RequestDestroyGetFriendLoginListOK = "CG_RequestDestroyGetFriendLoginListOK";

        public const string RmiName_CG_RequestDestroyGetGuildLoginListOK = "CG_RequestDestroyGetGuildLoginListOK";

        public const string RmiName_CG_RequestDestroyGetReceivedInvitationListOK = "CG_RequestDestroyGetReceivedInvitationListOK";

        public const string RmiName_CG_RequestDestroyInviteOK = "CG_RequestDestroyInviteOK";

        public const string RmiName_CG_RequestDestroyRemoveInvitationOK = "CG_RequestDestroyRemoveInvitationOK";

        public const string RmiName_CG_RequestDestroyRemoveJoinInfoOK = "CG_RequestDestroyRemoveJoinInfoOK";

        public const string RmiName_CG_RequestDestroyCreateOK = "CG_RequestDestroyCreateOK";

        public const string RmiName_CG_RequestDestroyStartOK = "CG_RequestDestroyStartOK";

        public const string RmiName_CG_RequestDestroyBattleStartOK = "CG_RequestDestroyBattleStartOK";

        public const string RmiName_CG_RequestDestroyJoinOK = "CG_RequestDestroyJoinOK";

        public const string RmiName_CG_RequestDestroyClearOK = "CG_RequestDestroyClearOK";

        public const string RmiName_CG_RequestDestroyReJoinOK = "CG_RequestDestroyReJoinOK";

        public const string RmiName_CG_RequestDestroyRemoveOK = "CG_RequestDestroyRemoveOK";

        public const string RmiName_CG_RequestDestroyBattleEndOK = "CG_RequestDestroyBattleEndOK";

        public const string RmiName_CG_RequestDestroyInviteAIOK = "CG_RequestDestroyInviteAIOK";

        public const string RmiName_CG_RequestDestroyKickOutAIOK = "CG_RequestDestroyKickOutAIOK";

        public const string RmiName_CG_RequestEventDestroyCreateOK = "CG_RequestEventDestroyCreateOK";

        public const string RmiName_CG_RequestEventDestroyClearOK = "CG_RequestEventDestroyClearOK";

        public const string RmiName_CG_RequestEventDestroyStartOK = "CG_RequestEventDestroyStartOK";

        public const string RmiName_CG_RequestEventDestroyRemoveOK = "CG_RequestEventDestroyRemoveOK";

        public const string RmiName_CG_RequestEventChallengeDestroyCreateOK = "CG_RequestEventChallengeDestroyCreateOK";

        public const string RmiName_CG_RequestEventChallengeDestroyStartOK = "CG_RequestEventChallengeDestroyStartOK";

        public const string RmiName_CG_RequestEventChallengeDestroyClearOK = "CG_RequestEventChallengeDestroyClearOK";

        public const string RmiName_CG_RequestEventChallengeDestroyPointRefreshOK = "CG_RequestEventChallengeDestroyPointRefreshOK";

        public const string RmiName_CG_RequestEventChallengeDestroyUserRewardOK = "CG_RequestEventChallengeDestroyUserRewardOK";

        public const string RmiName_CG_RequestEventChallengeDestroyWorldRewardOK = "CG_RequestEventChallengeDestroyWorldRewardOK";

        public const string RmiName_CG_RequestDisasterDestroyCreateOK = "CG_RequestDisasterDestroyCreateOK";

        public const string RmiName_CG_RequestDisasterDestroyStartOK = "CG_RequestDisasterDestroyStartOK";

        public const string RmiName_CG_RequestDisasterDestroyClearOK = "CG_RequestDisasterDestroyClearOK";

        public const string RmiName_CG_RequestEventDisasterDestroyCreateOK = "CG_RequestEventDisasterDestroyCreateOK";

        public const string RmiName_CG_RequestEventDisasterDestroyStartOK = "CG_RequestEventDisasterDestroyStartOK";

        public const string RmiName_CG_RequestEventDisasterDestroyClearOK = "CG_RequestEventDisasterDestroyClearOK";

        public const string RmiName_CG_RequestEventDisasterDestroyLeaveOK = "CG_RequestEventDisasterDestroyLeaveOK";

        public const string RmiName_CG_RequestDestroyOtherPlayerTeamInfoOK = "CG_RequestDestroyOtherPlayerTeamInfoOK";

        public const string RmiName_CG_RequestDestroyLiveJoinRegisterOK = "CG_RequestDestroyLiveJoinRegisterOK";

        public const string RmiName_CG_RequestDestroyLiveJoinUnregisterOK = "CG_RequestDestroyLiveJoinUnregisterOK";

        public const string RmiName_CG_RequestDestroyLiveJoinListOK = "CG_RequestDestroyLiveJoinListOK";

        public const string RmiName_CG_RequestDestroyLiveJoinInviteOK = "CG_RequestDestroyLiveJoinInviteOK";

        public const string RmiName_CG_RequestDestroyLiveJoinAbortInvitationOK = "CG_RequestDestroyLiveJoinAbortInvitationOK";

        public const string RmiName_CG_RequestDestroyLiveJoinRejectInvitationOK = "CG_RequestDestroyLiveJoinRejectInvitationOK";

        public const string RmiName_GC_NotifyDestroyLiveJoinInvite = "GC_NotifyDestroyLiveJoinInvite";

        public const string RmiName_GC_NotifyDestroyLiveJoinAbortInvitation = "GC_NotifyDestroyLiveJoinAbortInvitation";

        public const string RmiName_GC_NotifyDestroyLiveJoinRejectInvitation = "GC_NotifyDestroyLiveJoinRejectInvitation";

        public const string RmiName_CG_RequestDestroyRoomInfoOK = "CG_RequestDestroyRoomInfoOK";

        public const string RmiName_CG_RequestFriendListOK = "CG_RequestFriendListOK";

        public const string RmiName_CG_RequestFriendGuildInfoOK = "CG_RequestFriendGuildInfoOK";

        public const string RmiName_CG_RequestFriendApplySendListOK = "CG_RequestFriendApplySendListOK";

        public const string RmiName_CG_RequestFriendApplyReceiveListOK = "CG_RequestFriendApplyReceiveListOK";

        public const string RmiName_CG_RequestFriendApplySendOK = "CG_RequestFriendApplySendOK";

        public const string RmiName_CG_RequestFriendApplyRejectOK = "CG_RequestFriendApplyRejectOK";

        public const string RmiName_CG_RequestFriendApplyReceiveAcceptOK = "CG_RequestFriendApplyReceiveAcceptOK";

        public const string RmiName_CG_RequestFriendApplyReceiveAcceptListOK = "CG_RequestFriendApplyReceiveAcceptListOK";

        public const string RmiName_CG_RequestFriendApplyReceiveRefuseOK = "CG_RequestFriendApplyReceiveRefuseOK";

        public const string RmiName_CG_RequestFriendApplyReceiveRefuseListOK = "CG_RequestFriendApplyReceiveRefuseListOK";

        public const string RmiName_CG_RequestFriendRemoveOK = "CG_RequestFriendRemoveOK";

        public const string RmiName_CG_RequestFriendSearchOK = "CG_RequestFriendSearchOK";

        public const string RmiName_CG_RequestFriendVisitOK = "CG_RequestFriendVisitOK";

        public const string RmiName_CG_RequestFriendPointSendOK = "CG_RequestFriendPointSendOK";

        public const string RmiName_CG_RequestFriendPointSendAllOK = "CG_RequestFriendPointSendAllOK";

        public const string RmiName_CG_RequestFriendLobbyInfoOK = "CG_RequestFriendLobbyInfoOK";

        public const string RmiName_CG_RequestFriendCookingRecipeInfoOK = "CG_RequestFriendCookingRecipeInfoOK";

        public const string RmiName_CG_RequestFriendCookingEatOK = "CG_RequestFriendCookingEatOK";

        public const string RmiName_CG_RequestFriendCookingEatFriendListOK = "CG_RequestFriendCookingEatFriendListOK";

        public const string RmiName_CG_RequestRefreshRecommendFriendListOK = "CG_RequestRefreshRecommendFriendListOK";

        public const string RmiName_CG_RequestAPRechargeByUseItemOK = "CG_RequestAPRechargeByUseItemOK";

        public const string RmiName_CG_RequestFoodBuffAutoUseOnOffOK = "CG_RequestFoodBuffAutoUseOnOffOK";

        public const string RmiName_CG_RequestItemUseRankExpOK = "CG_RequestItemUseRankExpOK";

        public const string RmiName_CG_RequestItemUseBoxOpenOK = "CG_RequestItemUseBoxOpenOK";

        public const string RmiName_CG_RequestItemUseRecipeExpOK = "CG_RequestItemUseRecipeExpOK";

        public const string RmiName_CG_RequestItemUseWeeklyKeyBoxOK = "CG_RequestItemUseWeeklyKeyBoxOK";

        public const string RmiName_CG_RequestItemUseWeaponTicketOK = "CG_RequestItemUseWeaponTicketOK";

        public const string RmiName_CG_RequestItemUseMusicOK = "CG_RequestItemUseMusicOK";

        public const string RmiName_CG_RequestItemUseBuffOK = "CG_RequestItemUseBuffOK";

        public const string RmiName_CG_RequestTutorialAddStepOK = "CG_RequestTutorialAddStepOK";

        public const string RmiName_CG_RequestTutorialSetFlagOK = "CG_RequestTutorialSetFlagOK";

        public const string RmiName_CG_RequestTutorialHeroFlagOK = "CG_RequestTutorialHeroFlagOK";

        public const string RmiName_CG_RequestTutorialGambleShopBuyOK = "CG_RequestTutorialGambleShopBuyOK";

        public const string RmiName_CG_RequestBattleTutorialInfoOK = "CG_RequestBattleTutorialInfoOK";

        public const string RmiName_CG_RequestBattleTutorialSetOK = "CG_RequestBattleTutorialSetOK";

        public const string RmiName_CG_RequestFriendlyMatchCreateOK = "CG_RequestFriendlyMatchCreateOK";

        public const string RmiName_CG_RequestFriendlyMatchFriendListOK = "CG_RequestFriendlyMatchFriendListOK";

        public const string RmiName_CG_RequestFriendlyMatchInviteOK = "CG_RequestFriendlyMatchInviteOK";

        public const string RmiName_CG_RequestFriendlyMatchReceivedInviteListOK = "CG_RequestFriendlyMatchReceivedInviteListOK";

        public const string RmiName_CG_RequestFriendlyMatchInviteAcceptOK = "CG_RequestFriendlyMatchInviteAcceptOK";

        public const string RmiName_CG_RequestFriendlyMatchInviteRejectOK = "CG_RequestFriendlyMatchInviteRejectOK";

        public const string RmiName_CG_RequestFriendlyMatchStartOK = "CG_RequestFriendlyMatchStartOK";

        public const string RmiName_CG_RequestFriendlyMatchBattleStartOK = "CG_RequestFriendlyMatchBattleStartOK";

        public const string RmiName_CG_RequestFriendlyMatchClearOK = "CG_RequestFriendlyMatchClearOK";

        public const string RmiName_CG_RequestFriendlyMatchExitOK = "CG_RequestFriendlyMatchExitOK";

        public const string RmiName_GC_NotifyFriendlyMatchInvite = "GC_NotifyFriendlyMatchInvite";

        public const string RmiName_CG_RequestFriendlyMatchSetInviteOptionOK = "CG_RequestFriendlyMatchSetInviteOptionOK";

        public const string RmiName_CG_RequestEventMissionGetAchievePointRewardOK = "CG_RequestEventMissionGetAchievePointRewardOK";

        public const string RmiName_CG_RequestEventMissionCompleteRewardOK = "CG_RequestEventMissionCompleteRewardOK";

        public const string RmiName_CG_RequestEventMissionInfoOK = "CG_RequestEventMissionInfoOK";

        public const string RmiName_CG_RequestLobbyFurnitureRegistOK = "CG_RequestLobbyFurnitureRegistOK";

        public const string RmiName_CG_RequestUserMusicEditOK = "CG_RequestUserMusicEditOK";

        public const string RmiName_CG_RequestEventSeasonPassInfoOK = "CG_RequestEventSeasonPassInfoOK";

        public const string RmiName_CG_RequestEventSeasonPassRankUpRewardOK = "CG_RequestEventSeasonPassRankUpRewardOK";

        public const string RmiName_CG_RequestEventSeasonPassRankUpRewardAllOK = "CG_RequestEventSeasonPassRankUpRewardAllOK";

        public const string RmiName_CG_RequestEventSeasonPassRankBuyOK = "CG_RequestEventSeasonPassRankBuyOK";

        public const string RmiName_CG_RequestEventExchangeOK = "CG_RequestEventExchangeOK";

        public const string RmiName_CG_RequestEventPlayCountRewardOK = "CG_RequestEventPlayCountRewardOK";

        public const string RmiName_CG_RequestWestSideServerInfo_RandomOK = "CG_RequestWestSideServerInfo_RandomOK";

        public const string RmiName_CG_RequestWestSideServerInfo_FixedOK = "CG_RequestWestSideServerInfo_FixedOK";

        public const string RmiName_CG_RequestWestSideServerInfo_RecommandOK = "CG_RequestWestSideServerInfo_RecommandOK";

        public const string RmiName_CG_RequestWestSide_PlayerInfoOK = "CG_RequestWestSide_PlayerInfoOK";

        public const string RmiName_CG_RequestWestSide_PlayerteamInfoOK = "CG_RequestWestSide_PlayerteamInfoOK";

        public const string RmiName_CG_RequestWestSide_PlayerGuildInfoOK = "CG_RequestWestSide_PlayerGuildInfoOK";

        public const string RmiName_CG_RequestWorldChattingChannelOK = "CG_RequestWorldChattingChannelOK";

        public const string RmiName_CG_RequestWestSideServerInfo_RandomNotify = "CG_RequestWestSideServerInfo_RandomNotify";

        public const string RmiName_CG_RequestWestSideServerInfo_FixedNotify = "CG_RequestWestSideServerInfo_FixedNotify";

        public const string RmiName_CG_RequestEventExchangeInfoOK = "CG_RequestEventExchangeInfoOK";

        public const string RmiName_CG_RequestEventExchangeBoxGachaInfoOK = "CG_RequestEventExchangeBoxGachaInfoOK";

        public const string RmiName_CG_RequestEventExchangeBoxGachaPickupOK = "CG_RequestEventExchangeBoxGachaPickupOK";

        public const string RmiName_CG_RequestEventExchangeBoxGachaResetOK = "CG_RequestEventExchangeBoxGachaResetOK";

        public const string RmiName_CG_RequestEventPaybackRewardOK = "CG_RequestEventPaybackRewardOK";

        public const string RmiName_CG_RequestEventSnsShareProgressOK = "CG_RequestEventSnsShareProgressOK";

        public const string RmiName_CG_RequestEventSnsShareRewardOK = "CG_RequestEventSnsShareRewardOK";

        public const string RmiName_CG_RequestGagueEventInfoOK = "CG_RequestGagueEventInfoOK";

        public const string RmiName_CG_RequestGagueEventChargeOK = "CG_RequestGagueEventChargeOK";

        public const string RmiName_CG_RequestGagueEventRewardOK = "CG_RequestGagueEventRewardOK";

        public const string RmiName_CG_RequestGagueEventResetOK = "CG_RequestGagueEventResetOK";

        public const string RmiName_CG_RequestEventLadderRewardOK = "CG_RequestEventLadderRewardOK";

        public const string RmiName_CG_RequestEventLobbyGiftRewardOK = "CG_RequestEventLobbyGiftRewardOK";

        public const string RmiName_CG_RequestEventTimeMissionInfoOK = "CG_RequestEventTimeMissionInfoOK";

        public const string RmiName_CG_RequestEventTimeMissionStartOK = "CG_RequestEventTimeMissionStartOK";

        public const string RmiName_CG_RequestEventLobbyDecorationRewardOK = "CG_RequestEventLobbyDecorationRewardOK";

        public const string RmiName_CG_RequestEventPvpWinCountRewardOK = "CG_RequestEventPvpWinCountRewardOK";

        public const string RmiName_CG_RequestEventChapterClearRewardOK = "CG_RequestEventChapterClearRewardOK";

        public const string RmiName_CG_RequestRegistPlayTitleOK = "CG_RequestRegistPlayTitleOK";

        public const string RmiName_CG_RequestPlayTitleMissionRewardOK = "CG_RequestPlayTitleMissionRewardOK";

        public const string RmiName_CG_RequestPlayTitleInfoOK = "CG_RequestPlayTitleInfoOK";

        public const string RmiName_CG_RequestEventBingoInfoOK = "CG_RequestEventBingoInfoOK";

        public const string RmiName_CG_RequestEventBingoRandomNumberOK = "CG_RequestEventBingoRandomNumberOK";

        public const string RmiName_CG_RequestEventBingoExchangeNumberOK = "CG_RequestEventBingoExchangeNumberOK";

        public const string RmiName_CG_RequestEventBingoResetOK = "CG_RequestEventBingoResetOK";

        public const string RmiName_CG_RequestSubdueCreateOK = "CG_RequestSubdueCreateOK";

        public const string RmiName_CG_RequestSubdueJoinOK = "CG_RequestSubdueJoinOK";

        public const string RmiName_CG_RequestSubdueOwnerGameStartOK = "CG_RequestSubdueOwnerGameStartOK";

        public const string RmiName_CG_RequestSubdueLoadingCompleteOK = "CG_RequestSubdueLoadingCompleteOK";

        public const string RmiName_CG_RequestSubdueOnlineFriendListOK = "CG_RequestSubdueOnlineFriendListOK";

        public const string RmiName_CG_RequestSubdueOnlineGuildMemberListOK = "CG_RequestSubdueOnlineGuildMemberListOK";

        public const string RmiName_CG_RequestSubdueOnlineUserRankRangeListOK = "CG_RequestSubdueOnlineUserRankRangeListOK";

        public const string RmiName_CG_RequestSubdueInvitationReceiveListOK = "CG_RequestSubdueInvitationReceiveListOK";

        public const string RmiName_CG_RequestSubdueRemoveInvitationOK = "CG_RequestSubdueRemoveInvitationOK";

        public const string RmiName_CG_RequestSubdueInviteOK = "CG_RequestSubdueInviteOK";

        public const string RmiName_CG_RequestSubdueRewardOK = "CG_RequestSubdueRewardOK";

        public const string RmiName_CG_NotifySubdueInviteOK = "CG_NotifySubdueInviteOK";

        public const string RmiName_CG_RequestPatrolMissionInfoOK = "CG_RequestPatrolMissionInfoOK";

        public const string RmiName_CG_RequestPatrolMissionStartOK = "CG_RequestPatrolMissionStartOK";

        public const string RmiName_CG_RequestPatrolMissionCancelOK = "CG_RequestPatrolMissionCancelOK";

        public const string RmiName_CG_RequestPatrolMissionRewardOK = "CG_RequestPatrolMissionRewardOK";

        public const string RmiName_CG_RequestPatrolMissionTimeRewardOK = "CG_RequestPatrolMissionTimeRewardOK";

        public const string RmiName_CG_RequestEventExchangeCardInfoOK = "CG_RequestEventExchangeCardInfoOK";

        public const string RmiName_CG_RequestEventExchangeCardSetupOK = "CG_RequestEventExchangeCardSetupOK";

        public const string RmiName_CG_RequestEventExchangeCardChoiceManualOK = "CG_RequestEventExchangeCardChoiceManualOK";

        public const string RmiName_CG_RequestEventExchangeCardChoiceAutoOK = "CG_RequestEventExchangeCardChoiceAutoOK";

        public const string RmiName_CG_RequestEventExchangeCardResetOK = "CG_RequestEventExchangeCardResetOK";

        public const string RmiName_CG_RequestEventCraftExchangeOK = "CG_RequestEventCraftExchangeOK";

        public const string RmiName_CG_RequestEventProvisionProvideOK = "CG_RequestEventProvisionProvideOK";

        public const string RmiName_CG_RequestEventProvisionGetFinalRewardOK = "CG_RequestEventProvisionGetFinalRewardOK";

        public const string RmiName_CG_RequestEventExchangeKingAmberOK = "CG_RequestEventExchangeKingAmberOK";

        public const string RmiName_CG_RequestEventTreasureHuntInfoOK = "CG_RequestEventTreasureHuntInfoOK";

        public const string RmiName_CG_RequestEventTreasureHuntStartOK = "CG_RequestEventTreasureHuntStartOK";

        public const string RmiName_CG_RequestEventTreasureHuntMoveDiceOK = "CG_RequestEventTreasureHuntMoveDiceOK";

        public const string RmiName_CG_RequestEventTreasureHuntMoveChoosePointOK = "CG_RequestEventTreasureHuntMoveChoosePointOK";

        public const string RmiName_CG_RequestEventTreasureHuntChooseRewardOK = "CG_RequestEventTreasureHuntChooseRewardOK";

        public const string RmiName_CG_RequestEventTreasureHuntCompleteOK = "CG_RequestEventTreasureHuntCompleteOK";

        public const string RmiName_CG_RequestEventTreasureHuntCompleteRewardOK = "CG_RequestEventTreasureHuntCompleteRewardOK";

        public const string RmiName_CG_RequestEventTreasureHuntMissionOK = "CG_RequestEventTreasureHuntMissionOK";

        public const string RmiName_CG_RequestNMFunTalkKitLoginOK = "CG_RequestNMFunTalkKitLoginOK";

        public const string RmiName_CG_RequestNMFunTalkKitCreateRoomOK = "CG_RequestNMFunTalkKitCreateRoomOK";

        public const string RmiName_CG_RequestNMFunTalkKitPasswordOK = "CG_RequestNMFunTalkKitPasswordOK";

        public const string RmiName_GC_NotifyNMFunTalkKitGuildRoomJoin = "GC_NotifyNMFunTalkKitGuildRoomJoin";

        public const string RmiName_GC_NotifyNMFunTalkKitGuildRoomLeave = "GC_NotifyNMFunTalkKitGuildRoomLeave";

        public const string RmiName_GC_NotifyChatInfo = "GC_NotifyChatInfo";

        public const string RmiName_CG_RequestEventGamblePaybackRewardOK = "CG_RequestEventGamblePaybackRewardOK";

        public const string RmiName_CG_RequestEventRandomBoxInfoOK = "CG_RequestEventRandomBoxInfoOK";

        public const string RmiName_CG_RequestEventRandomBoxCreateOK = "CG_RequestEventRandomBoxCreateOK";

        public const string RmiName_CG_RequestEventRandomBoxRewardOK = "CG_RequestEventRandomBoxRewardOK";

        public const string RmiName_CG_RequestSeasonpassShopInfoOK = "CG_RequestSeasonpassShopInfoOK";

        public const string RmiName_CG_RequestSeasonpassShopBuyOK = "CG_RequestSeasonpassShopBuyOK";

        public const string RmiName_CG_Request_EventPredict_User_InfoOK = "CG_Request_EventPredict_User_InfoOK";

        public const string RmiName_CG_Request_EventPredict_StartOK = "CG_Request_EventPredict_StartOK";

        public const string RmiName_CG_Request_EventPredict_Special_RewardOK = "CG_Request_EventPredict_Special_RewardOK";

        public const string RmiName_CG_Request_EventAuto_OnOK = "CG_Request_EventAuto_OnOK";

        public const string RmiName_CG_Request_EventAuto_ResultOK = "CG_Request_EventAuto_ResultOK";

        public const string RmiName_CG_Request_EventAuto_Battle_EndOK = "CG_Request_EventAuto_Battle_EndOK";

        public const string RmiName_CG_Request_EventAuto_HawkUpgradeOK = "CG_Request_EventAuto_HawkUpgradeOK";

        public const string RmiName_CG_Request_EventAuto_RewardOK = "CG_Request_EventAuto_RewardOK";

        public const string RmiName_CG_Request_EventAuto_Box_Slot_UpgradeOK = "CG_Request_EventAuto_Box_Slot_UpgradeOK";

        public const string RmiName_CG_Request_EventAuto_SpecialRewardOK = "CG_Request_EventAuto_SpecialRewardOK";

        public const string RmiName_CG_RequestArtifactCardPackOpenOK = "CG_RequestArtifactCardPackOpenOK";

        public const string RmiName_CG_RequestArtifactUnionUpgradeOK = "CG_RequestArtifactUnionUpgradeOK";

        public const string RmiName_CG_RequestArtifactTeamChangeOK = "CG_RequestArtifactTeamChangeOK";

        public const string RmiName_CG_RequestArtifactDescentBossTeamChangeOK = "CG_RequestArtifactDescentBossTeamChangeOK";

        public const string RmiName_CG_RequestArtifactTeamInfoAllOK = "CG_RequestArtifactTeamInfoAllOK";

        public const string RmiName_CG_RequestEventArtifactWishSaveOK = "CG_RequestEventArtifactWishSaveOK";

        public const string RmiName_CG_RequestEventArtifactWishCardPackOpenOK = "CG_RequestEventArtifactWishCardPackOpenOK";

        public const string RmiName_CG_RequestArtifactDemonLordTeamChangeOK = "CG_RequestArtifactDemonLordTeamChangeOK";

        public const string RmiName_CG_RequestNorthGrimBookRewardOK = "CG_RequestNorthGrimBookRewardOK";

        public const string RmiName_CG_RequestEventCheerGroupOK = "CG_RequestEventCheerGroupOK";

        public const string RmiName_CG_RequestEventCheerGaugeRewardOK = "CG_RequestEventCheerGaugeRewardOK";

        public const string RmiName_CG_RequestEventCheerFinishRewardOK = "CG_RequestEventCheerFinishRewardOK";

        public const string RmiName_CG_RequestEventDiceInfoOK = "CG_RequestEventDiceInfoOK";

        public const string RmiName_CG_RequestEventDiceRollOK = "CG_RequestEventDiceRollOK";

        public const string RmiName_CG_RequestEventDiceRollEventHandleOK = "CG_RequestEventDiceRollEventHandleOK";

        public const string RmiName_CG_RequestEventDiceRaceRewardOK = "CG_RequestEventDiceRaceRewardOK";

        public const string RmiName_CG_RequestConstellationStoneOpenOK = "CG_RequestConstellationStoneOpenOK";

        public const string RmiName_CG_RequestConstellationStoneOptionValueChangeOK = "CG_RequestConstellationStoneOptionValueChangeOK";

        public const string RmiName_CG_RequestConstellationStoneOptionValueChangeApplyOK = "CG_RequestConstellationStoneOptionValueChangeApplyOK";

        public const string RmiName_CG_RequestMaterialFusionOK = "CG_RequestMaterialFusionOK";

        public const string RmiName_CG_RequestEventSkinOneStepEvolutionOK = "CG_RequestEventSkinOneStepEvolutionOK";

        public const string RmiName_CG_RequestEventPuzzleInfoOK = "CG_RequestEventPuzzleInfoOK";

        public const string RmiName_CG_RequestEventPuzzleInfoStartOK = "CG_RequestEventPuzzleInfoStartOK";

        public const string RmiName_CG_RequestEventPuzzleInfoEndOK = "CG_RequestEventPuzzleInfoEndOK";

        public const string RmiName_CG_RequestEventPuzzleInfoBlockRewardOK = "CG_RequestEventPuzzleInfoBlockRewardOK";

        public const string RmiName_CG_RequestEventPuzzleInfoTotalRewardOK = "CG_RequestEventPuzzleInfoTotalRewardOK";

        public const string RmiName_CG_RequestRandomLuckybagInfoOK = "CG_RequestRandomLuckybagInfoOK";

        public const string RmiName_CG_RequestRandomLuckybagOpenOK = "CG_RequestRandomLuckybagOpenOK";

        public const string RmiName_CG_RequestRandomLuckybagLastRewardOK = "CG_RequestRandomLuckybagLastRewardOK";

        public const string RmiName_CG_RequestEventStepupMissionStartOK = "CG_RequestEventStepupMissionStartOK";

        public const string RmiName_CG_RequestEventStepupMissionGroupClearOK = "CG_RequestEventStepupMissionGroupClearOK";

        public const string RmiName_CG_RequestFriendlyMatchObserveCreateOK = "CG_RequestFriendlyMatchObserveCreateOK";

        public const string RmiName_CG_RequestFriendlyMatchObserveFriendListOK = "CG_RequestFriendlyMatchObserveFriendListOK";

        public const string RmiName_CG_RequestFriendlyMatchObserveInviteOK = "CG_RequestFriendlyMatchObserveInviteOK";

        public const string RmiName_CG_RequestFriendlyMatchObserveReceivedInviteListOK = "CG_RequestFriendlyMatchObserveReceivedInviteListOK";

        public const string RmiName_CG_RequestFriendlyMatchObserveInviteAcceptOK = "CG_RequestFriendlyMatchObserveInviteAcceptOK";

        public const string RmiName_CG_RequestFriendlyMatchObserveInviteRejectOK = "CG_RequestFriendlyMatchObserveInviteRejectOK";

        public const string RmiName_CG_RequestFriendlyMatchObserveStartOK = "CG_RequestFriendlyMatchObserveStartOK";

        public const string RmiName_CG_RequestFriendlyMatchObserveBattleStartOK = "CG_RequestFriendlyMatchObserveBattleStartOK";

        public const string RmiName_CG_RequestFriendlyMatchObserveClearOK = "CG_RequestFriendlyMatchObserveClearOK";

        public const string RmiName_CG_RequestFriendlyMatchObserveExitOK = "CG_RequestFriendlyMatchObserveExitOK";

        public const string RmiName_GC_NotifyFriendlyMatchObserveInvite = "GC_NotifyFriendlyMatchObserveInvite";

        public const string RmiName_CG_RequestFriendlyMatchObserveSetInviteOptionOK = "CG_RequestFriendlyMatchObserveSetInviteOptionOK";

        public const string RmiName_CG_RequestEventGambleWishSaveOK = "CG_RequestEventGambleWishSaveOK";

        public const string RmiName_CG_RequestEventMazeInfoOK = "CG_RequestEventMazeInfoOK";

        public const string RmiName_CG_RequestEventMazeStartOK = "CG_RequestEventMazeStartOK";

        public const string RmiName_CG_RequestEventMazeSelectStartHeroesOK = "CG_RequestEventMazeSelectStartHeroesOK";

        public const string RmiName_CG_RequestEventMazeInitializeOK = "CG_RequestEventMazeInitializeOK";

        public const string RmiName_CG_RequestEventMazeMoveOK = "CG_RequestEventMazeMoveOK";

        public const string RmiName_CG_RequestEventMazePassiveSelectOK = "CG_RequestEventMazePassiveSelectOK";

        public const string RmiName_CG_RequestEventMazeSeasonRewardOK = "CG_RequestEventMazeSeasonRewardOK";

        public const string RmiName_CG_RequestEventMazeChangeSlotOK = "CG_RequestEventMazeChangeSlotOK";

        public const string RmiName_CG_RequestEventMazeRefreshSelectableHeroesOK = "CG_RequestEventMazeRefreshSelectableHeroesOK";

        public const string RmiName_CG_RequestEventMazeShopBuyOK = "CG_RequestEventMazeShopBuyOK";

        public const string RmiName_CG_RequestEventMazeShopBuffBuyOK = "CG_RequestEventMazeShopBuffBuyOK";

        public const string RmiName_CG_RequestEventMoleGameInfoOK = "CG_RequestEventMoleGameInfoOK";

        public const string RmiName_CG_RequestEventMoleGameStartOK = "CG_RequestEventMoleGameStartOK";

        public const string RmiName_CG_RequestEventMoleGameEndOK = "CG_RequestEventMoleGameEndOK";

        public const string RmiName_CG_RequestEventMoleGameRecordRewardOK = "CG_RequestEventMoleGameRecordRewardOK";

        public const string RmiName_CG_RequestEventMoleGameTotalRewardOK = "CG_RequestEventMoleGameTotalRewardOK";

        public const string RmiName_CG_RequestEventMoleGameRankInfoOK = "CG_RequestEventMoleGameRankInfoOK";

        public const string RmiName_CG_RequestEventLobbyBuffInfoOK = "CG_RequestEventLobbyBuffInfoOK";

        public const string RmiName_CG_RequestEventLobbyBuffBuyOK = "CG_RequestEventLobbyBuffBuyOK";

        public const string RmiName_GC_NotifyEventLobbyBuffInfo = "GC_NotifyEventLobbyBuffInfo";

        public const string RmiName_CG_RequestEventBoxWishInfoOK = "CG_RequestEventBoxWishInfoOK";

        public const string RmiName_CG_RequestEventBoxWishSetOK = "CG_RequestEventBoxWishSetOK";

        public const string RmiName_CG_RequestEventBoxWishPickUpOK = "CG_RequestEventBoxWishPickUpOK";

        public const string RmiName_CG_RequestEventBoxWishResetOK = "CG_RequestEventBoxWishResetOK";

        public const string RmiName_CG_RequestConstellationStoneLockOK = "CG_RequestConstellationStoneLockOK";

        public const string RmiName_CG_RequestEventConquestInfoOK = "CG_RequestEventConquestInfoOK";

        public const string RmiName_CG_RequestEventConquestProductionDepotCompleteRewardOK = "CG_RequestEventConquestProductionDepotCompleteRewardOK";

        public const string RmiName_CG_RequestEventConquestProductionDepotUpgradeOK = "CG_RequestEventConquestProductionDepotUpgradeOK";

        public const string RmiName_CG_RequestEventConquestProductionDepotUpgradeRewardOK = "CG_RequestEventConquestProductionDepotUpgradeRewardOK";

        public const string RmiName_CG_RequestEventConquestAreaAttackOK = "CG_RequestEventConquestAreaAttackOK";

        public const string RmiName_CG_RequestEventConquestAreaFeverAttackOK = "CG_RequestEventConquestAreaFeverAttackOK";

        public const string RmiName_CG_RequestEventConquestAreaAttackRewardOK = "CG_RequestEventConquestAreaAttackRewardOK";

        public const string RmiName_CG_RequestEventConquestMakeFeverItemOK = "CG_RequestEventConquestMakeFeverItemOK";

        public const string RmiName_CG_RequestEventConquestUpdateSceneIndexOK = "CG_RequestEventConquestUpdateSceneIndexOK";

        public const string RmiName_CG_RequestEventConquestUpdateUnitPosOK = "CG_RequestEventConquestUpdateUnitPosOK";

        public const string RmiName_CG_RequestEventRoadInfoOK = "CG_RequestEventRoadInfoOK";

        public const string RmiName_CG_RequestEventRoadWalkOK = "CG_RequestEventRoadWalkOK";

        public const string RmiName_CG_RequestEventRoadRewardOK = "CG_RequestEventRoadRewardOK";

        public const string RmiName_CG_RequestEventRoadSelectOK = "CG_RequestEventRoadSelectOK";

        public const string RmiName_CG_RequestEventGambleBoxInfoOK = "CG_RequestEventGambleBoxInfoOK";

        public const string RmiName_CG_RequestEventGambleBoxPickupOK = "CG_RequestEventGambleBoxPickupOK";

        public const string RmiName_CG_RequestEventGambleBoxResetOK = "CG_RequestEventGambleBoxResetOK";

        public const string RmiName_CG_RequestEventLuckyBoxInfoOK = "CG_RequestEventLuckyBoxInfoOK";

        public const string RmiName_CG_RequestEventLuckyBoxRewardOK = "CG_RequestEventLuckyBoxRewardOK";

        public const string RmiName_CG_RequestEventMazeRefreshSelectablePassivesOK = "CG_RequestEventMazeRefreshSelectablePassivesOK";

        public const string RmiName_CG_RequestEventMazeSaveTeamOK = "CG_RequestEventMazeSaveTeamOK";

        public const string RmiName_CG_RequestEventMazeSelectClearBonusOK = "CG_RequestEventMazeSelectClearBonusOK";

        public const string RmiName_CG_RequestEventMazeStartSavedTeamOK = "CG_RequestEventMazeStartSavedTeamOK";

        public const string RmiName_CG_RequestGuildOrderMissioInfoOK = "CG_RequestGuildOrderMissioInfoOK";

        public const string RmiName_CG_RequestGuildOrderMissionClearOK = "CG_RequestGuildOrderMissionClearOK";

        public const string RmiName_CG_RequestGuildOrderMissionMileageBonusRewardOK = "CG_RequestGuildOrderMissionMileageBonusRewardOK";

        public const string RmiName_CG_RequestEventConfirmGameInfoOK = "CG_RequestEventConfirmGameInfoOK";

        public const string RmiName_CG_RequestEventConfirmGameStartOK = "CG_RequestEventConfirmGameStartOK";

        public const string RmiName_CG_RequestEventConfirmGameEndOK = "CG_RequestEventConfirmGameEndOK";

        public const string RmiName_CG_RequestEventConfirmGameRecordRewardOK = "CG_RequestEventConfirmGameRecordRewardOK";

        public const string RmiName_CG_RequestEventConfirmGameTotalRewardOK = "CG_RequestEventConfirmGameTotalRewardOK";

        public const string RmiName_CG_RequestHeroLeagueInfoOK = "CG_RequestHeroLeagueInfoOK";

        public const string RmiName_CG_RequestHeroLeagueSelectLeagueOK = "CG_RequestHeroLeagueSelectLeagueOK";

        public const string RmiName_CG_RequestHeroLeagueInitializeOK = "CG_RequestHeroLeagueInitializeOK";

        public const string RmiName_CG_RequestHeroLeagueInitUserGroupOK = "CG_RequestHeroLeagueInitUserGroupOK";

        public const string RmiName_CG_RequestHeroLeagueGagueRewardOK = "CG_RequestHeroLeagueGagueRewardOK";

        public const string RmiName_CG_RequestHeroLeagueAttackTeamChangeOK = "CG_RequestHeroLeagueAttackTeamChangeOK";

        public const string RmiName_CG_RequestHeroLeagueStageStartOK = "CG_RequestHeroLeagueStageStartOK";

        public const string RmiName_CG_RequestHeroLeagueStageClearOK = "CG_RequestHeroLeagueStageClearOK";

        public const string RmiName_CG_RequestHeroLeagueStageRejoinOK = "CG_RequestHeroLeagueStageRejoinOK";

        public const string RmiName_CG_RequestHeroLeagueStageRejoinCancelOK = "CG_RequestHeroLeagueStageRejoinCancelOK";

        public const string RmiName_CG_RequestHeroLeagueScoreRewardOK = "CG_RequestHeroLeagueScoreRewardOK";

        public const string RmiName_CG_RequestEventBalloonDartInfoOK = "CG_RequestEventBalloonDartInfoOK";

        public const string RmiName_CG_RequestEventBalloonDartThrowOK = "CG_RequestEventBalloonDartThrowOK";

        public const string RmiName_CG_RequestEventBalloonDartChanceOK = "CG_RequestEventBalloonDartChanceOK";

        public const string RmiName_CG_RequestEventBalloonDartStepUpOK = "CG_RequestEventBalloonDartStepUpOK";

        public const string RmiName_CG_RequestEventBalloonDartStepRewardOK = "CG_RequestEventBalloonDartStepRewardOK";

        public const string RmiName_CG_RequestEventBalloonDartTotalRewardOK = "CG_RequestEventBalloonDartTotalRewardOK";

        public const string RmiName_CG_RequestChatOK = "CG_RequestChatOK";

        public const string RmiName_CG_RequestChatChannelEnterOK = "CG_RequestChatChannelEnterOK";

        public const string RmiName_GC_NotifyChat = "GC_NotifyChat";

        public const string RmiName_GC_NotifyChatLog = "GC_NotifyChatLog";

        public const string RmiName_GC_NotifyChatChannelEnter = "GC_NotifyChatChannelEnter";

        public const string RmiName_First = "CG_CommonCancel";

        public delegate bool CG_CommonCancelDelegate(HostID remote, RmiContext rmiContext, RmiID packetID, string packetName, PacketError error, InvalidRequestType invalidRequesttype, bool isSimpleMessageBox);

        public delegate bool GC_NotifyUserLevelUpDelegate(HostID remote, RmiContext rmiContext, UserLevelUpResult levelUpResult, List<UserPackageMissionInfo> userPackageMissionInfoList);

        public delegate bool CG_FrozenAssetCancelDelegate(HostID remote, RmiContext rmiContext, RmiID packetID, string packetName, int frozenSEQ);

        public delegate bool CG_RequestChannelUserInfoOKDelegate(HostID remote, RmiContext rmiContext, ChannelUserInfo channelUserInfo);

        public delegate bool CG_RequestHeartBeatOKDelegate(HostID remote, RmiContext rmiContext, List<APInfo> apInfoList);

        public delegate bool CG_RequestChangeNicknameOKDelegate(HostID remote, RmiContext rmiContext, string nickname, int nicknameChangeCount, int changeAvailableDateRemainSec);

        public delegate bool CG_RequestChangeWantToSayOKDelegate(HostID remote, RmiContext rmiContext, string wantToSay, MissionResult missionResult);

        public delegate bool CG_RequestTeamInfoOKDelegate(HostID remote, RmiContext rmiContext, UserTeam userTeam);

        public delegate bool CG_RequestTeamSlotChangeOKDelegate(HostID remote, RmiContext rmiContext);

        public delegate bool CG_RequestTeamNameChangeOKDelegate(HostID remote, RmiContext rmiContext);

        public delegate bool CG_RequestLobbyInfoOKDelegate(HostID remote, RmiContext rmiContext, LobbyInfo lobbyInfo, MissionResult missionResult, List<ItemResultInfo> remoteItemResultInfoList, PatrolInfo patrolInfo, LoginServiceInfo loginServiceInfo);

        public delegate bool CG_RequestBasePointInfoOKDelegate(HostID remote, RmiContext rmiContext, BasePointInfo basePointInfo, BasePointRefreshInfo basePointRefreshInfo, List<QuestProgressInfo> questProgressInfoList, List<ArenaRealTimePvpLastRankerStatueInfo> lastRankerStatueInfoList, PvpSeasonHistoryInfo pvpSeasonStatueInfo, int lowerLeagueTableID);

        public delegate bool CG_RequestChatStampUpdateBookmarkOKDelegate(HostID remote, RmiContext rmiContext);

        public delegate bool CG_RequestChatStampUpdateQuickMessageOKDelegate(HostID remote, RmiContext rmiContext);

        public delegate bool CG_RequestMainSkinChangeOKDelegate(HostID remote, RmiContext rmiContext, int targetSkinID);

        public delegate bool CG_RequestEventListOKDelegate(HostID remote, RmiContext rmiContext, EventPacketInfo eventPacketInfo);

        public delegate bool CG_RequestCheatEnterOKDelegate(HostID remote, RmiContext rmiContext, CheatResult result);

        public delegate bool CG_RequestCheatStageClearOKDelegate(HostID remote, RmiContext rmiContext, StageClearResultInfo stageClearResultInfo);

        public delegate bool CG_RequestDllGetItemOKDelegate(HostID remote, RmiContext rmiContext, List<ItemResultInfo> itemResultInfoList);

        public delegate bool CG_RequestRecommendFriendUSNListOKDelegate(HostID remote, RmiContext rmiContext, List<long> recommendFriendUSNList);

        public delegate bool CG_RequestDailyResetOKDelegate(HostID remote, RmiContext rmiContext, UserDailyReset dailyReset, int remainDailyResetTimeSEC, List<UserPackageMissionInfo> userPackageMissionInfoList, GambleTimeSwitchLobbyInfo gambleTimeSwitchLobbyInfo, bool isGuildBossInitialized);

        public delegate bool CG_NotifyMaintenanceDelegate(HostID remote, RmiContext rmiContext, MaintenanceInfo maintenanceInfo);

        public delegate bool CG_RequestFrozenAssetRedeemOKDelegate(HostID remote, RmiContext rmiContext, int frozenSEQ, List<ItemResultInfo> useItemResultInfoList, PaybackEventResultInfo paybackEventresultInfo);

        public delegate bool CG_RequestDataTableReloadOKDelegate(HostID remote, RmiContext rmiContext, string result);

        public delegate bool CG_NotifyEmergencyNoticeDelegate(HostID remote, RmiContext rmiContext, EmergencyNoticeInfo emergencyNoticeInfo);

        public delegate bool CG_RequestRecommendHeroGrowthInfoOKDelegate(HostID remote, RmiContext rmiContext, int heroId, RecommendHeroGrowthInfo recommendHeroGrowthInfo);

        public delegate bool CG_RequestServerVersionOKDelegate(HostID remote, RmiContext rmiContext, string serverVersionInfo);

        public delegate bool CG_RequestSkinOneStepEvolutionOKDelegate(HostID remote, RmiContext rmiContext, SkinOneStepEvolutionResult skinOneStepEvolutionResult, ItemResultInfo useItemResultInfo);

        public delegate bool CG_RequestSecurityTokenOKDelegate(HostID remote, RmiContext rmiContext, string securityToken);

        public delegate bool CG_RequestNetmarbleAuthOKDelegate(HostID remote, RmiContext rmiContext, NetmarbleAccountInfo accountInfo);

        public delegate bool CG_RequestAuthenticateCreateOKDelegate(HostID remote, RmiContext rmiContext, NetmarbleAccountInfo accountInfo);

        public delegate bool CG_RequestEditorUserInfoByNickNameOKDelegate(HostID remote, RmiContext rmiContext, NetmarbleAccountInfo accountInfo);

        public delegate bool CG_RequestLoginOKDelegate(HostID remote, RmiContext rmiContext, LoginUserResultInfo userInfo, LoginServiceInfo loginServiceInfo);

        public delegate bool CG_RequestLoginInstantlyOKDelegate(HostID remote, RmiContext rmiContext, UserDailyReset sendDailyReset, int sessionKey, LoginServiceInfo loginServiceInfo);

        public delegate bool CG_RequestForceLogoutOKDelegate(HostID remote, RmiContext rmiContext, PacketError error);

        public delegate bool CG_RetryRequestOKDelegate(HostID remote, RmiContext rmiContext);

        public delegate bool CG_RequestAccountWithdrawOKDelegate(HostID remote, RmiContext rmiContext);

        public delegate bool CG_RequestAccountWithdrawCancelOKDelegate(HostID remote, RmiContext rmiContext);

        public delegate bool GC_NotifyCookieDelegate(HostID remote, RmiContext rmiContext, ByteArrayInfo cookie);

        public delegate bool CG_RequestCookieOKDelegate(HostID remote, RmiContext rmiContext);

        public delegate bool CG_RequestVerifySecurityCertValueOKDelegate(HostID remote, RmiContext rmiContext);

        public delegate bool GC_NotifySecurityDelegate(HostID remote, RmiContext rmiContext, string securityToken);

        public delegate bool CG_RequestBillingInitializeOKDelegate(HostID remote, RmiContext rmiContext, BillingInitializeResultInfo initResultInfo);

        public delegate bool CG_RequestBillingVerifyPUOKDelegate(HostID remote, RmiContext rmiContext, BillingVerifyResultInfo verifyResultInfo, bool isDBError, List<UserPackageInfo> userPackageInfoList, List<ItemResultInfo> getItemResultInfoList, int shopMoneyID, bool isFirstBilling, bool isFirstVIP, List<UserDiaBuyEventInfo> userDiaBuyEventInfoList, List<ClientSeasonPassRankRewardInfo> seasonPassClientSendList, PacketError errorMsg, List<UserPackageMissionInfo> userPackageMissionInfoList, int firstDiaBuyItemID, UserBuffInfo userBuffInfo);

        public delegate bool CG_RequestBillingRemainTROKDelegate(HostID remote, RmiContext rmiContext, BillingRemainTRResultInfo remainTRResultInfo, List<UserPackageInfo> userPackageInfoList, List<ItemResultInfo> getItemResultInfoList, List<int> shopMoneyIDList, bool isFirstBilling, bool isFirstVIP, List<UserDiaBuyEventInfo> userDiaBuyEventInfoList, List<UserPackageMissionInfo> userPackageMissionInfoList, int firstDiaBuyItemID, UserBuffInfo userBuffInfo);

        public delegate bool CG_RequestBillingCouponVerifyOKDelegate(HostID remote, RmiContext rmiContext, BillingVerifyResultInfo verifyResultInfo, string netmarble_reward_id);

        public delegate bool CG_RequestBillingCrossPromotionOKDelegate(HostID remote, RmiContext rmiContext, BillingVerifyResultInfo verifyResultInfo);

        public delegate bool CG_RequestBillingPackageShopOKDelegate(HostID remote, RmiContext rmiContext);

        public delegate bool CG_RequestAgeInputOKDelegate(HostID remote, RmiContext rmiContext, byte ageLevel);

        public delegate bool CG_Notify_WolverineOKDelegate(HostID remote, RmiContext rmiContext, PacketError dbError, bool rePayFlag, ItemResultInfo buyDiaItemResultInfo);

        public delegate bool CG_RequestSDKInfoChangeOKDelegate(HostID remote, RmiContext rmiContext);

        public delegate bool CG_RequestPCBillingInitializeOKDelegate(HostID remote, RmiContext rmiContext, BillingInitializeResultInfo initResultInfo);

        public delegate bool CG_RequestPCBillingRemainItemsOKDelegate(HostID remote, RmiContext rmiContext, List<UserPackageInfo> userPackageInfoList, List<ItemResultInfo> getItemResultInfoList, int shopMoneyID, bool isFirstBilling, bool isFirstVIP, List<UserDiaBuyEventInfo> userDiaBuyEventInfoList, List<ClientSeasonPassRankRewardInfo> seasonPassClientSendList, PacketError errorMsg, List<UserPackageMissionInfo> userPackageMissionInfoList, int firstDiaBuyItemID, UserBuffInfo userBuffInfo);

        public delegate bool CG_RequestSkinLevelUpBySkinMaterialOKDelegate(HostID remote, RmiContext rmiContext, UserSkin targetSkin, List<NeedItemInfo> skinMaterialIDList, List<ItemResultInfo> itemResultInfoList, List<SuccessInfo> successInfoList, MissionResult missionResult, List<QuestProgressInfo> questProgressInfoList, PaybackEventResultInfo paybackEventresultInfo, List<UserPackageMissionInfo> userPackageMissionInfoList);

        public delegate bool CG_RequestSkinResearchOKDelegate(HostID remote, RmiContext rmiContext, UserSkin targetSkin, int researchID, List<ItemResultInfo> itemResultInfoList, PaybackEventResultInfo paybackEventresultInfo);

        public delegate bool CG_RequestSkinResearchInitOKDelegate(HostID remote, RmiContext rmiContext, UserSkin targetSkin, List<ItemResultInfo> useItemResultInfoList, PaybackEventResultInfo paybackEventresultInfo);

        public delegate bool CG_RequestSkinMaterialGrindOKDelegate(HostID remote, RmiContext rmiContext, List<ItemResultInfo> itemResultInfoList, MissionResult missionResult);

        public delegate bool CG_RequestSkinAwakenOKDelegate(HostID remote, RmiContext rmiContext, UserSkin targetSkin, List<ItemResultInfo> itemResultInfoList, MissionResult missionResult, List<QuestProgressInfo> questProgressInfoList, PaybackEventResultInfo paybackEventresultInfo, List<UserPackageMissionInfo> userPackageMissionInfoList, int growthPoint);

        public delegate bool CG_RequestSkinHeadStyleChangeOKDelegate(HostID remote, RmiContext rmiContext, UserSkin targetSkin);

        public delegate bool CG_RequestSkinEvolutionOKDelegate(HostID remote, RmiContext rmiContext, SkinEvolutionResult evolutionResult, bool isFirstEvolution, bool isFirstURGet, PaybackEventResultInfo paybackEventresultInfo, List<UserPackageMissionInfo> userPackageMissionInfoList);

        public delegate bool CG_RequestSkinSkillLevelUpOKDelegate(HostID remote, RmiContext rmiContext, SkinSkillLevelUpResult skillLevelUpResult, PaybackEventResultInfo paybackEventresultInfo, int growthPoint);

        public delegate bool CG_RequestSkinGiveFellowshipExpOKDelegate(HostID remote, RmiContext rmiContext, SkinGiveFellowResult fellowResult, UserADViewInfo updateUserADViewInfo);

        public delegate bool CG_RequestSkinFellowshipLevelUpRewardOKDelegate(HostID remote, RmiContext rmiContext, byte lastRewardIndex, ItemResultInfo getItemResultInfo, MissionResult missionResult);

        public delegate bool CG_RequestCostumeEquipOKDelegate(HostID remote, RmiContext rmiContext, UserSkin userSkin);

        public delegate bool CG_RequestCostumeUnEquipOKDelegate(HostID remote, RmiContext rmiContext, UserSkin userSkin);

        public delegate bool CG_RequestCostumeUnLockOKDelegate(HostID remote, RmiContext rmiContext, List<ItemResultInfo> itemResultInfoList, List<UserSkin> updateSkinList, List<UserSkin> equipSkinList, MissionResult missionResult);

        public delegate bool CG_RequestSkinOverEvolutionOKDelegate(HostID remote, RmiContext rmiContext, SkinEvolutionBreakResult evolutionBreakResult, PaybackEventResultInfo paybackEventresultInfo, int growthPoint);

        public delegate bool CG_RequestSkinMaxAwakenRewardOKDelegate(HostID remote, RmiContext rmiContext, UserSkin userSkin, List<ItemResultInfo> itemResultInfoList);

        public delegate bool CG_RequestCostumeRegisterOKDelegate(HostID remote, RmiContext rmiContext, UserSkin userSkin);

        public delegate bool CG_RequestSkinLoveRewardOKDelegate(HostID remote, RmiContext rmiContext, ItemResultInfo rewardItemInfo, byte rewardSeq, MissionResult missionResult);

        public delegate bool CG_RequestCostumeAutoRegisterOKDelegate(HostID remote, RmiContext rmiContext, List<UserSkin> userSkinList);

        public delegate bool CG_RequestStoryCostumeOKDelegate(HostID remote, RmiContext rmiContext, List<ItemResultInfo> getItemResultInfoList, List<UserCommonItem> userStoryCostumeItemList);

        public delegate bool CG_RequestCostumeLevelUpOKDelegate(HostID remote, RmiContext rmiContext, CostumeResultInfo costumeResultInfo, List<ItemResultInfo> useItemResultInfoList, MissionResult missionResult, List<QuestProgressInfo> questProgressInfoList, PaybackEventResultInfo paybackEventresultInfo, List<UserPlayCountEventInfo> userPlayCountEventInfoList, List<UserPackageMissionInfo> userPackageMissionInfoList, int afterGrowthPoint);

        public delegate bool CG_RequestSkinMaxAwakenOKDelegate(HostID remote, RmiContext rmiContext, UserSkin targetSkin, List<ItemResultInfo> itemResultInfoList, MissionResult missionResult, List<QuestProgressInfo> questProgressInfoList, List<UserPackageMissionInfo> userPackageMissionInfoList, int growthPoint);

        public delegate bool CG_RequestBattlePointRegisterOKDelegate(HostID remote, RmiContext rmiContext, int battlePoint, MissionResult missionResult, List<UserPackageMissionInfo> userPackageMissionInfoList);

        public delegate bool CG_RequestSkinTranscendOKDelegate(HostID remote, RmiContext rmiContext, UserSkin targetSkin, List<ItemResultInfo> itemResultInfoList, PaybackEventResultInfo paybackEventresultInfo, int growthPoint, MissionResult missionResult, List<QuestProgressInfo> questProgressInfoList);

        public delegate bool CG_RequestSkinTranscendResetOKDelegate(HostID remote, RmiContext rmiContext, UserSkin targetSkin, List<ItemResultInfo> itemResultInfoList, PaybackEventResultInfo paybackEventresultInfo);

        public delegate bool CG_RequestCostumeCraftOKDelegate(HostID remote, RmiContext rmiContext, List<ItemResultInfo> useItemResultInfoList, ItemResultInfo getImteResultInfo, MissionResult missionResult, PaybackEventResultInfo paybackEventresultInfo);

        public delegate bool CG_RequestLimitedCostumeCheckOKDelegate(HostID remote, RmiContext rmiContext, LimitedCostumeInfo removeLimitedCostumeInfo);

        public delegate bool CG_RequestGetExclusiveSkillOKDelegate(HostID remote, RmiContext rmiContext, UserSkin userSkin);

        public delegate bool CG_RequestSkinOverEvolutionStraightOKDelegate(HostID remote, RmiContext rmiContext, SkinEvolutionBreakResult evolutionBreakResult, PaybackEventResultInfo paybackEventresultInfo, int growthPoint);

        public delegate bool CG_RequestSkinLegendEvolutionOKDelegate(HostID remote, RmiContext rmiContext, SkinEvolutionResult evolutionResult, PaybackEventResultInfo paybackEventresultInfo, int growthPoint);

        public delegate bool CG_RequestCostumeCraftUpgradeOKDelegate(HostID remote, RmiContext rmiContext, UserCostumeCraftUpgradeInfo userCostumeCraftUpgradeInfo, List<ItemResultInfo> useItemResultInfoList, PaybackEventResultInfo paybackEventresultInfo);

        public delegate bool CG_RequestSkinLevelupBonusOKDelegate(HostID remote, RmiContext rmiContext, UserSkin targetSkin, ItemResultInfo rewardItemResultInfo, MissionResult missionResult);

        public delegate bool CG_RequestSkinExceedOKDelegate(HostID remote, RmiContext rmiContext, UserSkin targetSkin, List<ItemResultInfo> useItemResultInfoList, int growthPoint, MissionResult missionResult);

        public delegate bool CG_RequestMailListOKDelegate(HostID remote, RmiContext rmiContext, List<MailInfo> mailList, List<NoticeMailInfo> noticeMailInfoList, List<NoticeMailInfo> refoundMailInfoList, List<NoticeMailInfo> systemMailInfoList);

        public delegate bool CG_RequestMailConfirmOKDelegate(HostID remote, RmiContext rmiContext, int mailSN, MailHistoryInfo mailHistoryInfo, ItemResultInfo itemResultInfo, ApRewardInfo apRewardInfo, MissionResult missionResult);

        public delegate bool CG_RequestMailConfirmAllOKDelegate(HostID remote, RmiContext rmiContext, List<int> mailSNList, List<ItemResultInfo> itemResultInfoList, List<ApRewardInfo> apRewardInfoList, MissionResult missionResult);

        public delegate bool CG_RequestMailHistoryListOKDelegate(HostID remote, RmiContext rmiContext, List<MailHistoryInfo> mailHistoryList);

        public delegate bool CG_RequestMailRecentlyHistoryListOKDelegate(HostID remote, RmiContext rmiContext, List<MailHistoryInfo> mailHistoryList);

        public delegate bool CG_RequestFriendMailListOKDelegate(HostID remote, RmiContext rmiContext, List<MailInfo> mailList);

        public delegate bool CG_RequestFriendMailConfirmOKDelegate(HostID remote, RmiContext rmiContext, int mailSN, ItemResultInfo itemResultInfo);

        public delegate bool CG_RequestFriendMailConfirmAllOKDelegate(HostID remote, RmiContext rmiContext, List<int> confirmMailSNList, ItemResultInfo itemResultInfo);

        public delegate bool CG_RequestNoticeMailRewardOKDelegate(HostID remote, RmiContext rmiContext, int noticeMailSEQ, List<ItemResultInfo> getItemResultInfoList, List<ApRewardInfo> apRewardInfoList, NoticeMailType noticeMailType);

        public delegate bool CG_RequestPackageMailListOKDelegate(HostID remote, RmiContext rmiContext, List<PackageMailInfo> packageMailInfoList);

        public delegate bool CG_RequestPackageMailGetOKDelegate(HostID remote, RmiContext rmiContext, int mailSerial, int packageID, List<ItemResultInfo> getItemResultInfoList, List<ApRewardInfo> apRewardInfoList, MissionResult missionResult, List<UpgradeUserSkin> upgradeSkinResultInfoList);

        public delegate bool CG_RequestPackageMailHistoryListOKDelegate(HostID remote, RmiContext rmiContext, List<PackageMailHistoryInfo> packageMailHistoryInfoList);

        public delegate bool CG_RequestLevelUpPackageRewardOKDelegate(HostID remote, RmiContext rmiContext, UserPackageInfo packageInfo, List<ItemResultInfo> getItemInfoList, List<ApRewardInfo> apRewardInfoList);

        public delegate bool CG_RequestLevelUpPackageRewardAllOKDelegate(HostID remote, RmiContext rmiContext, UserPackageInfo packageInfo, List<ItemResultInfo> getItemInfoList, List<ApRewardInfo> apRewardInfoList);

        public delegate bool CG_RequestAttendancePackageRewardOKDelegate(HostID remote, RmiContext rmiContext, UserPackageInfo packageInfo, List<ItemResultInfo> getItemInfoList, List<ApRewardInfo> apRewardInfoList);

        public delegate bool CG_RequestAttendancePackageRewardAllOKDelegate(HostID remote, RmiContext rmiContext, UserPackageInfo packageInfo, List<ItemResultInfo> getItemInfoList, List<ApRewardInfo> apRewardInfoList);

        public delegate bool CG_RequestMailADRewardOKDelegate(HostID remote, RmiContext rmiContext, List<ItemResultInfo> getItemResultInfoList, MissionResult missionResult, UserADViewInfo updateUserADViewInfo);

        public delegate bool CG_RequestMissionProgressOKDelegate(HostID remote, RmiContext rmiContext, MissionResult missionResult);

        public delegate bool CG_RequestMissionClearOKDelegate(HostID remote, RmiContext rmiContext, MissionClearResultInfo missionClearResultInfo);

        public delegate bool CG_RequestMissionEventClearOKDelegate(HostID remote, RmiContext rmiContext, MissionClearResultInfo missionClearResultInfo, List<EventMissionClearRequestInfo> missionClearList, List<UpgradeUserSkin> upgradeSkinResultInfoList);

        public delegate bool CG_RequestMissionGetAchievePointRewardOKDelegate(HostID remote, RmiContext rmiContext, short rewardOrder, ItemResultInfo achievePointItemInfo, ItemResultInfo rewardItemInfo, MissionResult missionResult);

        public delegate bool CG_RequestQuestStartOKDelegate(HostID remote, RmiContext rmiContext, QuestProgressInfo startedQuestProgressInfo, ItemResultInfo questItemInfo, List<QuestProgressInfo> questProgressInfoList);

        public delegate bool CG_RequestQuestProgressOKDelegate(HostID remote, RmiContext rmiContext, QuestProgressInfo progressInfo, List<ItemResultInfo> getItemInfoList, MissionResult missionResult);

        public delegate bool CG_RequestQuestClearOKDelegate(HostID remote, RmiContext rmiContext, QuestClearResultInfo clearResultInfo, List<UserPackageMissionInfo> userPackageMissionInfoList);

        public delegate bool CG_RequestQuestRemoveOKDelegate(HostID remote, RmiContext rmiContext, int removedQuestID, ItemResultInfo removeItemResultInfo, BasePointInfo basepointInfo);

        public delegate bool CG_RequestDirectSelectorRewardOKDelegate(HostID remote, RmiContext rmiContext, int id, int heroID, int getFellowshipExp, int totalFellowshipExp, ItemResultInfo resultItemInfo);

        public delegate bool CG_RequestQuestChapterClearOKDelegate(HostID remote, RmiContext rmiContext, QuestChapterClearInfo resultChapterClearInfo, List<ItemResultInfo> rewardItemInfoList, MissionResult missionResult);

        public delegate bool CG_RequestEventQuestClearOKDelegate(HostID remote, RmiContext rmiContext, EventQuestClearResultInfo clearResultInfo);

        public delegate bool CG_RequestAnotherQuestClearOKDelegate(HostID remote, RmiContext rmiContext, AnotherQuestClearResultInfo clearResultInfo);

        public delegate bool CG_RequestNorthQuestClearOKDelegate(HostID remote, RmiContext rmiContext, NorthQuestClearResultInfo clearResultInfo);

        public delegate bool CG_RequestQuestGuideListAllClearRewardOKDelegate(HostID remote, RmiContext rmiContext, ItemResultInfo rewardItemInfo, MissionResult missionResult);

        public delegate bool CG_RequestQuestGuideListStepStartOKDelegate(HostID remote, RmiContext rmiContext, bool isGuideListRewarded, short guideListStep, List<QuestProgressInfo> questProgressInfoList);

        public delegate bool CG_RequestQuestGuideListStepClearOKDelegate(HostID remote, RmiContext rmiContext, bool isGuideListRewarded, List<ItemResultInfo> rewardItemInfoList, MissionResult missionResult, List<UpgradeUserSkin> upgradeSkinResultInfoList);

        public delegate bool CG_RequestDisasterQuestClearOKDelegate(HostID remote, RmiContext rmiContext, DisasterQuestClearResultInfo clearResultInfo);

        public delegate bool CG_RequestLobbyVRSearchOKDelegate(HostID remote, RmiContext rmiContext, int interactiveVRID, ItemResultInfo itemResultinfoList);

        public delegate bool CG_RequestLobbyVRHelbramOKDelegate(HostID remote, RmiContext rmiContext, ApRewardInfo apUpdateInfo, byte lobbyHelbramDailyCount);

        public delegate bool CG_RequestLobbyNpcSkinOKDelegate(HostID remote, RmiContext rmiContext, UserNpc userNpcInfo, MissionResult missionResult);

        public delegate bool CG_RequestLobbyNpcGiftOKDelegate(HostID remote, RmiContext rmiContext, NpcGiftResult giftResult);

        public delegate bool CG_RequestLobbyKingAmberOKDelegate(HostID remote, RmiContext rmiContext, ItemResultInfo useItemResultInfo, ItemResultInfo itemResultInfo, MissionResult missionResult, List<QuestProgressInfo> questProgressInfoList);

        public delegate bool CG_RequestLobbyDropInteractiveOpenOKDelegate(HostID remote, RmiContext rmiContext, int npcID, List<ItemResultInfo> getItemResultInfoList, MissionResult missionResult);

        public delegate bool CG_RequestLobbyUniqueInteractiveOpenOKDelegate(HostID remote, RmiContext rmiContext, int npcID, ItemResultInfo getItemResultInfo, MissionResult missionResult);

        public delegate bool CG_RequestLobbyNpcTalkInfoOKDelegate(HostID remote, RmiContext rmiContext, int guestID, int interactiveQuestionID, MissionResult missionResult);

        public delegate bool CG_RequestLobbyNpcTalkChoiceOKDelegate(HostID remote, RmiContext rmiContext, NpcTalkResult talkResult);

        public delegate bool CG_RequestLobbyBarrelOKDelegate(HostID remote, RmiContext rmiContext, byte barrelCount, byte barrelFellowCount, List<ItemResultInfo> getItemResultInfoList, UserNpcResult npcResult, MissionResult missionResult);

        public delegate bool CG_RequestLobbyBarrelRefillOKDelegate(HostID remote, RmiContext rmiContext, byte barrelCount, ItemResultInfo useItemResultInfo);

        public delegate bool CG_RequestLobbyCleanTableOKDelegate(HostID remote, RmiContext rmiContext, byte dailyCleanCount, ItemResultInfo getItemInfo, UserNpcResult npcResult, MissionResult missionResult);

        public delegate bool CG_RequestLobbyServeBeerOKDelegate(HostID remote, RmiContext rmiContext, byte dailyServeCount, ItemResultInfo getItemInfo, UserNpcResult npcResult, MissionResult missionResult);

        public delegate bool CG_RequestLobbyPlayJukeboxOKDelegate(HostID remote, RmiContext rmiContext, byte dailyPlayCount, ItemResultInfo getItemInfo, UserNpcResult npcResult, MissionResult missionResult, int playMusicID, byte musicInstrument);

        public delegate bool CG_RequestLobbyElizabethTouchOKDelegate(HostID remote, RmiContext rmiContext, byte dailyTouchCount, ItemResultInfo getItemInfo, UserNpcResult npcResult, MissionResult missionResult);

        public delegate bool CG_RequestLobbyHawkAngerOKDelegate(HostID remote, RmiContext rmiContext, byte dailyAngerCount, UserNpcResult npcResult);

        public delegate bool CG_RequestAttendanceRewardOKDelegate(HostID remote, RmiContext rmiContext, AttendanceResult attendanceResult, List<UserPackageMissionInfo> userPackageMissionInfoList);

        public delegate bool CG_RequestAttendanceEventRewardOKDelegate(HostID remote, RmiContext rmiContext, EventAttendanceResult eventAttendanceResult);

        public delegate bool CG_RequestCookingStartOKDelegate(HostID remote, RmiContext rmiContext, CookingResult cookingResult);

        public delegate bool CG_RequestRecipeActiveOKDelegate(HostID remote, RmiContext rmiContext, UserRecipeInfo userRecipeInfo, ItemResultInfo useItemResultInfo, MissionResult missionResult, List<QuestProgressInfo> questProgressInfoList);

        public delegate bool CG_RequestCookingRecipeOrderInfoOKDelegate(HostID remote, RmiContext rmiContext, List<RecipeOrderInfo> recipeOrderInfoList);

        public delegate bool CG_RequestCookingRecipeOrderOKDelegate(HostID remote, RmiContext rmiContext, RecipeOrderInfo recipeOrderInfo, MissionResult missionResult, List<QuestProgressInfo> questProgressInfoList);

        public delegate bool CG_RequestCookingRecipeDisorderOKDelegate(HostID remote, RmiContext rmiContext, byte SlotIndex);

        public delegate bool CG_RequestCookingRecipeCollectOKDelegate(HostID remote, RmiContext rmiContext, LobbyCollectResult collectResult);

        public delegate bool CG_RequestCookingRecipeCollectOneSlotOKDelegate(HostID remote, RmiContext rmiContext, RecipeOrderInfo recipeOrderInfo, LobbyCollectResult collectResult);

        public delegate bool CG_RequestCookingUseCookingBuffOKDelegate(HostID remote, RmiContext rmiContext, FoodBuffInfo foodBuffInfo, ItemResultInfo itemResultInfo, MissionResult missionResult, List<QuestProgressInfo> questProgressInfoList);

        public delegate bool CG_RequestGuestInfoOKDelegate(HostID remote, RmiContext rmiContext, LobbyGuestInfo lobbyGuestInfo, UserNpc currentNpcInfo);

        public delegate bool CG_RequestGuestChangeOKDelegate(HostID remote, RmiContext rmiContext, int guestSlotIndex, List<int> guestHeroList, List<ItemResultInfo> useItemResultInfoList, PaybackEventResultInfo paybackEventResultInfo);

        public delegate bool CG_RequestGuestChangeTargetOKDelegate(HostID remote, RmiContext rmiContext, int guestSlotIndex, int GuestID, byte inviteSpecialGuestCount, List<ItemResultInfo> useItemResultInfoList, PaybackEventResultInfo paybackEventResultInfo);

        public delegate bool CG_RequestGuestTalkOKDelegate(HostID remote, RmiContext rmiContext, NpcTalkResult talkResult);

        public delegate bool CG_RequestGuestGiftOKDelegate(HostID remote, RmiContext rmiContext, NpcGiftResult giftResult);

        public delegate bool CG_RequestBirthdayNpcInfoOKDelegate(HostID remote, RmiContext rmiContext, UserNpc userNpcInfo);

        public delegate bool CG_RequestRestRewardOKDelegate(HostID remote, RmiContext rmiContext, ItemResultInfo useItemResultInfo);

        public delegate bool CG_RequestAttendanceFortuneEventRewardOKDelegate(HostID remote, RmiContext rmiContext, short rewardIndex, EventAttendanceResult eventAttendanceResult);

        public delegate bool CG_RequestEventCookingStartOKDelegate(HostID remote, RmiContext rmiContext, EventCookingResult cookingResult);

        public delegate bool CG_RequestEventRecipeActiveOKDelegate(HostID remote, RmiContext rmiContext, UserEventRecipeInfo eventRecipeInfo);

        public delegate bool CG_RequestLobbySetVisualTypeOKDelegate(HostID remote, RmiContext rmiContext, LobbyVisualType lobbyVisualType);

        public delegate bool CG_RequestLobbySetAttendanceHeroOKDelegate(HostID remote, RmiContext rmiContext, int attendanceHeroID, int activeAttendanceHeroID);

        public delegate bool CG_RequestBasePointGoldDonationOKDelegate(HostID remote, RmiContext rmiContext, BasePointInfo basePointInfo, ItemResultInfo goldResultInfo, List<ItemResultInfo> rewardResultInfoList, UserBuffInfo userBuffInfo, MissionResult missionResult, List<QuestProgressInfo> questProgressInfoList, PaybackEventResultInfo paybackEventresultInfo);

        public delegate bool CG_RequestBasePointSetTriggerOKDelegate(HostID remote, RmiContext rmiContext, int triggerID, MissionResult missionResult);

        public delegate bool CG_RequestBasePointDropInteractiveOpenOKDelegate(HostID remote, RmiContext rmiContext, int npcID, List<ItemResultInfo> getItemResultInfoList, MissionResult missionResult);

        public delegate bool CG_RequestBasePointUniqueInteractiveOpenOKDelegate(HostID remote, RmiContext rmiContext, int npcID, ItemResultInfo getItemResultInfo, MissionResult missionResult);

        public delegate bool CG_RequestBasePointDailyRewardOKDelegate(HostID remote, RmiContext rmiContext, int basepointAreaIndex, int basepointDailyRewardValue, List<ItemResultInfo> getItemResultInfoList);

        public delegate bool CG_RequestBasePointDonationEventRewardOKDelegate(HostID remote, RmiContext rmiContext, List<ItemResultInfo> rewardItemInfoList, UserDonationEventInfo donationEventInfo, MissionResult missionResult);

        public delegate bool CG_RequestBasePointDonationInfoOKDelegate(HostID remote, RmiContext rmiContext, int basepointID, int overDonationValue, UserDonationEventInfo userDonationEventInfo);

        public delegate bool CG_RequestBasePointEventGoldDonationOKDelegate(HostID remote, RmiContext rmiContext, BasePointInfo basePointInfo, ItemResultInfo goldResultInfo, List<ItemResultInfo> rewardResultInfoList, UserBuffInfo userBuffInfo, UserDonationEventInfo donationEventInfo, MissionResult missionResult, List<QuestProgressInfo> questProgressInfoList, PaybackEventResultInfo paybackEventresultInfo);

        public delegate bool CG_RequestEventBasepointInfoOKDelegate(HostID remote, RmiContext rmiContext, EventBasepointInfo eventBasepointInfo, BasePointRefreshInfo basePointRefreshInfo, List<QuestProgressInfo> questProgressInfoList);

        public delegate bool GC_NotifyDestroyInviteDelegate(HostID remote, RmiContext rmiContext, UserProfileInfo hostInfo, DestroyClientSendRoomInfo invitedRoomInfo);

        public delegate bool CG_RequestDestroySetInviteOptionOKDelegate(HostID remote, RmiContext rmiContext, DestroyInviteOption option);

        public delegate bool CG_RequestDestroyGetUserLoginListOKDelegate(HostID remote, RmiContext rmiContext, List<DestroyUserProfileInfo> userProfileInfoList);

        public delegate bool CG_RequestDestroyGetFriendLoginListOKDelegate(HostID remote, RmiContext rmiContext, List<DestroyUserProfileInfo> friendProfileInfoList);

        public delegate bool CG_RequestDestroyGetGuildLoginListOKDelegate(HostID remote, RmiContext rmiContext, List<DestroyUserProfileInfo> guildMemberProfileInfoList);

        public delegate bool CG_RequestDestroyGetReceivedInvitationListOKDelegate(HostID remote, RmiContext rmiContext, List<DestroyClientSendRoomInfo> invitedRoomInfoList);

        public delegate bool CG_RequestDestroyInviteOKDelegate(HostID remote, RmiContext rmiContext, List<long> invitedUSNList);

        public delegate bool CG_RequestDestroyRemoveInvitationOKDelegate(HostID remote, RmiContext rmiContext, int roomSN);

        public delegate bool CG_RequestDestroyRemoveJoinInfoOKDelegate(HostID remote, RmiContext rmiContext);

        public delegate bool CG_RequestDestroyCreateOKDelegate(HostID remote, RmiContext rmiContext, DestroyCreateResult createResult, byte multiBossCount, List<int> stageIdList);

        public delegate bool CG_RequestDestroyStartOKDelegate(HostID remote, RmiContext rmiContext);

        public delegate bool CG_RequestDestroyBattleStartOKDelegate(HostID remote, RmiContext rmiContext, DestroyBattleStartResult battleStartResult, PaybackEventResultInfo paybackEventresultInfo);

        public delegate bool CG_RequestDestroyJoinOKDelegate(HostID remote, RmiContext rmiContext, DestroyJoinResult joinResult, byte multiBossCount);

        public delegate bool CG_RequestDestroyClearOKDelegate(HostID remote, RmiContext rmiContext, List<DestroyClearResult> clearResultList, List<UserPackageMissionInfo> userPackageMissionInfoList);

        public delegate bool CG_RequestDestroyReJoinOKDelegate(HostID remote, RmiContext rmiContext, DestroyReJoinResult joinResult, byte multiBossCount);

        public delegate bool CG_RequestDestroyRemoveOKDelegate(HostID remote, RmiContext rmiContext, DestroyDiscoverInfo destroyDiscoverInfo, ItemResultInfo rewardItemInfo, MissionResult missionResult);

        public delegate bool CG_RequestDestroyBattleEndOKDelegate(HostID remote, RmiContext rmiContext, MissionResult missionResult, List<UserPackageMissionInfo> userPackageMissionInfoList);

        public delegate bool CG_RequestDestroyInviteAIOKDelegate(HostID remote, RmiContext rmiContext, OtherPlayerTeamInfo otherPlayerTeamInfo, DestroyUserProfileInfo destroyUserProfileInfo);

        public delegate bool CG_RequestDestroyKickOutAIOKDelegate(HostID remote, RmiContext rmiContext);

        public delegate bool CG_RequestEventDestroyCreateOKDelegate(HostID remote, RmiContext rmiContext, DestroyCreateResult createResult);

        public delegate bool CG_RequestEventDestroyClearOKDelegate(HostID remote, RmiContext rmiContext, DestroyClearResult clearResult);

        public delegate bool CG_RequestEventDestroyStartOKDelegate(HostID remote, RmiContext rmiContext);

        public delegate bool CG_RequestEventDestroyRemoveOKDelegate(HostID remote, RmiContext rmiContext, DestroyDiscoverInfo destroyDiscoverInfo, ItemResultInfo rewardItemInfo, MissionResult missionResult);

        public delegate bool CG_RequestEventChallengeDestroyCreateOKDelegate(HostID remote, RmiContext rmiContext, DestroyCreateResult createResult);

        public delegate bool CG_RequestEventChallengeDestroyStartOKDelegate(HostID remote, RmiContext rmiContext);

        public delegate bool CG_RequestEventChallengeDestroyClearOKDelegate(HostID remote, RmiContext rmiContext, DestroyClearResult clearResult, UserChallengeDestroyEventInfo userChallengeDestroyEventInfo, long worldTotalPoint);

        public delegate bool CG_RequestEventChallengeDestroyPointRefreshOKDelegate(HostID remote, RmiContext rmiContext, int eventSEQ, long worldTotalPoint);

        public delegate bool CG_RequestEventChallengeDestroyUserRewardOKDelegate(HostID remote, RmiContext rmiContext, UserChallengeDestroyEventInfo userChallengeDestroyEventInfo, List<ItemResultInfo> getItemResultInfoList, MissionResult missionResult);

        public delegate bool CG_RequestEventChallengeDestroyWorldRewardOKDelegate(HostID remote, RmiContext rmiContext, UserChallengeDestroyEventInfo userChallengeDestroyEventInfo, List<ItemResultInfo> getItemResultInfoList, MissionResult missionResult);

        public delegate bool CG_RequestDisasterDestroyCreateOKDelegate(HostID remote, RmiContext rmiContext, DestroyCreateResult createResult);

        public delegate bool CG_RequestDisasterDestroyStartOKDelegate(HostID remote, RmiContext rmiContext);

        public delegate bool CG_RequestDisasterDestroyClearOKDelegate(HostID remote, RmiContext rmiContext, DestroyClearResult clearResult);

        public delegate bool CG_RequestEventDisasterDestroyCreateOKDelegate(HostID remote, RmiContext rmiContext, DestroyCreateResult createResult, int remainSec);

        public delegate bool CG_RequestEventDisasterDestroyStartOKDelegate(HostID remote, RmiContext rmiContext);

        public delegate bool CG_RequestEventDisasterDestroyClearOKDelegate(HostID remote, RmiContext rmiContext, DestroyClearResult clearResult);

        public delegate bool CG_RequestEventDisasterDestroyLeaveOKDelegate(HostID remote, RmiContext rmiContext);

        public delegate bool CG_RequestDestroyOtherPlayerTeamInfoOKDelegate(HostID remote, RmiContext rmiContext, long targetUSN, List<DestroyOtherPlayerTeamInfo> destroyOtherPlayerTeamInfoList);

        public delegate bool CG_RequestDestroyLiveJoinRegisterOKDelegate(HostID remote, RmiContext rmiContext, int bossID, byte difficulty);

        public delegate bool CG_RequestDestroyLiveJoinUnregisterOKDelegate(HostID remote, RmiContext rmiContext, int bossID, byte difficulty);

        public delegate bool CG_RequestDestroyLiveJoinListOKDelegate(HostID remote, RmiContext rmiContext, List<DestroyLiveJoinUserInfo> destroyLiveJoinUserList);

        public delegate bool CG_RequestDestroyLiveJoinInviteOKDelegate(HostID remote, RmiContext rmiContext, long invitedUSN);

        public delegate bool CG_RequestDestroyLiveJoinAbortInvitationOKDelegate(HostID remote, RmiContext rmiContext, long invitedUSN);

        public delegate bool CG_RequestDestroyLiveJoinRejectInvitationOKDelegate(HostID remote, RmiContext rmiContext, int roomSN);

        public delegate bool GC_NotifyDestroyLiveJoinInviteDelegate(HostID remote, RmiContext rmiContext, DestroyLiveJoinInvitation liveJoinInvitation);

        public delegate bool GC_NotifyDestroyLiveJoinAbortInvitationDelegate(HostID remote, RmiContext rmiContext, int roomSN);

        public delegate bool GC_NotifyDestroyLiveJoinRejectInvitationDelegate(HostID remote, RmiContext rmiContext, long invitedUSN);

        public delegate bool CG_RequestDestroyRoomInfoOKDelegate(HostID remote, RmiContext rmiContext, int multiBossCount, List<int> stageIdList);

        public delegate bool CG_RequestFriendListOKDelegate(HostID remote, RmiContext rmiContext, List<FriendInfo> friendList, MissionResult missionResult, List<FriendInfo> randomRecommendfriendList);

        public delegate bool CG_RequestFriendGuildInfoOKDelegate(HostID remote, RmiContext rmiContext, FriendGuildInfo friendGuildInfo);

        public delegate bool CG_RequestFriendApplySendListOKDelegate(HostID remote, RmiContext rmiContext, List<FriendInfo> applySendList);

        public delegate bool CG_RequestFriendApplyReceiveListOKDelegate(HostID remote, RmiContext rmiContext, List<FriendInfo> applyReceiveList);

        public delegate bool CG_RequestFriendApplySendOKDelegate(HostID remote, RmiContext rmiContext, long targetUSN);

        public delegate bool CG_RequestFriendApplyRejectOKDelegate(HostID remote, RmiContext rmiContext, long targetUSN);

        public delegate bool CG_RequestFriendApplyReceiveAcceptOKDelegate(HostID remote, RmiContext rmiContext, long targetUSN, MissionResult missionResult);

        public delegate bool CG_RequestFriendApplyReceiveAcceptListOKDelegate(HostID remote, RmiContext rmiContext, List<long> targetUSNList, MissionResult missionResult);

        public delegate bool CG_RequestFriendApplyReceiveRefuseOKDelegate(HostID remote, RmiContext rmiContext, long targetUSN);

        public delegate bool CG_RequestFriendApplyReceiveRefuseListOKDelegate(HostID remote, RmiContext rmiContext, List<long> targetUSNList);

        public delegate bool CG_RequestFriendRemoveOKDelegate(HostID remote, RmiContext rmiContext, long targetUSN);

        public delegate bool CG_RequestFriendSearchOKDelegate(HostID remote, RmiContext rmiContext, FriendInfo searchUserInfo);

        public delegate bool CG_RequestFriendVisitOKDelegate(HostID remote, RmiContext rmiContext, FriendInfo friendInfo);

        public delegate bool CG_RequestFriendPointSendOKDelegate(HostID remote, RmiContext rmiContext, FriendInfo friendInfo, List<QuestProgressInfo> questProgressList, MissionResult missionResult);

        public delegate bool CG_RequestFriendPointSendAllOKDelegate(HostID remote, RmiContext rmiContext, List<FriendInfo> friendInfoList, List<QuestProgressInfo> questProgressList, MissionResult missionResult);

        public delegate bool CG_RequestFriendLobbyInfoOKDelegate(HostID remote, RmiContext rmiContext, FriendLobbyInfo friendLobbyInfo);

        public delegate bool CG_RequestFriendCookingRecipeInfoOKDelegate(HostID remote, RmiContext rmiContext, bool friendCookingEatable, List<FriendRecipeOrderInfo> friendRecipeOrderInfoList);

        public delegate bool CG_RequestFriendCookingEatOKDelegate(HostID remote, RmiContext rmiContext, FriendCookingEatResult friendCookingEatResult);

        public delegate bool CG_RequestFriendCookingEatFriendListOKDelegate(HostID remote, RmiContext rmiContext, List<FriendInfo> friendInfoList);

        public delegate bool CG_RequestRefreshRecommendFriendListOKDelegate(HostID remote, RmiContext rmiContext, List<FriendInfo> recommendFriendList);

        public delegate bool CG_RequestAPRechargeByUseItemOKDelegate(HostID remote, RmiContext rmiContext, ItemResultInfo useItemResultInfo, APInfo apInfo, UserADViewInfo updateUserADViewInfo);

        public delegate bool CG_RequestFoodBuffAutoUseOnOffOKDelegate(HostID remote, RmiContext rmiContext, FoodBuffInfo foodBuffInfo);

        public delegate bool CG_RequestItemUseRankExpOKDelegate(HostID remote, RmiContext rmiContext, ItemResultInfo useItemResultInfo, int getRankExp, MissionResult missionResult);

        public delegate bool CG_RequestItemUseBoxOpenOKDelegate(HostID remote, RmiContext rmiContext, ItemUseResult itemUseResult);

        public delegate bool CG_RequestItemUseRecipeExpOKDelegate(HostID remote, RmiContext rmiContext, ItemResultInfo useItemResultInfo, int recipeID, int recipeResultExp, MissionResult missionResult);

        public delegate bool CG_RequestItemUseWeeklyKeyBoxOKDelegate(HostID remote, RmiContext rmiContext, ItemResultInfo useItemResultInfo, List<ItemResultInfo> getItemResultInfoList);

        public delegate bool CG_RequestItemUseWeaponTicketOKDelegate(HostID remote, RmiContext rmiContext, ItemResultInfo useItemResultInfo, List<ItemResultInfo> getItemResultInfoList, MissionResult missionResult);

        public delegate bool CG_RequestItemUseMusicOKDelegate(HostID remote, RmiContext rmiContext, ItemResultInfo useItemResultInfo, List<ItemResultInfo> getItemResultInfoList, MissionResult missionResult);

        public delegate bool CG_RequestItemUseBuffOKDelegate(HostID remote, RmiContext rmiContext, ItemResultInfo useItemResultInfo, UserBuffInfo userBuffInfo);

        public delegate bool CG_RequestTutorialAddStepOKDelegate(HostID remote, RmiContext rmiContext, UserTutorialInfo tutorialInfo, List<ItemResultInfo> itemResultInfoList, MissionResult missionResult);

        public delegate bool CG_RequestTutorialSetFlagOKDelegate(HostID remote, RmiContext rmiContext, UserTutorialInfo tutorialInfo, List<ItemResultInfo> itemResultInfoList, MissionResult missionResult);

        public delegate bool CG_RequestTutorialHeroFlagOKDelegate(HostID remote, RmiContext rmiContext, UserTutorialInfo tutorialInfo, MissionResult missionResult);

        public delegate bool CG_RequestTutorialGambleShopBuyOKDelegate(HostID remote, RmiContext rmiContext, UserTutorialInfo tutorialInfo, List<ItemResultInfo> useItemResultInfoList, List<ItemResultInfo> gambleItemResultInfoList, MissionResult missionResult, UserBingoGachaEventInfo userBingoGachaEventInfo, PaybackEventResultInfo paybackEventresultInfo, List<UpgradeUserSkin> upgradeSkinResultInfoList);

        public delegate bool CG_RequestBattleTutorialInfoOKDelegate(HostID remote, RmiContext rmiContext, byte battleTutorialSeq);

        public delegate bool CG_RequestBattleTutorialSetOKDelegate(HostID remote, RmiContext rmiContext, byte battleTutorialSeq);

        public delegate bool CG_RequestFriendlyMatchCreateOKDelegate(HostID remote, RmiContext rmiContext, FriendlyMatchCreateResult friendlyMatchCreateResult);

        public delegate bool CG_RequestFriendlyMatchFriendListOKDelegate(HostID remote, RmiContext rmiContext, List<FriendlyMatchUserProfileInfo> fmUserProfileInfoList);

        public delegate bool CG_RequestFriendlyMatchInviteOKDelegate(HostID remote, RmiContext rmiContext, List<long> resultInvitedUSNList);

        public delegate bool CG_RequestFriendlyMatchReceivedInviteListOKDelegate(HostID remote, RmiContext rmiContext, List<FriendlyMatchClientSendRoomInfo> invitedRoomInfoList);

        public delegate bool CG_RequestFriendlyMatchInviteAcceptOKDelegate(HostID remote, RmiContext rmiContext, FriendlyMatchJoinResult joinResult);

        public delegate bool CG_RequestFriendlyMatchInviteRejectOKDelegate(HostID remote, RmiContext rmiContext, int roomSN);

        public delegate bool CG_RequestFriendlyMatchStartOKDelegate(HostID remote, RmiContext rmiContext);

        public delegate bool CG_RequestFriendlyMatchBattleStartOKDelegate(HostID remote, RmiContext rmiContext, FriendlyMatchBattleStartResult battleStartResult);

        public delegate bool CG_RequestFriendlyMatchClearOKDelegate(HostID remote, RmiContext rmiContext, FriendlyMatchClearResult clearResult);

        public delegate bool CG_RequestFriendlyMatchExitOKDelegate(HostID remote, RmiContext rmiContext, bool isRelayServerStatus);

        public delegate bool GC_NotifyFriendlyMatchInviteDelegate(HostID remote, RmiContext rmiContext, FriendlyMatchClientSendRoomInfo inviteRoomInfo);

        public delegate bool CG_RequestFriendlyMatchSetInviteOptionOKDelegate(HostID remote, RmiContext rmiContext, FriendlyMatchInviteOption option);

        public delegate bool CG_RequestEventMissionGetAchievePointRewardOKDelegate(HostID remote, RmiContext rmiContext, short rewardOrder, ItemResultInfo achievePointItemInfo, ItemResultInfo rewardItemInfo, MissionResult missionResult);

        public delegate bool CG_RequestEventMissionCompleteRewardOKDelegate(HostID remote, RmiContext rmiContext, int eventSeq, ItemResultInfo rewardItemInfo, MissionResult missionResult, UpgradeUserSkin upgradeSkinResultInfo);

        public delegate bool CG_RequestEventMissionInfoOKDelegate(HostID remote, RmiContext rmiContext, List<ClientSendEventMissionInfo> userMissionEventInfoList);

        public delegate bool CG_RequestLobbyFurnitureRegistOKDelegate(HostID remote, RmiContext rmiContext, List<UserFurniture> registUserFurnitureList, APInfo apInfo, bool hawkCollectAble, MissionResult missionResult);

        public delegate bool CG_RequestUserMusicEditOKDelegate(HostID remote, RmiContext rmiContext, UserMusic editUserMusic, MissionResult missionResult);

        public delegate bool CG_RequestEventSeasonPassInfoOKDelegate(HostID remote, RmiContext rmiContext, List<ClientSeasonPassRankRewardInfo> seasonPassRankRewardInfoList, UserCommonItem rankPointItemInfo, byte currentServerSeasonPassWeek, byte currentClientSeasonPassWeek, byte seasonPassRewardStackCount, byte seasonPassBuyStackCount);

        public delegate bool CG_RequestEventSeasonPassRankUpRewardOKDelegate(HostID remote, RmiContext rmiContext, List<ItemResultInfo> getItemResultInfoList, List<ApRewardInfo> apRewardInfoList, List<ClientSeasonPassRankRewardInfo> resultInfoList);

        public delegate bool CG_RequestEventSeasonPassRankUpRewardAllOKDelegate(HostID remote, RmiContext rmiContext, List<ItemResultInfo> getItemResultInfoList, List<ApRewardInfo> apRewardInfoList, List<ClientSeasonPassRankRewardInfo> resultInfoList);

        public delegate bool CG_RequestEventSeasonPassRankBuyOKDelegate(HostID remote, RmiContext rmiContext, List<ItemResultInfo> getItemResultInfoList, List<ItemResultInfo> useItemResultInfoList, PaybackEventResultInfo paybackEventresultInfo, MissionResult missionResult);

        public delegate bool CG_RequestEventExchangeOKDelegate(HostID remote, RmiContext rmiContext, UserExchangeEventInfo userExchangeInfo, List<ItemResultInfo> materialItemResultInfoList, ItemResultInfo getItemResultInfo, MissionResult missionResult, PaybackEventResultInfo paybackEventresultInfo);

        public delegate bool CG_RequestEventPlayCountRewardOKDelegate(HostID remote, RmiContext rmiContext, int eventSEQ, UserPlayCountEventInfo userPlayCountEventInfo, List<ItemResultInfo> getItemResultInfoList, MissionResult missionResult, List<UserPackageMissionInfo> userPackageMissionInfoList);

        public delegate bool CG_RequestWestSideServerInfo_RandomOKDelegate(HostID remote, RmiContext rmiContext);

        public delegate bool CG_RequestWestSideServerInfo_FixedOKDelegate(HostID remote, RmiContext rmiContext);

        public delegate bool CG_RequestWestSideServerInfo_RecommandOKDelegate(HostID remote, RmiContext rmiContext, int channelID, int maxChannelNumber, WestRoomType selectRoomType);

        public delegate bool CG_RequestWestSide_PlayerInfoOKDelegate(HostID remote, RmiContext rmiContext, WestSideUserSimpleInfo westSideUserSimpleInfo);

        public delegate bool CG_RequestWestSide_PlayerteamInfoOKDelegate(HostID remote, RmiContext rmiContext, OtherPlayerTeamInfo otherPlayerTeamInfo);

        public delegate bool CG_RequestWestSide_PlayerGuildInfoOKDelegate(HostID remote, RmiContext rmiContext, GuildInfo guildInfo, List<GuildMemberInfo> memberInfoList);

        public delegate bool CG_RequestWorldChattingChannelOKDelegate(HostID remote, RmiContext rmiContext, int targetChannelId);

        public delegate bool CG_RequestWestSideServerInfo_RandomNotifyDelegate(HostID remote, RmiContext rmiContext, WestSideServerInfo westSideServerInfo, int maxChannelNumber);

        public delegate bool CG_RequestWestSideServerInfo_FixedNotifyDelegate(HostID remote, RmiContext rmiContext, WestSideServerInfo westSideServerInfo, int maxChannelNumber, bool isChangeRandom);

        public delegate bool CG_RequestEventExchangeInfoOKDelegate(HostID remote, RmiContext rmiContext, bool isActive, DateTime serverTime);

        public delegate bool CG_RequestEventExchangeBoxGachaInfoOKDelegate(HostID remote, RmiContext rmiContext, int eventSEQ, byte resetCount, int groupIndex, List<UserExchangeEventInfo> userExchangeBoxGachaList);

        public delegate bool CG_RequestEventExchangeBoxGachaPickupOKDelegate(HostID remote, RmiContext rmiContext, byte resetCount, int groupIndex, List<UserExchangeEventInfo> userExchangeBoxGachaList, List<ItemResultInfo> getItemResultInfoList, List<ItemResultInfo> useItemResultInfoList, MissionResult missionResult, PaybackEventResultInfo paybackEventResultInfo);

        public delegate bool CG_RequestEventExchangeBoxGachaResetOKDelegate(HostID remote, RmiContext rmiContext, byte resetCount, int groupIndex, List<UserExchangeEventInfo> userExchangeBoxGachaList);

        public delegate bool CG_RequestEventPaybackRewardOKDelegate(HostID remote, RmiContext rmiContext, UserPaybackEventInfo userPaybackEventInfo, ItemResultInfo getItemResultInfo, MissionResult missionResult);

        public delegate bool CG_RequestEventSnsShareProgressOKDelegate(HostID remote, RmiContext rmiContext, int eventSEQ, UserSnsShareEventInfo userSnsShareEventInfo, MissionResult missionResult);

        public delegate bool CG_RequestEventSnsShareRewardOKDelegate(HostID remote, RmiContext rmiContext, int eventSEQ, UserSnsShareEventInfo userSnsShareEventInfo, List<ApRewardInfo> apRewardInfoList, List<ItemResultInfo> getItemResultInfoList, MissionResult missionResult);

        public delegate bool CG_RequestGagueEventInfoOKDelegate(HostID remote, RmiContext rmiContext, UserGagueEventInfo userGagueEventInfo, int remainFreeChargeSEC, int remainFreeChargeEndSEC, bool freeChargeAble, int todayChargePoint);

        public delegate bool CG_RequestGagueEventChargeOKDelegate(HostID remote, RmiContext rmiContext, int chargePoint, UserGagueEventInfo userGagueEventInfo, ItemResultInfo useItemResultInfo);

        public delegate bool CG_RequestGagueEventRewardOKDelegate(HostID remote, RmiContext rmiContext, UserGagueEventInfo userGagueEventInfo, ItemResultInfo getItemResultInfo);

        public delegate bool CG_RequestGagueEventResetOKDelegate(HostID remote, RmiContext rmiContext, UserGagueEventInfo userGagueEventInfo, List<ItemResultInfo> useItemResultInfoList, PaybackEventResultInfo m_paybackEventResultInfo);

        public delegate bool CG_RequestEventLadderRewardOKDelegate(HostID remote, RmiContext rmiContext, EventLadderResult eventLadderResult, byte eventLadderPlayCount, List<ItemResultInfo> useItemResultInfoList, List<ItemResultInfo> getItemResultInfoList, MissionResult missionResult, PaybackEventResultInfo paybackEventresultInfo);

        public delegate bool CG_RequestEventLobbyGiftRewardOKDelegate(HostID remote, RmiContext rmiContext, EventLobbyGiftResult eventLobbyGiftResult);

        public delegate bool CG_RequestEventTimeMissionInfoOKDelegate(HostID remote, RmiContext rmiContext, int currentSeverTimeMissionDays, int currentClientTimeMissionDays, ClientSendTimeMissionEventInfo clientSendTimeMissionEventInfo);

        public delegate bool CG_RequestEventTimeMissionStartOKDelegate(HostID remote, RmiContext rmiContext, ClientSendTimeMissionEventInfo updateUserTimeMissionEventInfo);

        public delegate bool CG_RequestEventLobbyDecorationRewardOKDelegate(HostID remote, RmiContext rmiContext, int eventSEQ, UserEventLobbyDecorationInfo userEventLobbyDecorationInfo, List<ItemResultInfo> getItemResultInfoList, List<ItemResultInfo> useItemResultInfoList);

        public delegate bool CG_RequestEventPvpWinCountRewardOKDelegate(HostID remote, RmiContext rmiContext, UserPVPWinCountEventInfo pvpWinCountEventInfo, List<ItemResultInfo> getItemResultInfoList);

        public delegate bool CG_RequestEventChapterClearRewardOKDelegate(HostID remote, RmiContext rmiContext, UserChapterClearEventInfo chapterClearEventInfo, List<ItemResultInfo> getItemResultInfoList, MissionResult missionResult);

        public delegate bool CG_RequestRegistPlayTitleOKDelegate(HostID remote, RmiContext rmiContext, int playTitleID);

        public delegate bool CG_RequestPlayTitleMissionRewardOKDelegate(HostID remote, RmiContext rmiContext, List<int> userPlayTitleList);

        public delegate bool CG_RequestPlayTitleInfoOKDelegate(HostID remote, RmiContext rmiContext, List<int> userPlayTitleList, MissionResult missionResult, List<PlayTitleGroupActiveInfo> playTitleGroupActiveInfoList);

        public delegate bool CG_RequestEventBingoInfoOKDelegate(HostID remote, RmiContext rmiContext, UserEventBingoInfo bingoInfo);

        public delegate bool CG_RequestEventBingoRandomNumberOKDelegate(HostID remote, RmiContext rmiContext, EventBingoRandomNumberResult result, MissionResult missionResult);

        public delegate bool CG_RequestEventBingoExchangeNumberOKDelegate(HostID remote, RmiContext rmiContext, EventBingoExchangeResult result, MissionResult missionResult);

        public delegate bool CG_RequestEventBingoResetOKDelegate(HostID remote, RmiContext rmiContext, UserEventBingoInfo bingoInfo, List<NeedItemInfo> normalRewardItemInfoList, NeedItemInfo allClearRewardItemInfo, List<ItemResultInfo> itemResultInfoList, MissionResult missionResult);

        public delegate bool CG_RequestSubdueCreateOKDelegate(HostID remote, RmiContext rmiContext, RelayServerInfo relayServerInfo);

        public delegate bool CG_RequestSubdueJoinOKDelegate(HostID remote, RmiContext rmiContext, BossWarJoinResult joinResult, RelayServerInfo relayServerInfo);

        public delegate bool CG_RequestSubdueOwnerGameStartOKDelegate(HostID remote, RmiContext rmiContext, BossWarBattleStartResult battleStartResult);

        public delegate bool CG_RequestSubdueLoadingCompleteOKDelegate(HostID remote, RmiContext rmiContext, SubdueBossPlayInfo subdueBossPlayInfo, bool isReturnToLobby, ItemResultInfo useItemResultInfo, MissionResult missionResult, bool isBuffUsed, FoodBuffInfo clientFoodBuffInfo, List<int> usedEventLobbyBuffIdList);

        public delegate bool CG_RequestSubdueOnlineFriendListOKDelegate(HostID remote, RmiContext rmiContext, List<BossWarUserProfileInfo> friendProfileInfoList);

        public delegate bool CG_RequestSubdueOnlineGuildMemberListOKDelegate(HostID remote, RmiContext rmiContext, List<BossWarUserProfileInfo> guildMemberProfileInfoList);

        public delegate bool CG_RequestSubdueOnlineUserRankRangeListOKDelegate(HostID remote, RmiContext rmiContext, List<BossWarUserProfileInfo> userProfileInfoList);

        public delegate bool CG_RequestSubdueInvitationReceiveListOKDelegate(HostID remote, RmiContext rmiContext, List<BossWarClientSendGameInfo> invitedGameInfoList);

        public delegate bool CG_RequestSubdueRemoveInvitationOKDelegate(HostID remote, RmiContext rmiContext, int gameSN);

        public delegate bool CG_RequestSubdueInviteOKDelegate(HostID remote, RmiContext rmiContext, List<long> invitedUSNList);

        public delegate bool CG_RequestSubdueRewardOKDelegate(HostID remote, RmiContext rmiContext, SubdueBossRewardResult rewardResult);

        public delegate bool CG_NotifySubdueInviteOKDelegate(HostID remote, RmiContext rmiContext, UserProfileInfo hostInfo, BossWarClientSendGameInfo invitedGameInfo);

        public delegate bool CG_RequestPatrolMissionInfoOKDelegate(HostID remote, RmiContext rmiContext, PatrolInfo patrolInfo);

        public delegate bool CG_RequestPatrolMissionStartOKDelegate(HostID remote, RmiContext rmiContext, PatrolMissionInfo missionInfo, List<UserHeroPassiveGroupInfo> heroPassiveGroupList, MissionResult missionResult);

        public delegate bool CG_RequestPatrolMissionCancelOKDelegate(HostID remote, RmiContext rmiContext, int patrolId, PatrolMissionInfo newMIssionInfo, MissionResult missionResult);

        public delegate bool CG_RequestPatrolMissionRewardOKDelegate(HostID remote, RmiContext rmiContext, List<PatrolMissionInfo> patrolMissionInfoList, List<ItemResultInfo> itemResultInfoList, List<ItemResultInfo> passiveItemResultInfoList, MissionResult missionResult);

        public delegate bool CG_RequestPatrolMissionTimeRewardOKDelegate(HostID remote, RmiContext rmiContext, ItemResultInfo itemResultInfo, MissionResult missionResult, byte rotationId);

        public delegate bool CG_RequestEventExchangeCardInfoOKDelegate(HostID remote, RmiContext rmiContext, EventExchangeCardInfo eventExchangeCardInfo);

        public delegate bool CG_RequestEventExchangeCardSetupOKDelegate(HostID remote, RmiContext rmiContext, EventExchangeCardInfo eventExchangeCardInfo);

        public delegate bool CG_RequestEventExchangeCardChoiceManualOKDelegate(HostID remote, RmiContext rmiContext, EventExchangeCardInfo eventExchangeCardInfo, List<ItemResultInfo> getItemResultInfoList, List<ItemResultInfo> useItemResultInfoList, MissionResult missionResult);

        public delegate bool CG_RequestEventExchangeCardChoiceAutoOKDelegate(HostID remote, RmiContext rmiContext, EventExchangeCardInfo eventExchangeCardInfo, List<ItemResultInfo> getItemResultInfoList, List<ItemResultInfo> useItemResultInfoList);

        public delegate bool CG_RequestEventExchangeCardResetOKDelegate(HostID remote, RmiContext rmiContext, EventExchangeCardInfo eventExchangeCardInfo);

        public delegate bool CG_RequestEventCraftExchangeOKDelegate(HostID remote, RmiContext rmiContext, ItemResultInfo craftItemInfo, List<ItemResultInfo> useItemResultInfoList, MissionResult missionResult);

        public delegate bool CG_RequestEventProvisionProvideOKDelegate(HostID remote, RmiContext rmiContext, UserProvisionEventSectionInfo sectionInfo, List<ItemResultInfo> useItemResultInfoList, List<ItemResultInfo> provisionRewardItemInfoList, ItemResultInfo sectionRewardItemInfo, MissionResult missionResult);

        public delegate bool CG_RequestEventProvisionGetFinalRewardOKDelegate(HostID remote, RmiContext rmiContext, UserProvisionEventInfo provisionEventInfo, ItemResultInfo finalRewardItemInfo, MissionResult missionResult);

        public delegate bool CG_RequestEventExchangeKingAmberOKDelegate(HostID remote, RmiContext rmiContext, UserExchangeEventInfo userExchangeEventInfo, ItemResultInfo useItemResultInfo, ItemResultInfo getItemResultInfo, MissionResult missionResult, List<QuestProgressInfo> questProgressInfoList);

        public delegate bool CG_RequestEventTreasureHuntInfoOKDelegate(HostID remote, RmiContext rmiContext, UserTreasureHuntEventInfo userTreasureHuntEventInfo);

        public delegate bool CG_RequestEventTreasureHuntStartOKDelegate(HostID remote, RmiContext rmiContext, UserTreasureHuntEventInfo userTreasureHuntEventInfo);

        public delegate bool CG_RequestEventTreasureHuntMoveDiceOKDelegate(HostID remote, RmiContext rmiContext, UserTreasureHuntEventInfo userTreasureHuntEventInfo, List<ItemResultInfo> useItemResultInfoList, List<ItemResultInfo> rewardItemResultInfoList, MissionResult missionResult);

        public delegate bool CG_RequestEventTreasureHuntMoveChoosePointOKDelegate(HostID remote, RmiContext rmiContext, UserTreasureHuntEventInfo userTreasureHuntEventInfo, List<ItemResultInfo> rewardItemResultInfoList);

        public delegate bool CG_RequestEventTreasureHuntChooseRewardOKDelegate(HostID remote, RmiContext rmiContext, UserTreasureHuntEventInfo userTreasureHuntEventInfo, List<ItemResultInfo> rewardItemResultInfoList);

        public delegate bool CG_RequestEventTreasureHuntCompleteOKDelegate(HostID remote, RmiContext rmiContext, UserTreasureHuntEventInfo userTreasureHuntEventInfo, List<ItemResultInfo> useItemResultInfoList);

        public delegate bool CG_RequestEventTreasureHuntCompleteRewardOKDelegate(HostID remote, RmiContext rmiContext, UserTreasureHuntEventInfo userTreasureHuntEventInfo, List<ItemResultInfo> rewardItemResultInfoList);

        public delegate bool CG_RequestEventTreasureHuntMissionOKDelegate(HostID remote, RmiContext rmiContext, UserTreasureHuntEventInfo userTreasureHuntEventInfo, List<ItemResultInfo> useItemResultInfoList, List<ItemResultInfo> rewardItemResultInfoList);

        public delegate bool CG_RequestNMFunTalkKitLoginOKDelegate(HostID remote, RmiContext rmiContext);

        public delegate bool CG_RequestNMFunTalkKitCreateRoomOKDelegate(HostID remote, RmiContext rmiContext, int errorCode);

        public delegate bool CG_RequestNMFunTalkKitPasswordOKDelegate(HostID remote, RmiContext rmiContext, string pwd, string guildChatRoomPrefix, int guildSN);

        public delegate bool GC_NotifyNMFunTalkKitGuildRoomJoinDelegate(HostID remote, RmiContext rmiContext, int errorCode, string guildChatRoomPrefix, int guildSN);

        public delegate bool GC_NotifyNMFunTalkKitGuildRoomLeaveDelegate(HostID remote, RmiContext rmiContext);

        public delegate bool GC_NotifyChatInfoDelegate(HostID remote, RmiContext rmiContext, ChatInfo chatInfo);

        public delegate bool CG_RequestEventGamblePaybackRewardOKDelegate(HostID remote, RmiContext rmiContext, UserPaybackEventInfo userGamblePaybackEventInfo, List<ItemResultInfo> getItemResultInfoList, MissionResult missionResult);

        public delegate bool CG_RequestEventRandomBoxInfoOKDelegate(HostID remote, RmiContext rmiContext, UserRandomBoxEventInfo userRandomBoxEventInfo);

        public delegate bool CG_RequestEventRandomBoxCreateOKDelegate(HostID remote, RmiContext rmiContext, UserRandomBoxEventInfo userRandomBoxEventInfo, ItemResultInfo itemResultInfo, MissionResult missionResult);

        public delegate bool CG_RequestEventRandomBoxRewardOKDelegate(HostID remote, RmiContext rmiContext, byte slot, EventRandomBoxInfo boxInfo, EventRandomBoxChangeType changeType, int mileage, ItemResultInfo itemResultInfo, MissionResult missionResult);

        public delegate bool CG_RequestSeasonpassShopInfoOKDelegate(HostID remote, RmiContext rmiContext, int eventSEQ, List<SeasonPassShopBuyInfo> shopBuyInfoList);

        public delegate bool CG_RequestSeasonpassShopBuyOKDelegate(HostID remote, RmiContext rmiContext, List<ItemResultInfo> useItemResultInfoList, List<ItemResultInfo> getItemResultInfoList, int eventSEQ, ShopBuyInfo shopBuyInfo, MissionResult missionResult, PaybackEventResultInfo paybackEventresultInfo);

        public delegate bool CG_Request_EventPredict_User_InfoOKDelegate(HostID remote, RmiContext rmiContext, int eventSEQ, EventPredictInfo userPredictInfo);

        public delegate bool CG_Request_EventPredict_StartOKDelegate(HostID remote, RmiContext rmiContext, int eventSEQ, List<HawkStepInfo> hawkStepList, List<ItemResultInfo> resultItemInfoList, int getScore, EventPredictInfo userPredictInfo, ItemResultInfo useItemResultInfo, MissionResult missionResult);

        public delegate bool CG_Request_EventPredict_Special_RewardOKDelegate(HostID remote, RmiContext rmiContext, int eventSEQ, byte specialRewardIndex, List<ItemResultInfo> resultItemInfoList, MissionResult missionResult);

        public delegate bool CG_Request_EventAuto_OnOKDelegate(HostID remote, RmiContext rmiContext, EventAutoInfo userEventAutoInfo);

        public delegate bool CG_Request_EventAuto_ResultOKDelegate(HostID remote, RmiContext rmiContext, EventAutoInfo userEventAutoInfo, int normalKillCount, int bossKillCount);

        public delegate bool CG_Request_EventAuto_Battle_EndOKDelegate(HostID remote, RmiContext rmiContext, EventAutoInfo userEventAutoInfo);

        public delegate bool CG_Request_EventAuto_HawkUpgradeOKDelegate(HostID remote, RmiContext rmiContext, EventAutoInfo userEventAutoInfo, List<ItemResultInfo> useItemResultInfoList, MissionResult missionResult);

        public delegate bool CG_Request_EventAuto_RewardOKDelegate(HostID remote, RmiContext rmiContext, EventAutoInfo userEventAutoInfo, List<ItemResultInfo> rewardItemInfoList, MissionResult missionResult);

        public delegate bool CG_Request_EventAuto_Box_Slot_UpgradeOKDelegate(HostID remote, RmiContext rmiContext, EventAutoInfo userEventAutoInfo, List<ItemResultInfo> useItemResultInfoList);

        public delegate bool CG_Request_EventAuto_SpecialRewardOKDelegate(HostID remote, RmiContext rmiContext, EventAutoInfo userEventAutoInfo, List<ItemResultInfo> rewardItemInfoList, MissionResult missionResult);

        public delegate bool CG_RequestArtifactCardPackOpenOKDelegate(HostID remote, RmiContext rmiContext, ItemResultInfo useItemResultInfo, List<ItemResultInfo> getItemResultInfoList, MissionResult missionResult);

        public delegate bool CG_RequestArtifactUnionUpgradeOKDelegate(HostID remote, RmiContext rmiContext, UserArtifactUnionInfo unionInfo, List<ItemResultInfo> useItemResultInfoList, MissionResult missionResult, PaybackEventResultInfo paybackEventresultInfo);

        public delegate bool CG_RequestArtifactTeamChangeOKDelegate(HostID remote, RmiContext rmiContext);

        public delegate bool CG_RequestArtifactDescentBossTeamChangeOKDelegate(HostID remote, RmiContext rmiContext);

        public delegate bool CG_RequestArtifactTeamInfoAllOKDelegate(HostID remote, RmiContext rmiContext, List<UserArtifactTeamInfo> userArtifactTeamInfoList);

        public delegate bool CG_RequestEventArtifactWishSaveOKDelegate(HostID remote, RmiContext rmiContext, UserArtifactWishEventInfo userArtifactWishEventInfo);

        public delegate bool CG_RequestEventArtifactWishCardPackOpenOKDelegate(HostID remote, RmiContext rmiContext, UserArtifactWishEventInfo userArtifactWishEventInfo, ItemResultInfo useItemResultInfo, List<ItemResultInfo> getItemResultInfoList, MissionResult missionResult, int getWishSlotIndex);

        public delegate bool CG_RequestArtifactDemonLordTeamChangeOKDelegate(HostID remote, RmiContext rmiContext);

        public delegate bool CG_RequestNorthGrimBookRewardOKDelegate(HostID remote, RmiContext rmiContext, int grimContentID, NorthGrimBookCategoryInfo grimCategoryInfo, ItemResultInfo rewardItemInfo, MissionResult missionResult);

        public delegate bool CG_RequestEventCheerGroupOKDelegate(HostID remote, RmiContext rmiContext, UserCheerEventInfo userCheerEventInfo, List<ItemResultInfo> useItemResultInfoList, List<ItemResultInfo> rewardItemResultInfoList, MissionResult missionResult);

        public delegate bool CG_RequestEventCheerGaugeRewardOKDelegate(HostID remote, RmiContext rmiContext, UserCheerEventInfo userCheerEventInfo, List<ItemResultInfo> rewardItemResultInfoList, MissionResult missionResult);

        public delegate bool CG_RequestEventCheerFinishRewardOKDelegate(HostID remote, RmiContext rmiContext, UserCheerEventInfo userCheerEventInfo, List<ItemResultInfo> rewardItemResultInfoList, MissionResult missionResult);

        public delegate bool CG_RequestEventDiceInfoOKDelegate(HostID remote, RmiContext rmiContext, ClientSendEventDiceInfo clientEventDiceInfo);

        public delegate bool CG_RequestEventDiceRollOKDelegate(HostID remote, RmiContext rmiContext, ClientSendEventDiceInfo clientEventDiceInfo, MissionResult missionResult);

        public delegate bool CG_RequestEventDiceRollEventHandleOKDelegate(HostID remote, RmiContext rmiContext, int resultIndex, ClientSendEventDiceInfo clientEventDiceInfo, ItemResultInfo getItemResultInfo);

        public delegate bool CG_RequestEventDiceRaceRewardOKDelegate(HostID remote, RmiContext rmiContext, ClientSendEventDiceInfo clientEventDiceInfo, ItemResultInfo getItemResultInfo);

        public delegate bool CG_RequestConstellationStoneOpenOKDelegate(HostID remote, RmiContext rmiContext, byte group, List<ConstellationStoneInfo> stoneInfoList, MissionResult missionResult, int growthPoint);

        public delegate bool CG_RequestConstellationStoneOptionValueChangeOKDelegate(HostID remote, RmiContext rmiContext, byte group, List<ConstellationStoneInfo> stoneInfoList, List<ItemResultInfo> useItemInfoResultList);

        public delegate bool CG_RequestConstellationStoneOptionValueChangeApplyOKDelegate(HostID remote, RmiContext rmiContext, byte group, List<ConstellationStoneInfo> stoneInfoList);

        public delegate bool CG_RequestMaterialFusionOKDelegate(HostID remote, RmiContext rmiContext, int userMaterialFusionPoint, ItemResultInfo rewardItemResultInfo, List<ItemResultInfo> materialItemResultInfoList, MissionResult missionResult);

        public delegate bool CG_RequestEventSkinOneStepEvolutionOKDelegate(HostID remote, RmiContext rmiContext, UserSkinOneStepEvolutionEventInfo userSkinOneStepEvolutionEventInfo, ItemResultInfo useItemResultInfo, SkinOneStepEvolutionResult skinOneStepEvolutionResult);

        public delegate bool CG_RequestEventPuzzleInfoOKDelegate(HostID remote, RmiContext rmiContext, ClientSendEventPuzzleInfo puzzleEventInfo);

        public delegate bool CG_RequestEventPuzzleInfoStartOKDelegate(HostID remote, RmiContext rmiContext, ClientSendEventPuzzleInfo puzzleEventInfo, List<int> usedEventLobbyBuffIdList);

        public delegate bool CG_RequestEventPuzzleInfoEndOKDelegate(HostID remote, RmiContext rmiContext, ClientSendEventPuzzleInfo puzzleEventInfo, List<ItemResultInfo> rewardItemResultInfoList, MissionResult missionResult, List<int> usedEventLobbyBuffIdList);

        public delegate bool CG_RequestEventPuzzleInfoBlockRewardOKDelegate(HostID remote, RmiContext rmiContext, ClientSendEventPuzzleInfo puzzleEventInfo, ItemResultInfo rewardItemResultInfo, MissionResult missionResult, int blockID, int resultRewardOrder);

        public delegate bool CG_RequestEventPuzzleInfoTotalRewardOKDelegate(HostID remote, RmiContext rmiContext, ClientSendEventPuzzleInfo puzzleEventInfo, ItemResultInfo rewardItemResultInfo, MissionResult missionResult);

        public delegate bool CG_RequestRandomLuckybagInfoOKDelegate(HostID remote, RmiContext rmiContext, UserRandomLuckybagInfo userEventLuckybagInfo);

        public delegate bool CG_RequestRandomLuckybagOpenOKDelegate(HostID remote, RmiContext rmiContext, UserRandomLuckybagInfo userLuckybagInfo, ItemResultInfo priceItemResultInfo, List<ItemResultInfo> rewardItemResultInfoList, MissionResult missionResult);

        public delegate bool CG_RequestRandomLuckybagLastRewardOKDelegate(HostID remote, RmiContext rmiContext, UserRandomLuckybagInfo userLuckybagInfo, List<ItemResultInfo> rewardItemResultInfoList, MissionResult missionResult);

        public delegate bool CG_RequestEventStepupMissionStartOKDelegate(HostID remote, RmiContext rmiContext, UserStepupMissionEventInfo userStepupMissionEventInfo, List<QuestProgressInfo> questProgressInfoList, MissionResult missionResult);

        public delegate bool CG_RequestEventStepupMissionGroupClearOKDelegate(HostID remote, RmiContext rmiContext, UserStepupMissionEventInfo userStepupMissionEventInfo, List<ItemResultInfo> rewardItemResultInfoList, List<QuestProgressInfo> questProgressInfoList, MissionResult missionResult, List<int> removedQuestIDList);

        public delegate bool CG_RequestFriendlyMatchObserveCreateOKDelegate(HostID remote, RmiContext rmiContext, FriendlyMatchCreateResult friendlyMatchCreateResult);

        public delegate bool CG_RequestFriendlyMatchObserveFriendListOKDelegate(HostID remote, RmiContext rmiContext, List<FriendlyMatchUserProfileInfo> fmUserProfileInfoList);

        public delegate bool CG_RequestFriendlyMatchObserveInviteOKDelegate(HostID remote, RmiContext rmiContext, List<long> resultInvitedUSNList);

        public delegate bool CG_RequestFriendlyMatchObserveReceivedInviteListOKDelegate(HostID remote, RmiContext rmiContext, List<FriendlyMatchClientSendRoomInfo> invitedRoomInfoList);

        public delegate bool CG_RequestFriendlyMatchObserveInviteAcceptOKDelegate(HostID remote, RmiContext rmiContext, FriendlyMatchJoinResult joinResult);

        public delegate bool CG_RequestFriendlyMatchObserveInviteRejectOKDelegate(HostID remote, RmiContext rmiContext, int roomSN);

        public delegate bool CG_RequestFriendlyMatchObserveStartOKDelegate(HostID remote, RmiContext rmiContext);

        public delegate bool CG_RequestFriendlyMatchObserveBattleStartOKDelegate(HostID remote, RmiContext rmiContext, FriendlyMatchBattleStartResult battleStartResult);

        public delegate bool CG_RequestFriendlyMatchObserveClearOKDelegate(HostID remote, RmiContext rmiContext, FriendlyMatchClearResult clearResult);

        public delegate bool CG_RequestFriendlyMatchObserveExitOKDelegate(HostID remote, RmiContext rmiContext, bool isRelayServerStatus);

        public delegate bool GC_NotifyFriendlyMatchObserveInviteDelegate(HostID remote, RmiContext rmiContext, FriendlyMatchClientSendRoomInfo inviteRoomInfo);

        public delegate bool CG_RequestFriendlyMatchObserveSetInviteOptionOKDelegate(HostID remote, RmiContext rmiContext, FriendlyMatchInviteOption option);

        public delegate bool CG_RequestEventGambleWishSaveOKDelegate(HostID remote, RmiContext rmiContext, UserEventGachaWishInfo userEventGachaWishInfo);

        public delegate bool CG_RequestEventMazeInfoOKDelegate(HostID remote, RmiContext rmiContext, UserMazeEventInfo userMazeEventInfo);

        public delegate bool CG_RequestEventMazeStartOKDelegate(HostID remote, RmiContext rmiContext, UserMazeEventInfo userMazeEventInfo, List<ItemResultInfo> useItemResultInfoList, APInfo apInfo, ItemResultInfo getItemResultInfo, MissionResult missionResult);

        public delegate bool CG_RequestEventMazeSelectStartHeroesOKDelegate(HostID remote, RmiContext rmiContext, UserMazeEventInfo userMazeEventInfo);

        public delegate bool CG_RequestEventMazeInitializeOKDelegate(HostID remote, RmiContext rmiContext, UserMazeEventInfo userMazeEventInfo, ItemResultInfo useItemResultInfo);

        public delegate bool CG_RequestEventMazeMoveOKDelegate(HostID remote, RmiContext rmiContext, UserMazeEventInfo userMazeEventInfo, MissionResult missionResult);

        public delegate bool CG_RequestEventMazePassiveSelectOKDelegate(HostID remote, RmiContext rmiContext, UserMazeEventInfo userMazeEventInfo, int passiveID);

        public delegate bool CG_RequestEventMazeSeasonRewardOKDelegate(HostID remote, RmiContext rmiContext, UserMazeEventInfo userMazeEventInfo, List<ItemResultInfo> getItemResultInfoList, MissionResult missionResult);

        public delegate bool CG_RequestEventMazeChangeSlotOKDelegate(HostID remote, RmiContext rmiContext, UserMazeEventInfo userMazeEventInfo);

        public delegate bool CG_RequestEventMazeRefreshSelectableHeroesOKDelegate(HostID remote, RmiContext rmiContext, UserMazeEventInfo userMazeEventInfo, ItemResultInfo useItemResultInfo, MissionResult missionResult);

        public delegate bool CG_RequestEventMazeShopBuyOKDelegate(HostID remote, RmiContext rmiContext, UserMazeEventInfo userMazeEventInfo, ItemResultInfo useItemResultInfo, MissionResult missionResult);

        public delegate bool CG_RequestEventMazeShopBuffBuyOKDelegate(HostID remote, RmiContext rmiContext, UserMazeEventInfo userMazeEventInfo, ItemResultInfo useItemResultInfo, MissionResult missionResult);

        public delegate bool CG_RequestEventMoleGameInfoOKDelegate(HostID remote, RmiContext rmiContext, ClientSendEventMoleGameInfo clientSendEventMoleGameInfo);

        public delegate bool CG_RequestEventMoleGameStartOKDelegate(HostID remote, RmiContext rmiContext, ClientSendEventMoleGameInfo clientSendMoleGameInfo, ItemResultInfo useItemResultInfo, MissionResult missionResult);

        public delegate bool CG_RequestEventMoleGameEndOKDelegate(HostID remote, RmiContext rmiContext, ClientSendEventMoleGameInfo clientSendMoleGameInfo, List<ItemResultInfo> rewardItemResultInfoList, MissionResult missionResult);

        public delegate bool CG_RequestEventMoleGameRecordRewardOKDelegate(HostID remote, RmiContext rmiContext, ClientSendEventMoleGameInfo clientSendMoleGameInfo, int recordType, int resultRewardOrder, ItemResultInfo rewardItemResultInfo, MissionResult missionResult);

        public delegate bool CG_RequestEventMoleGameTotalRewardOKDelegate(HostID remote, RmiContext rmiContext, ClientSendEventMoleGameInfo clientSendMoleGameInfo, int resultRewardOrder, ItemResultInfo rewardItemResultInfo, MissionResult missionResult);

        public delegate bool CG_RequestEventMoleGameRankInfoOKDelegate(HostID remote, RmiContext rmiContext, int eventSEQ, List<EventMoleGameRankInfo> rankInfoList);

        public delegate bool CG_RequestEventLobbyBuffInfoOKDelegate(HostID remote, RmiContext rmiContext, UserEventLobbyBuffInfo userEventLobbyBuffInfo);

        public delegate bool CG_RequestEventLobbyBuffBuyOKDelegate(HostID remote, RmiContext rmiContext, UserEventLobbyBuffInfo userEventLobbyBuffInfo, MissionResult missionResult);

        public delegate bool GC_NotifyEventLobbyBuffInfoDelegate(HostID remote, RmiContext rmiContext, UserEventLobbyBuffInfo userEventLobbyBuffInfo);

        public delegate bool CG_RequestEventBoxWishInfoOKDelegate(HostID remote, RmiContext rmiContext, int eventSEQ, int wishStep, int wishId, List<UserExchangeEventInfo> exchangeEventInfoList);

        public delegate bool CG_RequestEventBoxWishSetOKDelegate(HostID remote, RmiContext rmiContext, int eventSEQ, int wishId);

        public delegate bool CG_RequestEventBoxWishPickUpOKDelegate(HostID remote, RmiContext rmiContext, int eventSEQ, byte pickCount, byte pickUpCount, List<UserExchangeEventInfo> exchangeEventInfoList, List<ItemResultInfo> getItemResultInfoList, List<UpgradeUserSkin> upgradeSkinList, List<ItemResultInfo> useItemResultInfoList, MissionResult missionResult);

        public delegate bool CG_RequestEventBoxWishResetOKDelegate(HostID remote, RmiContext rmiContext, int eventSEQ, int wishStep, int wishId);

        public delegate bool CG_RequestConstellationStoneLockOKDelegate(HostID remote, RmiContext rmiContext, int stoneId, bool isLock);

        public delegate bool CG_RequestEventConquestInfoOKDelegate(HostID remote, RmiContext rmiContext, UserEventConquesClientSendInfo userEventConquestClientSendInfo, bool isEventFirstEnter);

        public delegate bool CG_RequestEventConquestProductionDepotCompleteRewardOKDelegate(HostID remote, RmiContext rmiContext, UserEventConquesClientSendInfo userEventConquestClientSendInfo, List<ItemResultInfo> getItemResultInfoList, MissionResult missionResult);

        public delegate bool CG_RequestEventConquestProductionDepotUpgradeOKDelegate(HostID remote, RmiContext rmiContext, UserEventConquesClientSendInfo userEventConquestClientSendInfo, List<ItemResultInfo> useItemResultInfoList, MissionResult missionResult);

        public delegate bool CG_RequestEventConquestProductionDepotUpgradeRewardOKDelegate(HostID remote, RmiContext rmiContext, UserEventConquesClientSendInfo userEventConquestClientSendInfo, List<ItemResultInfo> getItemResultInfoList, MissionResult missionResult);

        public delegate bool CG_RequestEventConquestAreaAttackOKDelegate(HostID remote, RmiContext rmiContext, UserEventConquesClientSendInfo userEventConquestClientSendInfo, int attackAreaID, List<ItemResultInfo> useItemResultInfoList, MissionResult missionResult);

        public delegate bool CG_RequestEventConquestAreaFeverAttackOKDelegate(HostID remote, RmiContext rmiContext, UserEventConquesClientSendInfo userEventConquestClientSendInfo, int attackAreaID, List<ItemResultInfo> useItemResultInfoList, MissionResult missionResult);

        public delegate bool CG_RequestEventConquestAreaAttackRewardOKDelegate(HostID remote, RmiContext rmiContext, UserEventConquesClientSendInfo userEventConquestClientSendInfo, List<ItemResultInfo> getItemResultInfoList, MissionResult missionResult);

        public delegate bool CG_RequestEventConquestMakeFeverItemOKDelegate(HostID remote, RmiContext rmiContext, UserEventConquesClientSendInfo userEventConquestClientSendInfo, List<ItemResultInfo> useItemResultInfoList, List<ItemResultInfo> getItemResultInfoList, MissionResult missionResult);

        public delegate bool CG_RequestEventConquestUpdateSceneIndexOKDelegate(HostID remote, RmiContext rmiContext, UserEventConquesClientSendInfo userEventConquestClientSendInfo);

        public delegate bool CG_RequestEventConquestUpdateUnitPosOKDelegate(HostID remote, RmiContext rmiContext, UserEventConquesClientSendInfo userEventConquestClientSendInfo);

        public delegate bool CG_RequestEventRoadInfoOKDelegate(HostID remote, RmiContext rmiContext, UserEventRoadInfo eventRoadInfo);

        public delegate bool CG_RequestEventRoadWalkOKDelegate(HostID remote, RmiContext rmiContext, UserEventRoadInfo eventRoadInfo, List<ItemResultInfo> useItemResultInfoList, List<ItemResultInfo> getItemResultInfoList, MissionResult missionResult);

        public delegate bool CG_RequestEventRoadRewardOKDelegate(HostID remote, RmiContext rmiContext, UserEventRoadInfo eventRoadInfo, List<ItemResultInfo> getItemResultInfoList, MissionResult missionResult);

        public delegate bool CG_RequestEventRoadSelectOKDelegate(HostID remote, RmiContext rmiContext, UserEventRoadInfo eventRoadInfo);

        public delegate bool CG_RequestEventGambleBoxInfoOKDelegate(HostID remote, RmiContext rmiContext, UserEventGambleBoxInfoToClientSend eventGambleBoxInfo);

        public delegate bool CG_RequestEventGambleBoxPickupOKDelegate(HostID remote, RmiContext rmiContext, UserEventGambleBoxInfoToClientSend eventGambleBoxInfo, List<ItemResultInfo> useItemResultInfoList, List<ItemResultInfo> getItemResultInfoList, List<UpgradeUserSkin> upgradeSkinList, MissionResult missionResult);

        public delegate bool CG_RequestEventGambleBoxResetOKDelegate(HostID remote, RmiContext rmiContext, UserEventGambleBoxInfoToClientSend eventGambleBoxInfo);

        public delegate bool CG_RequestEventLuckyBoxInfoOKDelegate(HostID remote, RmiContext rmiContext, UserEventLuckyBoxInfo userEventLuckyBoxInfo);

        public delegate bool CG_RequestEventLuckyBoxRewardOKDelegate(HostID remote, RmiContext rmiContext, UserEventLuckyBoxInfo userEventLuckyBoxInfo, ItemResultInfo useItemResultInfo, NeedItemInfo rewardItemInfo, MissionResult missionResult);

        public delegate bool CG_RequestEventMazeRefreshSelectablePassivesOKDelegate(HostID remote, RmiContext rmiContext, UserMazeEventInfo userMazeEventInfo, ItemResultInfo useItemResultInfo, MissionResult missionResult);

        public delegate bool CG_RequestEventMazeSaveTeamOKDelegate(HostID remote, RmiContext rmiContext, UserMazeEventInfo userMazeEventInfo);

        public delegate bool CG_RequestEventMazeSelectClearBonusOKDelegate(HostID remote, RmiContext rmiContext, UserMazeEventInfo userMazeEventInfo);

        public delegate bool CG_RequestEventMazeStartSavedTeamOKDelegate(HostID remote, RmiContext rmiContext, UserMazeEventInfo userMazeEventInfo);

        public delegate bool CG_RequestGuildOrderMissioInfoOKDelegate(HostID remote, RmiContext rmiContext, GuildOrderMissionInfoClientSend guildOrderMissionInfoClientSend, List<UserGuildOrderMissionInfo> userGuildOrderMissionInfoClientSend, int remainNextResetSec, GuildMemberInfo userGuildMemberInfo);

        public delegate bool CG_RequestGuildOrderMissionClearOKDelegate(HostID remote, RmiContext rmiContext, int missionID, GuildOrderMissionInfoClientSend guildOrderMissionInfoClientSend, List<UserGuildOrderMissionInfo> userGuildOrderMissionInfoClientSend, List<ItemResultInfo> getItemResultInfoList, int originalGetAPCount);

        public delegate bool CG_RequestGuildOrderMissionMileageBonusRewardOKDelegate(HostID remote, RmiContext rmiContext, GuildOrderMissionInfoClientSend guildOrderMissionInfoClientSend, List<UserGuildOrderMissionInfo> userGuildOrderMissionInfoClientSend, List<ItemResultInfo> getItemResultInfoList, GuildMemberInfo userGuildMemberInfo);

        public delegate bool CG_RequestEventConfirmGameInfoOKDelegate(HostID remote, RmiContext rmiContext, ClientSendEventConfirmGameInfo confirmEventInfo);

        public delegate bool CG_RequestEventConfirmGameStartOKDelegate(HostID remote, RmiContext rmiContext, ClientSendEventConfirmGameInfo confirmEventInfo, List<ItemResultInfo> useItemResultInfoList, MissionResult missionResult);

        public delegate bool CG_RequestEventConfirmGameEndOKDelegate(HostID remote, RmiContext rmiContext, ClientSendEventConfirmGameInfo confirmEventInfo, MissionResult missionResult);

        public delegate bool CG_RequestEventConfirmGameRecordRewardOKDelegate(HostID remote, RmiContext rmiContext, ClientSendEventConfirmGameInfo confirmEventInfo, List<ItemResultInfo> rewardItemResultInfoList, MissionResult missionResult, int boxID, int resultRewardOrder);

        public delegate bool CG_RequestEventConfirmGameTotalRewardOKDelegate(HostID remote, RmiContext rmiContext, ClientSendEventConfirmGameInfo confirmEventInfo, List<ItemResultInfo> rewardItemResultInfoList, MissionResult missionResult);

        public delegate bool CG_RequestHeroLeagueInfoOKDelegate(HostID remote, RmiContext rmiContext, ClientSendHeroLeagueInfo heroLeagueInfo);

        public delegate bool CG_RequestHeroLeagueSelectLeagueOKDelegate(HostID remote, RmiContext rmiContext, UserHeroLeagueInfo userHeroLeagueInfo, APInfo apInfo, MissionResult missionResult, List<UserTeam> userTeamList);

        public delegate bool CG_RequestHeroLeagueInitializeOKDelegate(HostID remote, RmiContext rmiContext, ClientSendHeroLeagueInfo heroLeagueInfo);

        public delegate bool CG_RequestHeroLeagueInitUserGroupOKDelegate(HostID remote, RmiContext rmiContext, ClientSendHeroLeagueInfo heroLeagueInfo, List<UserSkin> updateSkinList, APInfo apInfo, MissionResult missionResult);

        public delegate bool CG_RequestHeroLeagueGagueRewardOKDelegate(HostID remote, RmiContext rmiContext, UserHeroLeagueInfo userHeroLeagueInfo, ItemResultInfo completeRewardItemResultInfo, ItemResultInfo battleRewardItemResultInfo);

        public delegate bool CG_RequestHeroLeagueAttackTeamChangeOKDelegate(HostID remote, RmiContext rmiContext, UserTeamChangeInfo userTeamChangeInfo);

        public delegate bool CG_RequestHeroLeagueStageStartOKDelegate(HostID remote, RmiContext rmiContext, StageStartResultInfo stageStartResultInfo, List<HeroLeagueHero> defenceHeroLeagueHeroList, List<HeroLeagueHero> attackHeroLeagueHeroList, List<int> seasonBuffIDList, UserHeroLeagueInfo userHeroLeagueInfo, List<UserSkin> updateSkinList);

        public delegate bool CG_RequestHeroLeagueStageClearOKDelegate(HostID remote, RmiContext rmiContext, StageClearResultInfo stageClearResultInfo, byte winCount, byte nextTeamNumber, bool isApply);

        public delegate bool CG_RequestHeroLeagueStageRejoinOKDelegate(HostID remote, RmiContext rmiContext, List<int> attackHeroIDList, List<int> defenceHeroIDList, List<int> seasonBuffIDList);

        public delegate bool CG_RequestHeroLeagueStageRejoinCancelOKDelegate(HostID remote, RmiContext rmiContext);

        public delegate bool CG_RequestHeroLeagueScoreRewardOKDelegate(HostID remote, RmiContext rmiContext, UserHeroLeagueInfo userHeroLeagueInfo, List<ItemResultInfo> getItemResultInfoList, MissionResult missionResult);

        public delegate bool CG_RequestEventBalloonDartInfoOKDelegate(HostID remote, RmiContext rmiContext, UserEventBalloonDartInfo eventBalloonDartInfo);

        public delegate bool CG_RequestEventBalloonDartThrowOKDelegate(HostID remote, RmiContext rmiContext, UserEventBalloonDartInfo eventBalloonDartInfo, List<ItemResultInfo> useItemResultInfoList, List<ItemResultInfo> getItemResultInfoList, MissionResult missionResult);

        public delegate bool CG_RequestEventBalloonDartChanceOKDelegate(HostID remote, RmiContext rmiContext, UserEventBalloonDartInfo eventBalloonDartInfo, List<ItemResultInfo> useItemResultInfoList);

        public delegate bool CG_RequestEventBalloonDartStepUpOKDelegate(HostID remote, RmiContext rmiContext, UserEventBalloonDartInfo eventBalloonDartInfo);

        public delegate bool CG_RequestEventBalloonDartStepRewardOKDelegate(HostID remote, RmiContext rmiContext, UserEventBalloonDartInfo eventBalloonDartInfo, List<ItemResultInfo> getItemResultInfoList, MissionResult missionResult);

        public delegate bool CG_RequestEventBalloonDartTotalRewardOKDelegate(HostID remote, RmiContext rmiContext, UserEventBalloonDartInfo eventBalloonDartInfo, List<ItemResultInfo> getItemResultInfoList, MissionResult missionResult);

        public delegate bool CG_RequestChatOKDelegate(HostID remote, RmiContext rmiContext);

        public delegate bool CG_RequestChatChannelEnterOKDelegate(HostID remote, RmiContext rmiContext);

        public delegate bool GC_NotifyChatDelegate(HostID remote, RmiContext rmiContext, ChatInfo chatInfo);

        public delegate bool GC_NotifyChatLogDelegate(HostID remote, RmiContext rmiContext, List<ChatInfo> chatInfoList);

        public delegate bool GC_NotifyChatChannelEnterDelegate(HostID remote, RmiContext rmiContext, int channelId);
    }
}